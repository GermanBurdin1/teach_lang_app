import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';
import { TeacherProfile } from '../teacher-profile.model';
import { Review } from '../../shared/models/review.model';
import { MOCK_REVIEWS } from '../mock-reviews';
import { AuthService } from '../../../../services/auth.service';
import { ProfilesApiService } from '../../../../services/profiles-api.service';
import { MatDialog } from '@angular/material/dialog';
import { CalendarEvent } from 'angular-calendar';
import { LessonService } from '../../../../services/lesson.service';
import { WebSocketService } from '../../../../services/web-socket.service';
import { NotificationService } from '../../../../services/notifications.service';
import { TeacherService } from '../../../../services/teacher.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { environment } from '../../../../../../environment.prod';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface Student {
  id: string;  // Make required to match BookingRequest
  name?: string;
  email?: string;
  studentId?: string;
  isStudent?: boolean;
  nextLessonDate?: string | Date | null;
  photoUrl?: string;
  title?: string;
  goals?: string[];
  homework?: Array<{
    title: string;
    status: string;
  }>;
  history?: Array<{
    date: string;
    topic: string;
  }>;
  metadata?: {
    studentName?: string;
    invitationStatus?: 'sent' | 'accepted' | 'declined';
    invitationClassId?: string;
  };
  lessons?: unknown[];
  requestDate?: string;
  [key: string]: unknown;
}

interface BookingRequest {
  id: string;
  type?: string;
  status?: string;
  message?: string;
  data?: {
    lessonId?: string;
  };
  metadata?: {
    studentName?: string;
    lessonId?: string;
  };
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ Student
  name?: string;
  title?: string;
  photoUrl?: string;
  nextLessonDate?: string | Date | null;
  isStudent?: boolean;
  studentId?: string;
  requestDate?: string;
  [key: string]: unknown;
}

interface Lesson {
  id: string;
  scheduledAt: string;
  status: string;
  studentName: string;
  studentId: string;
  teacherName?: string;
  teacherId?: string;
  [key: string]: unknown;
}

interface TeacherClass {
  id: string;
  name: string;
  level: string;
  status: string;
  students?: Student[];
  scheduledAt?: string;
  [key: string]: unknown;
}

@Component({
  selector: 'app-teacher-dashboard-overview',
  templateUrl: './overview.component.html',
  styleUrls: ['./overview.component.css']
})
export class TeacherDashboardOverviewComponent implements OnInit {
  @ViewChild('publicProfile') publicProfileTemplate!: TemplateRef<unknown>;
  @ViewChild('studentDetailDialog') studentDetailDialog!: TemplateRef<unknown>;

  constructor(
    private dialog: MatDialog,
    private authService: AuthService, 
    private profilesApi: ProfilesApiService,
    private lessonService: LessonService,
    private wsService: WebSocketService,
    private notificationService: NotificationService,
    private teacherService: TeacherService,
    private snackBar: MatSnackBar,
    private formBuilder: FormBuilder
  ) { }

  profile: TeacherProfile | null = null;
  reviews: Review[] = [];
  days = [
    { name: 'Lundi', hours: { start: '09:00', end: '17:00' } },
    { name: 'Mardi', hours: null },
    { name: 'Mercredi', hours: { start: '14:00', end: '18:00' } },
    { name: 'Jeudi', hours: null },
    { name: 'Vendredi', hours: { start: '10:00', end: '16:00' } },
    { name: 'Samedi', hours: null },
    { name: 'Dimanche', hours: null }
  ];
  selectedStudent: Student | null = null;
  studentViewFilter: 'all' | 'students' | 'pending' = 'all';

  students: Student[] = [
    {
      id: 'alice-dupont-1',
      name: 'Alice Dupont',
      isStudent: true,
      nextLessonDate: '22/05/2025',
      photoUrl: 'https://randomuser.me/api/portraits/women/1.jpg',
      goals: ['Pr√©parer le DALF C1', 'Am√©liorer la compr√©hension orale'],
      homework: [
        { title: 'Production √©crite #1', status: '√† corriger' },
        { title: 'Exercice B2', status: 'corrig√©' }
      ],
      history: [
        { date: '15/05/2025', topic: 'Subjonctif pr√©sent' },
        { date: '08/05/2025', topic: 'Compr√©hension audio' }
      ]
    },
    {
      id: 'thomas-moreau-1',
      name: 'Thomas Moreau',
      isStudent: false,
      requestDate: '18/05/2025',
      photoUrl: ''
    }
  ];

  stats = {
    newStudents: 2,
    upcomingLessons: 3
  };

  studentsPerPage = 5;
  currentPage = 1;
  itemsPerPage = 5;

  calendarEvents: CalendarEvent[] = [
    {
      start: new Date(), // –ø—Ä–∏–º–µ—Ä ‚Äî —Å–µ–≥–æ–¥–Ω—è
      title: 'Cours avec Alice Dupont'
    },
    {
      start: new Date(new Date().setDate(new Date().getDate() + 2)), // —á–µ—Ä–µ–∑ 2 –¥–Ω—è
      title: 'Cours avec Thomas Moreau'
    }
  ];

  confirmedStudents: Student[] = [];
  pendingRequests: BookingRequest[] = [];
  selectedRequest: BookingRequest | null = null;
  
  // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  sentInvitations: { [key: string]: { studentId: string, classId: string, status: 'sent' | 'accepted' | 'declined' } } = {};
  selectedReason = '';
  customReason = '';
  showRefuseDialog = false;
  treatedRequests: BookingRequest[] = [];

  // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ email
  addStudentForm!: FormGroup;
  isAddingStudent = false;
  REJECTION_REASONS = [
    'Je ne suis pas disponible √† cette date',
    'Ce cr√©neau ne correspond pas √† mon emploi du temps r√©gulier',
    'Je pr√©f√®re discuter avant d\'accepter une premi√®re le√ßon',
    'Je n\'enseigne pas actuellement √† ce niveau',
    'Autre'
  ];

  teacher: unknown = null;
  teacherReviews: unknown[] = [];
  showPublicProfilePreview = false;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–º –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
  hasActiveClass = true; // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º true –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  teacherClasses: TeacherClass[] = []; // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  inviteForm = {
    email: '',
    level: '',
    message: '',
    examGoal: ''
  };

  ngOnInit(): void {
    const stored = localStorage.getItem('teacher_reviews');
    this.reviews = stored ? JSON.parse(stored) : MOCK_REVIEWS;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    this.addStudentForm = this.formBuilder.group({
      email: ['', [Validators.required, Validators.email]]
    });
    console.log('üî•üî•üî• Form initialized:', this.addStudentForm);

    const teacherId = this.authService.getCurrentUser()?.id;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if (teacherId) {
      const storedInvitations = localStorage.getItem(`sent_invitations_${teacherId}`);
      if (storedInvitations) {
        this.sentInvitations = JSON.parse(storedInvitations);
      }
    }
    if (teacherId) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
      this.lessonService.getAllConfirmedLessonsForTeacher(teacherId).subscribe((lessons: unknown[]) => {
        this.calendarEvents = lessons.map((lesson: unknown) => {
          const lessonData = lesson as Lesson;
          return {
            start: new Date(lessonData.scheduledAt),
            title: `${this.getStatusIcon(lessonData.status)} ${lessonData.studentName}`,
            color: this.getCalendarColor(lessonData.status),
            meta: {
              lessonId: lessonData.id,
              status: lessonData.status,
              studentId: lessonData.studentId,
              studentName: lessonData.studentName
            }
          };
        });
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ (demandes) –∫–∞–∫ –≤ teacher-home.component
      this.notificationService.getNotificationsForUser(teacherId).subscribe({
        next: (all: unknown[]) => {
          this.pendingRequests = all.filter((n: unknown) => (n as BookingRequest).type === 'booking_request' && (n as BookingRequest).status === 'pending') as BookingRequest[];
          this.treatedRequests = all.filter((n: unknown) => (n as BookingRequest).type === 'booking_request' && (n as BookingRequest).status !== 'pending') as BookingRequest[];
          if (!environment.production) {
            console.log('[OVERVIEW] pendingRequests:', this.pendingRequests);
          }
        },
        error: (err: Error) => {
          if (!environment.production) {
            console.error('[OVERVIEW] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', err);
          }
        }
      });

      this.teacherService.getTeacherById(teacherId).subscribe(data => {
        this.teacher = data || null;
      });
      this.teacherService.getReviewsByTeacher(teacherId).subscribe(reviews => {
        this.teacherReviews = reviews;
      });
    }

    this.devLog('[OVERVIEW] ngOnInit - starting initialization');
    
    this.devLog('[OVERVIEW] ngOnInit - calling loadStudentsFromStorage()');
    this.loadStudentsFromStorage(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ localStorage
    
    this.devLog('[OVERVIEW] ngOnInit - calling refreshStudents()');
    this.refreshStudents();
    
    this.devLog('[OVERVIEW] ngOnInit - before refreshConfirmedStudents, confirmedStudents:', this.confirmedStudents);
    this.devLog('[OVERVIEW] ngOnInit - before refreshConfirmedStudents, confirmedStudents count:', this.confirmedStudents.length);
    
    this.devLog('[OVERVIEW] ngOnInit - calling refreshConfirmedStudents()');
    this.refreshConfirmedStudents(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    
    this.devLog('[OVERVIEW] ngOnInit - calling loadTeacherClasses()');
    this.loadTeacherClasses();
    
    this.devLog('[OVERVIEW] ngOnInit - initialization complete');
  }

  loadTeacherClasses(): void {
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId) return;
    
    const savedClasses = localStorage.getItem(`teacher_classes_${teacherId}`);
    if (savedClasses) {
      this.teacherClasses = JSON.parse(savedClasses);
      if(!environment.production) console.log('[Overview] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª–∞—Å—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', this.teacherClasses);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å
      if(!environment.production) console.log('[Overview] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–ª–∞—Å—Å');
      this.teacherClasses = [
        {
          id: 'demo-class-1',
          name: 'DELF B1 - Groupe 1',
          level: 'B1',
          description: 'Classe de d√©monstration pour DELF B1',
          maxStudents: 10,
          students: [],
          teacherId: teacherId,
          createdAt: new Date().toISOString(),
          scheduledAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(), // Dans 3 jours
          status: 'active'
        },
        {
          id: 'demo-class-2', 
          name: 'DALF C1 - Groupe Avanc√©',
          level: 'C1',
          description: 'Classe de d√©monstration pour DALF C1',
          maxStudents: 8,
          students: [],
          teacherId: teacherId,
          createdAt: new Date().toISOString(),
          scheduledAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // Dans 7 jours
          status: 'active'
        }
      ];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–∫–ª–∞—Å—Å—ã
      localStorage.setItem(`teacher_classes_${teacherId}`, JSON.stringify(this.teacherClasses));
    }
  }

  openPublicProfileModal(): void {
    this.showPublicProfilePreview = true;
    const userId = this.authService.getCurrentUser()?.id;
    if(!environment.production) console.log('[Overview] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è userId:', userId);
    if (userId) {
      this.teacherService.getTeacherById(userId).subscribe({
        next: data => {
          if(!environment.production) console.log('[Overview] teacherService.getTeacherById –æ—Ç–≤–µ—Ç:', data);
          this.teacher = data || null;
        },
        error: err => {
          console.error('[Overview] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ teacher:', err);
        }
      });
      this.teacherService.getReviewsByTeacher(userId).subscribe({
        next: reviews => {
          if(!environment.production) console.log('[Overview] teacherService.getReviewsByTeacher –æ—Ç–≤–µ—Ç:', reviews);
          this.teacherReviews = reviews;
        },
        error: err => {
          console.error('[Overview] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', err);
        }
      });
    }
    this.dialog.open(this.publicProfileTemplate, {
      width: '90%',
      maxWidth: '1100px',
      panelClass: 'teacher-preview-modal'
    }).afterClosed().subscribe(() => {
      this.showPublicProfilePreview = false;
    });
  }

  openStudentModal(student: Student): void {
    this.selectedStudent = student as Student;
    if (!this.studentDetailDialog) {
      console.error('studentDetailDialog is undefined');
      return;
    }

    this.dialog.open(this.studentDetailDialog, {
      width: '500px',
      maxHeight: '90vh',
      panelClass: 'teacher-preview-modal'
    });
  }


  addSpecialization(newSpec: string) {
    if (newSpec && !this.profile?.specializations.includes(newSpec)) {
      this.profile?.specializations.push(newSpec);
    }
  }

  removeSpecialization(spec: string) {
    this.profile!.specializations = this.profile!.specializations.filter(s => s !== spec);
  }

  addCertificate(newCert: string) {
    if (newCert && !this.profile?.certificates.includes(newCert)) {
      this.profile?.certificates.push(newCert);
    }
  }

  removeCertificate(cert: string) {
    this.profile!.certificates = this.profile!.certificates.filter(c => c !== cert);
  }

  updateProfileField(): void {
    const userId = this.authService.getCurrentUser()?.id;
    if (!this.profile || !userId) return;

    this.profilesApi.updateProfile({ ...this.profile, user_id: userId }).subscribe({
      next: () => console.log('[overview] Profil mis √† jour automatiquement'),
      error: (err) => console.error('[overview] Erreur de mise √† jour', err)
    });
  }

  onEnterSpecialization(event: Event): void {
    const input = event.target as HTMLInputElement;
    const value = input.value.trim();
    if (value) {
      this.addSpecialization(value);
      input.value = '';
    }
  }

  filteredStudents(): Student[] {
    if (this.studentViewFilter === 'pending') return this.pendingRequests;
    if (this.studentViewFilter === 'students') return this.confirmedStudents;
    return this.confirmedStudents;
  }


  get totalPages(): number {
    return Math.ceil(this.filteredStudents().length / this.itemsPerPage);
  }

  totalPagesArray(): number[] {
    return Array(this.totalPages).fill(0);
  }

  get paginatedStudents(): Student[] {
    const start = (this.currentPage - 1) * this.itemsPerPage;
    return this.filteredStudents().slice(start, start + this.itemsPerPage);
  }

  goToPage(page: number) {
    this.currentPage = page;
  }

  refreshConfirmedStudents(): void {
    console.log('üî• refreshConfirmedStudents called!');
    const teacherId = this.authService.getCurrentUser()?.id;
    console.log('üî• teacherId:', teacherId);
    
    this.devLog('[OVERVIEW] refreshConfirmedStudents - current confirmedStudents before API call:', this.confirmedStudents);
    this.devLog('[OVERVIEW] refreshConfirmedStudents - current confirmedStudents count:', this.confirmedStudents.length);
    
    if (teacherId) {
      console.log('üî• Calling API...');
      this.devLog('[OVERVIEW] –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è teacherId:', teacherId);
      this.lessonService.getConfirmedStudentsForTeacher(teacherId).subscribe((students: unknown[]) => {
        this.devLog('[OVERVIEW] –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã –æ—Ç API:', students);
        this.devLog('[OVERVIEW] API students count:', students.length);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ API
        const apiStudents = students.map(s => {
          const student = s as {id?: string, [key: string]: unknown};
          return {...student, id: student.id || ''} as Student;
        });
        
        this.devLog('[OVERVIEW] Mapped API students:', apiStudents);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ localStorage –∏ API (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        const existingIds = new Set(this.confirmedStudents.map(s => s.id));
        this.devLog('[OVERVIEW] Existing student IDs from localStorage:', Array.from(existingIds));
        this.devLog('[OVERVIEW] All localStorage students with their IDs:', this.confirmedStudents.map(s => ({ id: s.id, name: s.name })));
        
        const newStudents = apiStudents.filter(s => !existingIds.has(s.id));
        this.devLog('[OVERVIEW] New students from API (not in localStorage):', newStudents);
        
        // –í–º–µ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è–µ–º localStorage —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ API —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        // –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ API (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é)
        const apiStudentIds = new Set(apiStudents.map(s => s.id));
        const localStorageOnlyStudents = this.confirmedStudents.filter(s => !apiStudentIds.has(s.id));
        
        this.devLog('[OVERVIEW] Students only in localStorage (not in API):', localStorageOnlyStudents);
        
        this.confirmedStudents = [...apiStudents, ...localStorageOnlyStudents];
        this.devLog('[OVERVIEW] Final confirmedStudents after merge:', this.confirmedStudents);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        this.saveStudentsToStorage();
        
        this.devLog('[OVERVIEW] confirmedStudents (refresh):', this.confirmedStudents);
        this.devLog('[OVERVIEW] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', this.confirmedStudents.length);
      });
    }
  }

  private refreshStudents(): void {
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId) return;
    
    this.devLog('[OVERVIEW] refreshStudents - current confirmedStudents before API call:', this.confirmedStudents);
    this.devLog('[OVERVIEW] refreshStudents - current confirmedStudents count:', this.confirmedStudents.length);
    
    this.lessonService.getAllConfirmedLessonsForTeacher(teacherId).subscribe((lessons: unknown[]) => {
      const now = new Date();
      if(!environment.production) console.log('[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è:', lessons);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ studentId
      const studentsMap: { [studentId: string]: Student } = {};
      lessons.forEach((lesson: unknown) => {
        const lessonData = lesson as { studentId: string; studentName: string; studentPhotoUrl?: string; scheduledAt: string };
        if (!studentsMap[lessonData.studentId]) {
          studentsMap[lessonData.studentId] = {
            id: lessonData.studentId,  // Add required id field
            studentId: lessonData.studentId,
            name: lessonData.studentName,
            photoUrl: lessonData.studentPhotoUrl, // –µ—Å–ª–∏ –µ—Å—Ç—å
            lessons: []
          };
        }
        studentsMap[lessonData.studentId].lessons?.push(lesson);
      });
      if(!environment.production) console.log('[DEBUG] –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É—Ä–æ–∫–∏:', studentsMap);
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ
      const apiStudents = Object.values(studentsMap).map((student: Student) => {
        const futureLessons = student.lessons
          ?.map((l: unknown) => new Date((l as { scheduledAt: string }).scheduledAt))
          .filter((date: Date) => date > now)
          .sort((a: Date, b: Date) => a.getTime() - b.getTime());
        if(!environment.production) console.log(`[DEBUG] –°—Ç—É–¥–µ–Ω—Ç ${student.name} (${student.studentId}): futureLessons =`, futureLessons);
        return {
          ...student,
          nextLessonDate: futureLessons && futureLessons.length > 0 ? futureLessons[0] : null
        };
      });
      
      this.devLog('[OVERVIEW] refreshStudents - API students:', apiStudents);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ API —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ (–∏–∑ localStorage)
      const existingIds = new Set(this.confirmedStudents.map(s => s.id));
      const newApiStudents = apiStudents.filter(s => !existingIds.has(s.id));
      
      this.devLog('[OVERVIEW] refreshStudents - new API students (not in localStorage):', newApiStudents);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ API, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
      this.confirmedStudents = [...this.confirmedStudents, ...newApiStudents];
      
      this.devLog('[OVERVIEW] refreshStudents - final confirmedStudents:', this.confirmedStudents);
      this.devLog('[OVERVIEW] refreshStudents - final confirmedStudents count:', this.confirmedStudents.length);
      
      if(!environment.production) console.log('[Overview] –û–±–Ω–æ–≤–ª—ë–Ω —Å–ø–∏—Å–æ–∫ confirmedStudents:', this.confirmedStudents);
    });
  }

  respondToRequest(request: BookingRequest, accepted: boolean): void {
    const metadata = request.data;
    if (!metadata?.lessonId) {
      console.error('‚ùå Donn√©es de requ√™te invalides (lessonId manquant)');
      return;
    }

    if (accepted) {
      this.lessonService.respondToBooking(metadata.lessonId, accepted).subscribe(() => {
        this.refreshConfirmedStudents();
        this.refreshStudents();
      });
    } else {
      this.selectedRequest = request;
      this.selectedReason = '';
      this.customReason = '';
      this.showRefuseDialog = true;
    }
  }

  parseMetadata(content: string): { lessonId: string } | null {
    try {
      const parsed = JSON.parse(content);
      if (parsed.lessonId) return parsed;
    } catch {
      return null;
    }
    return null;
  }

  confirmRefusal(): void {
    const reason = this.selectedReason === 'Autre' ? this.customReason.trim() : this.selectedReason;
    if (!reason || !this.selectedRequest) return;

    const metadata = this.parseMetadata(this.selectedRequest.message || '');
    if (!metadata) return;

    this.lessonService.respondToBooking(metadata.lessonId, false, reason).subscribe(() => {
      if(!environment.production) console.log('üì§ [OVERVIEW] Rejet envoy√© avec raison:', reason);
      this.pendingRequests = this.pendingRequests.filter(r => r.id !== this.selectedRequest!.id);
      this.selectedRequest = null;
      this.showRefuseDialog = false;
      this.refreshConfirmedStudents();
      this.refreshStudents();
      this.snackBar.open('–°—Ç—É–¥–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ', 'OK', { duration: 3000 });
    });
  }

  private getCalendarColor(status: string): { primary: string, secondary: string } {
    switch (status) {
      case 'confirmed': 
        return { primary: '#4caf50', secondary: '#e8f5e9' }; // –ó–µ–ª–µ–Ω—ã–π
      case 'rejected': 
        return { primary: '#f44336', secondary: '#ffebee' }; // –ö—Ä–∞—Å–Ω—ã–π
      case 'pending': 
        return { primary: '#ff9800', secondary: '#fff3e0' }; // –ñ–µ–ª—Ç—ã–π/–æ—Ä–∞–Ω–∂–µ–≤—ã–π
      case 'cancelled_by_student':
      case 'cancelled_by_student_no_refund':
        return { primary: '#9e9e9e', secondary: '#f5f5f5' }; // –°–µ—Ä—ã–π –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö
      case 'in_progress':
        return { primary: '#2196f3', secondary: '#e3f2fd' }; // –°–∏–Ω–∏–π
      case 'completed':
        return { primary: '#9c27b0', secondary: '#f3e5f5' }; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      default: 
        return { primary: '#9e9e9e', secondary: '#f5f5f5' }; // –°–µ—Ä—ã–π
    }
  }

  private getStatusIcon(status: string): string {
    switch (status) {
      case 'confirmed': return '‚úÖ';
      case 'rejected': return '‚ùå';
      case 'pending': return '‚è≥';
      case 'cancelled_by_student': return 'üö´';
      case 'cancelled_by_student_no_refund': return '‚õî';
      case 'in_progress': return 'üîÑ';
      case 'completed': return '‚úÖ';
      default: return '‚ùì';
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–º –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
  openInviteStudentDialog(): void {
    if(!environment.production) console.log('üìß –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É');
    
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤–º–µ—Å—Ç–æ email
    const inviteCode = this.generateInviteCode();
    const platformInviteLink = `${window.location.origin}/join-teacher/${this.authService.getCurrentUser()?.id}?code=${inviteCode}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const message = `–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤–∞—à–∏–º —É—Ä–æ–∫–∞–º:\n\n${platformInviteLink}\n\n–ò–ª–∏ –æ–Ω–∏ –º–æ–≥—É—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${inviteCode}`;
    
    if (navigator.clipboard) {
      navigator.clipboard.writeText(platformInviteLink).then(() => {
        this.snackBar.open('‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'OK', { duration: 3000 });
        alert(message);
      }).catch(() => {
        alert(message);
      });
    } else {
      alert(message);
    }
  }

  addStudentToClass(student: Student): void {
    if(!environment.production) console.log('üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å:', student);
    
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId) return;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    const savedClasses = localStorage.getItem(`teacher_classes_${teacherId}`);
    if (!savedClasses) {
      this.snackBar.open('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –≤–æ –≤–∫–ª–∞–¥–∫–µ "Classes"', 'OK', { duration: 3000 });
      return;
    }
    
    const classes = JSON.parse(savedClasses);
    const activeClass = classes.find((cls: TeacherClass) => cls.status === 'active');
    
    if (!activeClass) {
      this.snackBar.open('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –≤–æ –≤–∫–ª–∞–¥–∫–µ "Classes"', 'OK', { duration: 3000 });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç –≤ –∫–ª–∞—Å—Å–µ
    if (activeClass.students && activeClass.students.find((s: Student) => s.id === student.studentId || s.name === student.name)) {
      this.snackBar.open('–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –≤ –∫–ª–∞—Å—Å–µ', 'OK', { duration: 3000 });
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∫–ª–∞—Å—Å
    if (!activeClass.students) {
      activeClass.students = [];
    }
    
    activeClass.students.push({
      id: student.studentId || Date.now().toString(),
      name: student.name || student.metadata?.studentName || 'Unknown Student',
      addedAt: new Date().toISOString()
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    localStorage.setItem(`teacher_classes_${teacherId}`, JSON.stringify(classes));
    
    this.snackBar.open(`‚úÖ ${student.name || student.metadata?.studentName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å "${activeClass.name}"`, 'OK', { duration: 3000 });
  }

  isStudentInClass(student: Student): boolean {
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId) return false;
    
    const savedClasses = localStorage.getItem(`teacher_classes_${teacherId}`);
    if (!savedClasses) return false;
    
    const classes = JSON.parse(savedClasses);
    const activeClass = classes.find((cls: TeacherClass) => cls.status === 'active');
    
    if (!activeClass || !activeClass.students) return false;
    
    return activeClass.students.some((s: Student) => 
      s.id === student.studentId || 
      s.name === student.name || 
      s.name === student.metadata?.studentName
    );
  }

  sendStudentInvitation(): void {
    if(!environment.production) console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É:', this.inviteForm);
    
    if (!this.inviteForm.email || !this.inviteForm.level) {
      this.snackBar.open('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'OK', { duration: 3000 });
      return;
    }

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤–º–µ—Å—Ç–æ email
    const inviteCode = this.generateInviteCode();
    const platformInviteLink = `${window.location.origin}/join-teacher/${this.authService.getCurrentUser()?.id}?code=${inviteCode}&level=${this.inviteForm.level}`;
    
    const message = `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å —Å—Ç—É–¥–µ–Ω—Ç–æ–º:\n\n${platformInviteLink}\n\n–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${inviteCode}\n–£—Ä–æ–≤–µ–Ω—å: ${this.inviteForm.level}`;
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    this.inviteForm = {
      email: '',
      level: '',
      message: '',
      examGoal: ''
    };

    this.snackBar.open('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!', 'OK', { duration: 3000 });
    alert(message);
  }

  inviteStudentToClass(student: Student): void {
    if(!environment.production) console.log('üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∫–ª–∞—Å—Å:', student);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    const inviteCode = this.generateInviteCode();
    const studentInviteLink = `${window.location.origin}/join-teacher/${this.authService.getCurrentUser()?.id}?code=${inviteCode}&student=${student.metadata?.studentName || student.name}`;
    
    const message = `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è ${student.metadata?.studentName || student.name}!\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤–∞—à–∏–º —É—Ä–æ–∫–∞–º:\n\n${studentInviteLink}\n\n–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${inviteCode}\n\n–°—Ç—É–¥–µ–Ω—Ç —Å–º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –≤–∞—à–∏–º —É—á–µ–Ω–∏–∫–æ–º.`;
    
    if (navigator.clipboard) {
      navigator.clipboard.writeText(studentInviteLink).then(() => {
        this.snackBar.open('‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'OK', { duration: 3000 });
        alert(message);
      }).catch(() => {
        alert(message);
      });
    } else {
      alert(message);
    }
  }

  addStudentToSelectedClass(student: Student, classId: string): void {
    if(!environment.production) console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É –≤ –∫–ª–∞—Å—Å:', student, classId);
    
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId || !classId) return;
    
    const targetClass = this.teacherClasses.find(cls => cls.id === classId);
    if (!targetClass) {
      this.snackBar.open('–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'OK', { duration: 3000 });
      return;
    }
    
    const studentId = student.studentId || student.id;
    if (!studentId) {
      this.snackBar.open('ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'OK', { duration: 3000 });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const invitationKey = `${studentId}_${classId}`;
    if (this.sentInvitations[invitationKey]) {
      this.snackBar.open('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'OK', { duration: 3000 });
      return;
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const classData = {
      id: targetClass.id,
      name: targetClass.name,
      level: targetClass.level,
      description: targetClass['description'] || `Classe de pr√©paration √† l'examen DELF niveau ${targetClass.level}`,
      teacherName: this.authService.getCurrentUser()?.name || 'Professeur'
    };

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    this.lessonService.createClassInvitation(classId, teacherId, studentId, `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å ${targetClass.name}`).subscribe({
      next: (invitation) => {
        this.devLog('[OVERVIEW] –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', invitation);
        
        // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –æ—Ñ–ª–∞–π–Ω)
        this.wsService.inviteToClass(studentId, teacherId, classData);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
        this.sentInvitations[invitationKey] = {
          studentId: studentId,
          classId: classId,
          status: 'sent'
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem(`sent_invitations_${teacherId}`, JSON.stringify(this.sentInvitations));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
        this.updateStudentInvitationStatus(student, classId, 'sent');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–æ–≤–∞—è –ª–∏ —ç—Ç–æ –∑–∞–ø–∏—Å—å
        const message = invitation.invitedAt && invitation.invitedAt.getTime() === invitation.addedAt.getTime() 
          ? `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.name}` 
          : `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.name}`;
        
        this.snackBar.open(message, 'OK', { duration: 3000 });
      },
      error: (error) => {
        this.devLog('[OVERVIEW] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        this.snackBar.open('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 'OK', { duration: 3000 });
      }
    });
    
    this.snackBar.open(`üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${student.name || student.metadata?.studentName} –≤ –∫–ª–∞—Å—Å "${targetClass.name}"`, 'OK', { duration: 3000 });
  }

  getStudentCurrentClass(student: Student): string | null {
    const studentName = student.name || student.metadata?.studentName;
    
    for (const classe of this.teacherClasses) {
      if (classe.students && classe.students.find((s: Student) => 
        s.id === student.studentId || s.name === studentName)) {
        return classe.id;
      }
    }
    return null;
  }

  getStudentCurrentClassName(student: Student): string | null {
    const classId = this.getStudentCurrentClass(student);
    if (!classId) return null;
    
    const classe = this.teacherClasses.find(cls => cls.id === classId);
    return classe ? classe.name : null;
  }

  private generateInviteCode(): string {
    return Math.random().toString(36).substring(2, 10).toUpperCase();
  }

  // Helper –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º teacher –≤ —à–∞–±–ª–æ–Ω–µ
  getTeacherPhotoUrl(): string {
    return (this.teacher as {photoUrl?: string})?.photoUrl || '';
  }

  getTeacherName(): string {
    return (this.teacher as {name?: string})?.name || '';
  }

  getTeacherSurname(): string {
    return (this.teacher as {surname?: string})?.surname || '';
  }

  getTeacherEmail(): string {
    return (this.teacher as {email?: string})?.email || '';
  }

  getTeacherBio(): string {
    return (this.teacher as {bio?: string})?.bio || '';
  }

  getTeacherSpecializations(): string[] {
    return (this.teacher as {specializations?: string[]})?.specializations || [];
  }

  getTeacherExperienceYears(): number {
    return (this.teacher as {experienceYears?: number})?.experienceYears || 0;
  }

  getTeacherPrice(): number {
    return (this.teacher as {price?: number})?.price || 0;
  }

  getTeacherRating(): number {
    return (this.teacher as {rating?: number})?.rating || 0;
  }

  getTeacherCertificates(): string[] {
    return (this.teacher as {certificates?: string[]})?.certificates || [];
  }

  getTeacherReviews(): any[] {
    return (this.teacherReviews as any[]) || [];
  }

  // Helper methods for profile safe access
  getProfilePhotoUrl(): string | null {
    return this.profile?.photo_url || null;
  }

  getProfileFullName(): string {
    return this.profile?.full_name || '';
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ email
   */
  addStudentByEmail(): void {
    console.log('üî•üî•üî• addStudentByEmail method called!');
    console.log('üî•üî•üî• Form valid:', this.addStudentForm.valid);
    console.log('üî•üî•üî• Form value:', this.addStudentForm.value);
    
    if (this.addStudentForm.invalid) {
      console.log('üî•üî•üî• Form is invalid, returning');
      this.devLog('[OVERVIEW] Form is invalid');
      return;
    }

    const email = this.addStudentForm.get('email')?.value;
    const teacherId = this.authService.getCurrentUser()?.id;

    if (!teacherId) {
      this.devLog('[OVERVIEW] No teacher ID found');
      this.snackBar.open('Erreur: Impossible de r√©cup√©rer l\'ID du professeur', 'Fermer', { duration: 3000 });
      return;
    }

    this.isAddingStudent = true;
    this.devLog('[OVERVIEW] Adding student by email:', email, 'for teacher:', teacherId);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç
    this.lessonService.getStudentByEmail(email).subscribe({
      next: (response) => {
        this.devLog('[OVERVIEW] Student search response:', response);
        
        if (response && response.success && response.student) {
          // –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
          this.addStudentToList(response.student, email);
        } else {
          this.isAddingStudent = false;
          const errorMessage = response?.message || '–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω';
          this.snackBar.open(errorMessage, 'Fermer', { duration: 3000 });
        }
      },
      error: (error) => {
        this.devLog('[OVERVIEW] Error finding student:', error);
        this.isAddingStudent = false;
        this.snackBar.open('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞', 'Fermer', { duration: 3000 });
      }
    });
  }

  private devLog(message: string, ...args: any[]): void {
    // –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(message, ...args);
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
   */
  private addStudentToList(studentData: any, email: string): void {
    this.devLog('[OVERVIEW] Adding student to list:', studentData);
    this.devLog('[OVERVIEW] Current confirmedStudents before adding:', this.confirmedStudents);
    this.devLog('[OVERVIEW] Current confirmedStudents count before adding:', this.confirmedStudents.length);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    const newStudent: Student = {
      id: studentData.id,
      studentId: studentData.id,
      name: studentData.name || email,
      email: email,
      photoUrl: '', // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
      isStudent: true,
      nextLessonDate: null,
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      metadata: {
        studentName: studentData.name || email
      }
    };

    this.devLog('[OVERVIEW] New student object created:', newStudent);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    this.confirmedStudents.push(newStudent);
    
    this.devLog('[OVERVIEW] Student added to array. New confirmedStudents:', this.confirmedStudents);
    this.devLog('[OVERVIEW] New confirmedStudents count:', this.confirmedStudents.length);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveStudentsToStorage();
    
    this.isAddingStudent = false;
    this.addStudentForm.reset();
    
    this.snackBar.open(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${studentData.name || email} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫`, 'Fermer', { duration: 3000 });
    
    this.devLog('[OVERVIEW] Student added to confirmedStudents:', this.confirmedStudents);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ localStorage
   */
  private saveStudentsToStorage(): void {
    const teacherId = this.authService.getCurrentUser()?.id;
    this.devLog('[OVERVIEW] saveStudentsToStorage called with teacherId:', teacherId);
    this.devLog('[OVERVIEW] saveStudentsToStorage - confirmedStudents to save:', this.confirmedStudents);
    this.devLog('[OVERVIEW] saveStudentsToStorage - confirmedStudents count:', this.confirmedStudents.length);
    
    if (teacherId) {
      const dataToSave = JSON.stringify(this.confirmedStudents);
      this.devLog('[OVERVIEW] Data to save to localStorage:', dataToSave);
      
      localStorage.setItem(`teacher_students_${teacherId}`, dataToSave);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const savedData = localStorage.getItem(`teacher_students_${teacherId}`);
      this.devLog('[OVERVIEW] Verification - data read back from localStorage:', savedData);
      
      this.devLog('[OVERVIEW] Students saved to localStorage:', this.confirmedStudents);
    } else {
      this.devLog('[OVERVIEW] No teacherId found, cannot save to localStorage');
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ localStorage
   */
  private loadStudentsFromStorage(): void {
    const teacherId = this.authService.getCurrentUser()?.id;
    this.devLog('[OVERVIEW] loadStudentsFromStorage called with teacherId:', teacherId);
    
    if (teacherId) {
      const stored = localStorage.getItem(`teacher_students_${teacherId}`);
      this.devLog('[OVERVIEW] Raw localStorage data:', stored);
      
      if (stored) {
        try {
          this.confirmedStudents = JSON.parse(stored);
          this.devLog('[OVERVIEW] Students loaded from localStorage:', this.confirmedStudents);
          this.devLog('[OVERVIEW] Number of students from localStorage:', this.confirmedStudents.length);
        } catch (error) {
          this.devLog('[OVERVIEW] Error parsing localStorage data:', error);
          this.confirmedStudents = [];
        }
      } else {
        this.devLog('[OVERVIEW] No data in localStorage for teacherId:', teacherId);
        this.confirmedStudents = [];
      }
    } else {
      this.devLog('[OVERVIEW] No teacherId found');
      this.confirmedStudents = [];
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  private updateStudentInvitationStatus(student: Student, classId: string, status: 'sent' | 'accepted' | 'declined'): void {
    const studentId = student.studentId || student.id;
    if (!studentId) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±—ä–µ–∫—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    if (!student.metadata) {
      student.metadata = {};
    }
    student.metadata.invitationStatus = status;
    student.metadata.invitationClassId = classId;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    this.saveStudentsToStorage();
    
    this.devLog('[OVERVIEW] Updated student invitation status:', student.name, status);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç—É
  private sendClassInvitationToStudent(studentId: string, email: string, teacherId: string): void {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞)
    const classData = {
      id: 'general_invitation',
      name: 'Classe DELF/DALF',
      level: '√Ä d√©terminer',
      description: 'Invitation √† rejoindre une classe de pr√©paration DELF/DALF',
      teacherName: this.authService.getCurrentUser()?.name || 'Professeur'
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    this.wsService.inviteToClass(studentId, teacherId, classData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
    const invitationKey = `${studentId}_general`;
    this.sentInvitations[invitationKey] = {
      studentId: studentId,
      classId: 'general_invitation',
      status: 'sent'
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem(`sent_invitations_${teacherId}`, JSON.stringify(this.sentInvitations));
    
    this.snackBar.open(`üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`, 'Fermer', { duration: 3000 });
    this.addStudentForm.reset();
  }

  testClick(): void {
    console.log('üî•üî•üî•üî• BUTTON CLICKED!');
    console.log('üî•üî•üî•üî• Form valid:', this.addStudentForm.valid);
    console.log('üî•üî•üî•üî• Form value:', this.addStudentForm.value);
    this.addStudentByEmail();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  getStudentInvitationStatus(student: Student, classId?: string): 'none' | 'sent' | 'accepted' | 'declined' {
    const studentId = student.studentId || student.id;
    if (!studentId) return 'none';
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
    if (student.metadata?.invitationStatus) {
      return student.metadata.invitationStatus;
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–ø–æ email)
    const generalInvitationKey = `${studentId}_general`;
    const generalInvitation = this.sentInvitations[generalInvitationKey];
    if (generalInvitation) {
      return generalInvitation.status;
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∞—Å—Å
    if (classId) {
      const invitationKey = `${studentId}_${classId}`;
      const invitation = this.sentInvitations[invitationKey];
      return invitation ? invitation.status : 'none';
    }
    
    return 'none';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  getInvitationStatusText(student: Student, classId?: string): string {
    const status = this.getStudentInvitationStatus(student, classId);
    
    switch (status) {
      case 'sent': return 'üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'accepted': return '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ';
      case 'declined': return '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
      default: return '';
    }
  }

}
