import { Component, ElementRef, QueryList, ViewChildren } from '@angular/core';
import { Router } from '@angular/router';

interface WordCard {
  id?: number;
  word: string;
  translation: string;
  galaxy: string;
  subtopic: string;
  type?: 'word' | 'expression';
  createdAt?: number;
}


@Component({
  selector: 'app-words',
  templateUrl: './words.component.html',
  styleUrls: ['./words.component.css']
})
export class WordsComponent {
  @ViewChildren('subtopicElement') subtopicElements!: QueryList<ElementRef>;
  @ViewChildren('galaxyElement') galaxyElements!: QueryList<ElementRef>;
  @ViewChildren('galaxyWrapper') galaxyWrappers!: QueryList<ElementRef>;


  searchQuery: string = '';
  searchResults: any[] = [];
  zoomStyle = {};
  isZoomingToPlanet = false;
  isZoomingToGalaxy = false;
  focusedGalaxyIndex: number | null = null;
  showGlobalAddWordOrExpressionModal: boolean = false;
  newGlobalWord: string = '';
  newGlobalTranslation: string = '';
  newGlobalType: 'word' | 'expression' = 'word';
  selectedGalaxy: string = '';
  selectedSubtopic: string = '';
  availableSubtopics: string[] = [];
  addSuccessMessage: string = '';

  galaxies = [
    {
      name: '–ö—Ä—É–≥–æ–∑–æ—Ä',
      sanitizedName: '–ö—Ä—É–≥–æ–∑–æ—Ä'.replace(/\s+/g, '-'), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è id
      subtopics: this.generateSubtopics(6, ['–ò—Å—Ç–æ—Ä–∏—è', '–ù–∞—É–∫–∞', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ö—É–ª—å—Ç—É—Ä–∞'])
    },
    {
      name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏',
      sanitizedName: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ-—Å–≤—è–∑–∏'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(5, ['–°–µ–º—å—è', '–î—Ä—É–∑—å—è', '–†–∞–±–æ—Ç–∞', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è'])
    },
    {
      name: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞',
      sanitizedName: '–†–∞–±–æ—Ç–∞-–∏-–∫–∞—Ä—å–µ—Ä–∞'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(4, ['–í–∞–∫–∞–Ω—Å–∏–∏', '–ù–∞–≤—ã–∫–∏', '–†–µ–∑—é–º–µ', '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'])
    },
    {
      name: '–ü—Ä–µ–¥–º–µ—Ç—ã',
      sanitizedName: '–ü—Ä–µ–¥–º–µ—Ç—ã'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(6, ['–ú–µ–±–µ–ª—å', '–¢–µ—Ö–Ω–∏–∫–∞', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–û–¥–µ–∂–¥–∞', '–£–∫—Ä–∞—à–µ–Ω–∏—è', '–ò–≥—Ä—É—à–∫–∏'])
    },
    {
      name: '–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
      sanitizedName: '–ú–µ–¥–∏—Ü–∏–Ω–∞-–∏-–∑–¥–æ—Ä–æ–≤—å–µ'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(5, ['–ë–æ–ª–µ–∑–Ω–∏', '–õ–µ—á–µ–Ω–∏–µ', '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞', '–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', '–ê–ø—Ç–µ–∫–∏'])
    },
    {
      name: '–°–∏—Ç—É–∞—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
      sanitizedName: '–°–∏—Ç—É–∞—Ü–∏–∏-–∏-—Å–æ–±—ã—Ç–∏—è'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(4, ['–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã', '–°–ø–æ—Ä—Ç', '–ü–æ–ª–∏—Ç–∏–∫–∞'])
    }
  ];
  zoomedGalaxy: any = null;

  constructor(private router: Router) { }

  hoverGalaxy(galaxy: any) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
  }

  hoverSubtopic(subtopic: any) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  }

  zoomIntoGalaxy(galaxy: any) {
    this.zoomedGalaxy = galaxy;
    this.isZoomingToPlanet = false; // <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    this.zoomStyle = {}; // —Å–±—Ä–æ—Å
  }


  resetZoom() {
    this.zoomedGalaxy = null;
    this.zoomStyle = {};
    this.focusedGalaxyIndex = null;

    const galaxyWrappers = document.querySelectorAll('.galaxy-wrapper');
    galaxyWrappers.forEach(el => el.classList.remove('focused'));
  }



  generateSubtopics(count: number, names: string[]) {
    let subtopics = [];
    for (let i = 0; i < count; i++) {
      let angle = (i / count) * Math.PI * 2;
      let x = 100 + Math.cos(angle) * 90; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å RX —ç–ª–ª–∏–ø—Å–∞
      let y = 100 + Math.sin(angle) * 60; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å RY —ç–ª–ª–∏–ø—Å–∞

      subtopics.push({
        x,
        y,
        name: names[i]
      });
    }
    return subtopics;
  }



  onSubtopicClick(galaxyName: string, subtopicName: string) {
    this.router.navigate(['/student/wordsTeaching', galaxyName, subtopicName]); // <-- –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–µ–∫
  }

  ////////////////////////////////–ø–æ–∏—Å–∫ —Å–ª–æ–≤

  searchWord() {
    if (!this.searchQuery.trim()) {
      this.searchResults = [];
      return;
    }

    const raw = localStorage.getItem('vocabulary_cards');
    console.log('üì¶ –ò–∑ localStorage:', raw);

    const allWords: WordCard[] = JSON.parse(raw || '[]');
    console.log('üìÑ –í—Å–µ–≥–æ —Å–ª–æ–≤:', allWords.length);

    this.searchResults = allWords
      .filter(card =>
        card.word.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
        card.translation.toLowerCase().includes(this.searchQuery.toLowerCase())
      )
      .map(card => ({
        ...card,
        display: `${card.word} ‚Üí ${card.translation}`,
        fullPath: `${card.subtopic} ‚Üí ${card.galaxy}`
      }));

    console.log('üîé –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', this.searchResults.length);
  }

  navigateToWord(result: any) {
    const galaxy = this.galaxies.find(g => g.name === result.galaxy);
    if (!galaxy) return;

    const galaxyIndex = this.galaxies.indexOf(galaxy);
    const galaxyElement = this.galaxyWrappers.get(galaxyIndex)?.nativeElement;
    if (!galaxyElement) return;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–∞–ª–∞–∫—Ç–∏–∫–∏
    const galaxyRect = galaxyElement.getBoundingClientRect();
    const centerX = galaxyRect.left + galaxyRect.width / 2;
    const centerY = galaxyRect.top + galaxyRect.height / 2;

    const viewportCenterX = window.innerWidth / 2;
    const viewportCenterY = window.innerHeight / 2;

    const offsetX = viewportCenterX - centerX;
    const offsetY = viewportCenterY - centerY;

    this.isZoomingToGalaxy = true;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º transform –∫ .galaxies —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –æ–±—ë—Ä—Ç–∫—É
    const galaxiesContainer = document.querySelector('.galaxies') as HTMLElement;
    galaxiesContainer.style.transition = 'transform 1.8s ease';
    galaxiesContainer.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(2)`;

    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º zoomedGalaxy
    setTimeout(() => {
      this.isZoomingToGalaxy = false;
      galaxiesContainer.style.transform = ''; // —Å–±—Ä–æ—Å
      this.zoomedGalaxy = galaxy;
      this.isZoomingToPlanet = true;

      setTimeout(() => {
        const subtopic = galaxy.subtopics.find(s => s.name === result.subtopic);
        if (!subtopic) return;

        const targetX = subtopic.x * 3;
        const targetY = subtopic.y * 3;
        const offsetX = 300 - targetX;
        const offsetY = 300 - targetY;

        this.zoomStyle = {
          transition: 'transform 2s ease',
          transform: `translate(${offsetX}px, ${offsetY}px) scale(2)`
        };

        setTimeout(() => {
          this.isZoomingToPlanet = false;
          this.onSubtopicClick(galaxy.name, result.subtopic);
        }, 2500);
      }, 200);
    }, 2000);
  }

  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
  openGlobalAddWordOrExpressionModal(): void {
    this.showGlobalAddWordOrExpressionModal = true;
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.newGlobalType = 'word';
    this.selectedGalaxy = '';
    this.addSuccessMessage = '';
  }

  closeGlobalAddWordOrExpressionModal(): void {
    this.showGlobalAddWordOrExpressionModal = false;
  }

  saveGlobalWordOrExpression(): void {
    if (!this.newGlobalWord.trim() || !this.selectedGalaxy || !this.selectedSubtopic) return;

    const newCard: WordCard = {
      id: Date.now(),
      word: this.newGlobalWord.trim(),
      translation: this.newGlobalTranslation.trim() || '...',
      galaxy: this.selectedGalaxy,
      subtopic: this.selectedSubtopic,
      type: this.newGlobalType,
      createdAt: Date.now()
    };

    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    allCards.unshift(newCard);
    localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));

    this.addSuccessMessage = '‚úÖ –°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';

    // –°–±—Ä–æ—Å –ø–æ–ª–µ–π
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.selectedGalaxy = '';
    this.selectedSubtopic = '';
    this.availableSubtopics = [];

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
    setTimeout(() => {
      this.addSuccessMessage = '';
      this.closeGlobalAddWordOrExpressionModal();
    }, 1000);
  }


  toggleGlobalType(): void {
    this.newGlobalType = this.newGlobalType === 'word' ? 'expression' : 'word';
  }

  onGalaxySelected(): void {
    const galaxy = this.galaxies.find(g => g.name === this.selectedGalaxy);
    if (galaxy) {
      this.availableSubtopics = galaxy.subtopics.map((s: any) => s.name);
      this.selectedSubtopic = ''; // —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
    } else {
      this.availableSubtopics = [];
    }
  }

}
