import { Component, ElementRef, QueryList, ViewChildren, AfterViewInit, OnDestroy} from '@angular/core';
import { VocabularyGptService } from '../../services/vocabulary-gpt.service';
import { Router } from '@angular/router';
import { TranslationService } from '../../services/translation.service';
import { ExpressionGrammar, GrammarData } from '../vocabulary/models/grammar-data.model';
import textFit from 'textfit';
import { WordEntry } from './models/words.model';
import { LexiconService } from '../../services/lexicon.service';
import { Subject, debounceTime, distinctUntilChanged, takeUntil } from 'rxjs';
import { AnalyticsService } from '../../services/analytics.service';
import { BackToHomeButtonComponent } from '../../shared/components/back-to-home-button/back-to-home-button.component';

interface WordCard {
  id?: number;
  word: string;
  translation: string;
  galaxy: string;
  subtopic: string;
  type?: 'word' | 'expression';
  createdAt?: number;
  grammar?: GrammarData
}

interface Subtopic {
  x: number;
  y: number;
  name: string;
  wordCount?: number;
  expressionCount?: number;
}



@Component({
  selector: 'app-words',
  templateUrl: './words.component.html',
  styleUrls: ['./words.component.css']
})
export class WordsComponent implements OnDestroy {
  @ViewChildren('subtopicElement') subtopicElements!: QueryList<ElementRef>;
  @ViewChildren('galaxyElement') galaxyElements!: QueryList<ElementRef>;
  @ViewChildren('galaxyWrapper') galaxyWrappers!: QueryList<ElementRef>;
  @ViewChildren('labelRef') labelElements!: QueryList<ElementRef>;
  @ViewChildren('grammarFieldsRef') grammarFieldsComponents!: QueryList<any>;

  // RxJS –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
  private destroy$ = new Subject<void>();
  private searchSubject$ = new Subject<string>();

  searchQuery: string = '';
  searchResults: any[] = [];
  zoomStyle = {};
  isZoomingToPlanet = false;
  isZoomingToGalaxy = false;
  focusedGalaxyIndex: number | null = null;
  showGlobalAddWordOrExpressionModal: boolean = false;
  newGlobalWord: string = '';
  newGlobalTranslation: string = '';
  newGlobalType: 'word' | 'expression' = 'word';
  selectedGalaxy: string = '';
  selectedSubtopic: string = '';
  availableSubtopics: string[] = [];
  addSuccessMessage: string = '';
  isFromGalaxyShortcut: boolean = false;
  galaxies = [
    {
      name: 'Galaxie √ârudition',
      sanitizedName: 'Galaxie-√ârudition'.replace(/\s+/g, '-'), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è id
      subtopics: this.generateSubtopics(6, ['Histoire', 'Science', 'Art', 'Philosophie', 'Technologies', 'Culture'])
    },
    {
      name: 'Galaxie Relations',
      sanitizedName: 'Galaxie-Relations'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(5, ['Famille', 'Amis', 'Travail', 'R√©seaux sociaux', 'Communication'])
    },
    {
      name: 'Galaxie Carri√®re',
      sanitizedName: 'Galaxie-Carri√®re'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(4, ['Emplois', 'Comp√©tences', 'CV', 'Entretien'])
    },
    {
      name: 'Galaxie Objets',
      sanitizedName: 'Galaxie-Objets'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(6, ['Meubles', 'Technologie', 'Outils', 'V√™tements', 'Bijoux', 'Jouets'])
    },
    {
      name: 'Galaxie Sant√©',
      sanitizedName: 'Galaxie-Sant√©'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(5, ['Maladies', 'Traitement', 'Pr√©vention', 'Mode de vie sain', 'Pharmacies'])
    },
    {
      name: 'Galaxie √âv√©nements',
      sanitizedName: 'Galaxie-√âv√©nements'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(4, ['F√™tes', 'Catastrophes', 'Sport', 'Politique'])
    }
  ];
  zoomedGalaxy: any = null;
  sourceLang: 'ru' | 'fr' | 'en' = 'ru';
  targetLang: 'ru' | 'fr' | 'en' = 'fr';
  grammarData: GrammarData | null = null;

  zoomedZoneLibre = false;
  showZoneLibre: boolean = false;
  orphanWords: WordCard[] = [];

  pendingSubtopic?: boolean;
  pendingClassificationWords: WordCard[] = [];
  pendingSubtopicWords: WordCard[] = [];
  selectedGalaxyForSubtopic: string | null = null;
  postponedWordsByGalaxy: { [galaxyName: string]: WordCard[] } = {};

  activePendingWord?: WordCard;
  collapsedPostponedList: { [galaxy: string]: boolean } = {};

  //–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
  entries: WordEntry[] = [{ word: '', translation: '', grammar: undefined }];
  maxEntries = 10;
  hasStartedTypingFirstEntry: boolean = false;
  isMultiEntryMode: boolean = false;

  confirmationMessage: string = '';
  showPostAddModal: boolean = false;
  targetGalaxyForPostponed?: any; // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, –≤ –∫–∞–∫—É—é –≥–∞–ª–∞–∫—Ç–∏–∫—É –ø–æ—Ç–æ–º –∑—É–º–∏—Ä–æ–≤–∞—Ç—å

  private loadPostponedWords() {
    const raw = localStorage.getItem('postponed_words');
    if (raw) {
      this.postponedWordsByGalaxy = JSON.parse(raw);
    }
  }

  private savePostponedWords() {
    localStorage.setItem('postponed_words', JSON.stringify(this.postponedWordsByGalaxy));
  }


  ngOnInit(): void {
    this.loadPostponedWords();
    this.initializeSearch();
  }

  private initializeSearch(): void {
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å debounceTime –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è INP
    this.searchSubject$.pipe(
      debounceTime(300), // –ñ–¥–µ–º 300ms –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–≤–æ–¥–∞
      distinctUntilChanged(), // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
      takeUntil(this.destroy$) // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    ).subscribe(searchTerm => {
      this.performSearch(searchTerm);
    });
  }

  ngAfterViewInit(): void {
    this.labelElements.changes.subscribe(() => {
      this.fitSubtopicLabels();
    });
    this.fitSubtopicLabels(); // initial
  }

  ngOnDestroy(): void {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leaks
    this.destroy$.next();
    this.destroy$.complete();
  }

  constructor(
    private router: Router, 
    private gptService: VocabularyGptService, 
    private translationService: TranslationService, 
    private lexiconService: LexiconService,
    private analyticsService: AnalyticsService
  ) { }

  hoverGalaxy(galaxy: any) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
  }

  hoverSubtopic(subtopic: any) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  }

  zoomIntoGalaxy(galaxy: any) {
    this.zoomedGalaxy = galaxy;
    this.isZoomingToPlanet = false; // <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    this.zoomStyle = {}; // —Å–±—Ä–æ—Å
  }

  resetZoom() {
    this.zoomedGalaxy = null;
    this.zoomStyle = {};
    this.focusedGalaxyIndex = null;

    const galaxyWrappers = document.querySelectorAll('.galaxy-wrapper');
    galaxyWrappers.forEach(el => el.classList.remove('focused'));
  }

  generateSubtopics(count: number, names: string[]) {
    let subtopics: Subtopic[] = [];
    for (let i = 0; i < count; i++) {
      let angle = (i / count) * Math.PI * 2;
      let x = 100 + Math.cos(angle) * 90; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å RX —ç–ª–ª–∏–ø—Å–∞
      let y = 100 + Math.sin(angle) * 60; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å RY —ç–ª–ª–∏–ø—Å–∞

      subtopics.push({
        x,
        y,
        name: names[i]
      });
    }
    return subtopics;
  }

  onSubtopicClick(galaxyName: string, subtopicName: string) {
    this.router.navigate(['/student/wordsTeaching', galaxyName, subtopicName]); // <-- –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–µ–∫
  }

  ////////////////////////////////–ø–æ–∏—Å–∫ —Å–ª–æ–≤

  searchWord() {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Subject –¥–ª—è debounced –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.searchSubject$.next(this.searchQuery);
  }

  private performSearch(searchTerm: string): void {
    if (!searchTerm.trim()) {
      this.searchResults = [];
      return;
    }

    const raw = localStorage.getItem('vocabulary_cards');
    console.log('üì¶ –ò–∑ localStorage:', raw);

    const allWords: WordCard[] = JSON.parse(raw || '[]');
    console.log('üìÑ –í—Å–µ–≥–æ —Å–ª–æ–≤:', allWords.length);

    this.searchResults = allWords
      .filter(card =>
        card.word.toLowerCase().includes(searchTerm.toLowerCase()) ||
        card.translation.toLowerCase().includes(searchTerm.toLowerCase())
      )
      .map(card => ({
        ...card,
        display: `${card.word} ‚Üí ${card.translation}`,
        fullPath: `${card.subtopic} ‚Üí ${card.galaxy}`
      }));

    console.log('üîé –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', this.searchResults.length);
    
    // üîë GA4: Track search event
    this.analyticsService.trackSearch(searchTerm, this.searchResults.length, 'words');
  }

  navigateToWord(result: any) {
    const galaxy = this.galaxies.find(g => g.name === result.galaxy);
    if (!galaxy) return;

    const galaxyIndex = this.galaxies.indexOf(galaxy);
    const galaxyElement = this.galaxyWrappers.get(galaxyIndex)?.nativeElement;
    if (!galaxyElement) return;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–∞–ª–∞–∫—Ç–∏–∫–∏
    const galaxyRect = galaxyElement.getBoundingClientRect();
    const centerX = galaxyRect.left + galaxyRect.width / 2;
    const centerY = galaxyRect.top + galaxyRect.height / 2;

    const viewportCenterX = window.innerWidth / 2;
    const viewportCenterY = window.innerHeight / 2;

    const offsetX = viewportCenterX - centerX;
    const offsetY = viewportCenterY - centerY;

    this.isZoomingToGalaxy = true;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º transform –∫ .galaxies —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –æ–±—ë—Ä—Ç–∫—É
    const galaxiesContainer = document.querySelector('.galaxies') as HTMLElement;
    galaxiesContainer.style.transition = 'transform 1.8s ease';
    galaxiesContainer.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(2)`;

    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º zoomedGalaxy
    setTimeout(() => {
      this.isZoomingToGalaxy = false;
      galaxiesContainer.style.transform = ''; // —Å–±—Ä–æ—Å
      this.zoomedGalaxy = galaxy;
      this.isZoomingToPlanet = true;

      setTimeout(() => {
        const subtopic = galaxy.subtopics.find(s => s.name === result.subtopic);
        if (!subtopic) return;

        const targetX = subtopic.x * 3;
        const targetY = subtopic.y * 3;
        const offsetX = 300 - targetX;
        const offsetY = 300 - targetY;

        this.zoomStyle = {
          transition: 'transform 2s ease',
          transform: `translate(${offsetX}px, ${offsetY}px) scale(2)`
        };

        setTimeout(() => {
          this.isZoomingToPlanet = false;
          this.onSubtopicClick(galaxy.name, result.subtopic);
        }, 2500);
      }, 200);
    }, 2000);
  }

  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
  openGlobalAddWordOrExpressionModal(): void {
    this.isFromGalaxyShortcut = false; // –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    this.showGlobalAddWordOrExpressionModal = true;
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.newGlobalType = 'word';
    this.selectedGalaxy = '';
    this.selectedSubtopic = '';
    this.availableSubtopics = [];
    this.addSuccessMessage = '';
    this.entries = [{ word: '', translation: '', grammar: undefined }];
    this.isMultiEntryMode = false;
    this.hasStartedTypingFirstEntry = false;
  }

  openAddWordOrExpressionForGalaxy(galaxyName: string): void {
    this.isFromGalaxyShortcut = true;
    this.selectedGalaxy = galaxyName;
    this.availableSubtopics = this.galaxies.find(g => g.name === galaxyName)?.subtopics.map(s => s.name) || [];
    this.selectedSubtopic = '';
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.newGlobalType = 'word';
    this.showGlobalAddWordOrExpressionModal = true;
  }

  onGalaxyAddButtonClick(event: MouseEvent, galaxyName: string): void {
    event.stopPropagation();
    this.openAddWordOrExpressionForGalaxy(galaxyName);
  }


  closeGlobalAddWordOrExpressionModal(): void {
    this.showGlobalAddWordOrExpressionModal = false;
  }

  saveGlobalWordOrExpression(): void {
    this.grammarFieldsComponents.forEach(comp => {
      comp.validate();
    });

    const firstEntry = this.entries[0];

    if (!firstEntry.word.trim()) {
      console.warn('üö´ –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ!');
      return;
    }

    console.log('üí° –°–ª–æ–≤–æ:', firstEntry.word);

    const previousSelectedGalaxy = this.selectedGalaxy; // üõë –°–û–•–†–ê–ù–Ø–ï–ú –ü–ï–†–ï–î –û–ë–ù–£–õ–ï–ù–ò–ï–ú
    const previousSelectedSubtopic = this.selectedSubtopic; // üõë –ò –ø–æ–¥—Ç–µ–º—É —Ç–æ–∂–µ

    const newCard: WordCard = {
      id: Date.now(),
      word: firstEntry.word.trim(),
      translation: firstEntry.translation.trim() || '...',
      galaxy: this.selectedGalaxy || '',
      subtopic: this.selectedSubtopic || '',
      type: (this.newGlobalType ?? 'word') as 'word' | 'expression',
      createdAt: Date.now(),
      grammar: firstEntry.grammar ?? undefined,
    };

    // üõ† –°–æ–∑–¥–∞—ë–º —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥
    const translations = firstEntry.translation.trim()
      ? [{
        id: 0, // –≤—Ä–µ–º–µ–Ω–Ω–æ
        lexiconId: 0, // –≤—Ä–µ–º–µ–Ω–Ω–æ
        source: firstEntry.word.trim(),
        target: firstEntry.translation.trim(),
        sourceLang: this.sourceLang,
        targetLang: this.targetLang,
        meaning: '',
        example: null,
      }]
      : [];


    // üëâ –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend
    try {
      this.lexiconService.addWord({
        word: newCard.word,
        translations,
        galaxy: newCard.galaxy,
        subtopic: newCard.subtopic,
        type: newCard.type ?? 'word',
        grammar: firstEntry.grammar
      }).subscribe({
        next: (res) => {
          console.log('‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ backend:', res);
        },
        error: (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞:', err);
        }
      });
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', e);
    }

    // ‚õë –ê –ø–æ–∫–∞ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏–º –∏ –≤ localStorage –¥–ª—è UI
    this.saveLocally(newCard);
    this.getOrphanWords();

    // –°–±—Ä–æ—Å –ø–æ–ª–µ–π
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.selectedGalaxy = '';
    this.selectedSubtopic = '';
    this.availableSubtopics = [];
    this.grammarData = null;

    if ((this.isFromGalaxyShortcut || !previousSelectedGalaxy) && !previousSelectedSubtopic) {
      const galaxy = this.galaxies.find(g => g.name === previousSelectedGalaxy);
      if (galaxy) {
        // –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–û–ñ–ï–ù–ù–û–ï –°–õ–û–í–û
        if (!this.postponedWordsByGalaxy[previousSelectedGalaxy]) {
          this.postponedWordsByGalaxy[previousSelectedGalaxy] = [];
        }
        this.postponedWordsByGalaxy[previousSelectedGalaxy].push(newCard);
        this.savePostponedWords();

        this.targetGalaxyForPostponed = galaxy;
        this.confirmationMessage = `‚úÖ –°–ª–æ–≤–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –Ω–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≥–∞–ª–∞–∫—Ç–∏–∫–∏ "${galaxy.name}", –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –Ω—É–∂–Ω—É—é –ø–æ–¥—Ç–µ–º—É –∫–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ.`;

        this.closeGlobalAddWordOrExpressionModal();

        setTimeout(() => {
          this.showPostAddModal = true;
        }, 200);
      }
    } else if (this.isFromGalaxyShortcut && previousSelectedSubtopic) {
      const card = {
        galaxy: previousSelectedGalaxy,
        subtopic: previousSelectedSubtopic,
        word: firstEntry.word.trim(),
      };
      this.showNavigateToSubtopicModal(card as WordCard);
      this.closeGlobalAddWordOrExpressionModal();
    } else {
      this.addSuccessMessage = '‚úÖ –°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
      setTimeout(() => {
        this.addSuccessMessage = '';
        this.closeGlobalAddWordOrExpressionModal();
      }, 2000);
    }


    // –û–±–Ω–æ–≤–∏–º orphanWords –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!newCard.galaxy && !newCard.subtopic) {
      this.orphanWords.unshift(newCard);
    }

  }

  private saveLocally(card: WordCard): void {
    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    allCards.unshift(card);
    localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));
  }

  toggleGlobalType(): void {
    this.newGlobalType = this.newGlobalType === 'word' ? 'expression' : 'word';
  }

  onGalaxySelected(): void {
    const galaxy = this.galaxies.find(g => g.name === this.selectedGalaxy);
    if (galaxy) {
      this.availableSubtopics = galaxy.subtopics.map((s: any) => s.name);
      this.selectedSubtopic = ''; // —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
    } else {
      this.availableSubtopics = [];
    }
  }

  // –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ª–æ–≤
  generateWithGPT(): void {
    const firstWord = this.entries[0].word.trim();
    if (!firstWord) return;

    this.gptService.classifyWord(this.newGlobalWord, 'user123').subscribe({
      next: (res) => {
        this.selectedGalaxy = res.theme;
        this.onGalaxySelected(); // –æ–±–Ω–æ–≤–∏–º –ø–æ–¥—Ç–µ–º—ã
        this.selectedSubtopic = res.subtheme;
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ GPT:', err);
      }
    });
  }

  // –ø–µ—Ä–µ–≤–æ–¥
  autoTranslateWord(index: number): void {
    const entry = this.entries[index];
    const word = entry.word.trim();
    if (!word) return;

    const detectedLang = this.detectLang(word);
    if (detectedLang !== this.sourceLang) {
      const langNames: any = { ru: '—Ä—É—Å—Å–∫–∏–π', fr: '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', en: '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' };
      const confirmSwitch = confirm(
        `–í–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ª–æ–≤–æ –Ω–∞ —è–∑—ã–∫–µ "${langNames[detectedLang]}", –∞ –≤—ã –≤—ã–±—Ä–∞–ª–∏ "${langNames[this.sourceLang]}". –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è?`
      );
      if (confirmSwitch) {
        this.sourceLang = detectedLang;
      } else {
        return;
      }
    }

    this.translationService.requestTranslation(word, this.sourceLang, this.targetLang).subscribe({
      next: (res) => {
        if (res.translations.length) {
          entry.translation = res.translations[0];
          entry.grammar = res.grammar ?? { partOfSpeech: 'noun' };
          this.showConfetti();
          alert(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥: ${res.translations[0]}`);
        } else {
          alert('‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
      },
      error: (err) => {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞.');
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', err);
      }
    });
  }


  showConfetti(): void {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js';
    script.onload = () => {
      (window as any).confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      });
    };
    document.body.appendChild(script);
  }


  detectLang(word: string): 'ru' | 'fr' | 'en' {
    if (/^[–∞-—è—ë\s]+$/i.test(word)) return 'ru';
    if (/^[a-z\s]+$/i.test(word)) return 'en';
    if (/^[a-z√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø√±√¶≈ì\s]+$/i.test(word)) return 'fr';
    return 'en'; // fallback
  }


  // info combien de mots ou expressions
  getWordAndExpressionCount(subtopicName: string, galaxyName: string): string {
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    const relevant = all.filter(item => item.galaxy === galaxyName && item.subtopic === subtopicName);
    const wordCount = relevant.filter(item => item.type === 'word').length;
    const exprCount = relevant.filter(item => item.type === 'expression').length;

    return `${wordCount} mots / ${exprCount} expressions`;
  }

  fitSubtopicLabels(): void {
    setTimeout(() => {
      this.labelElements.forEach(el => {
        textFit(el.nativeElement, {
          alignHoriz: true,
          alignVert: true,
          multiLine: false,
          maxFontSize: 20,
          minFontSize: 8
        });
      });
    }, 0);
  }

  // ajouter l'info li√©e aux champs grammatiques
  onGlobalTranslationInput() {
    if (this.newGlobalTranslation.trim()) {
      if (this.newGlobalType === 'word') {
        this.grammarData = {
          partOfSpeech: 'noun'
        };
      } else if (this.newGlobalType === 'expression') {
        this.grammarData = {
          partOfSpeech: 'expression',
          expressionType: 'other' // –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–≤—ã—Ä–∞–∂–µ–Ω–∏–µ'
        };
      }
    } else {
      this.grammarData = null;
    }
  }


  onGrammarChange(updated: GrammarData) {
    this.grammarData = updated;
  }

  toggleZoneLibre() {
    this.showZoneLibre = !this.showZoneLibre;

    // –ø–æ–ª—É—á–∞–µ–º –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    if (this.showZoneLibre) {
      this.getOrphanWords();
    }

    setTimeout(() => {
      this.zoomedZoneLibre = this.showZoneLibre;
    }, 100);
  }


  getOrphanWords() {
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    this.orphanWords = all.filter(w =>
      (!w.galaxy || w.galaxy.trim() === '') &&
      (!w.subtopic || w.subtopic.trim() === '')
    );
  }


  onDropToGalaxy(event: DragEvent, galaxyName: string): void {
    event.preventDefault();

    const rawData = event.dataTransfer?.getData('text/plain');
    if (!rawData) return;

    const word: WordCard = JSON.parse(rawData);
    word.galaxy = galaxyName;
    word.subtopic = '';

    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    const index = allCards.findIndex(c => c.id === word.id);
    if (index !== -1) {
      allCards[index] = word;
      localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));

      // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–µ–º—É
      this.pendingSubtopicWords.push(word);
      this.activePendingWord = word;
      this.orphanWords = this.orphanWords.filter(w => w.id !== word.id);

      if (this.postponedWordsByGalaxy[galaxyName]) {
        this.postponedWordsByGalaxy[galaxyName] = this.postponedWordsByGalaxy[galaxyName].filter(w => w.id !== word.id);
      }
      this.savePostponedWords();

      this.selectedGalaxyForSubtopic = galaxyName;

      alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–ª–∞–∫—Ç–∏–∫—É "${galaxyName}"`);

      // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      this.getOrphanWords();

      // –ó—É–º–∏—Ä—É–µ–º—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–∞–ª–∞–∫—Ç–∏–∫—É
      this.zoomIntoGalaxy(this.galaxies.find(g => g.name === galaxyName));
    }
  }


  onDragOver(event: DragEvent): void {
    event.preventDefault(); // –†–∞–∑—Ä–µ—à–∞–µ–º drop
  }

  onDragStart(event: DragEvent, word: WordCard): void {
    event.dataTransfer?.setData('text/plain', JSON.stringify(word));
  }

  assignSubtopicToPendingWord(subtopicName: string): void {
    const word = this.pendingSubtopicWords.shift();
    if (!word || !this.selectedGalaxyForSubtopic) return;

    word.subtopic = subtopicName;

    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    all.unshift(word);
    localStorage.setItem('vocabulary_cards', JSON.stringify(all));

    this.addSuccessMessage = `‚úÖ "${word.word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥—Ç–µ–º—É "${subtopicName}"`;

    setTimeout(() => {
      this.addSuccessMessage = '';
    }, 2000);

    this.activePendingWord = undefined;

  }

  postponePendingWord(): void {
    const word = this.pendingSubtopicWords.shift();
    if (!word || !this.selectedGalaxyForSubtopic) return;

    if (!this.postponedWordsByGalaxy[this.selectedGalaxyForSubtopic]) {
      this.postponedWordsByGalaxy[this.selectedGalaxyForSubtopic] = [];
    }

    this.postponedWordsByGalaxy[this.selectedGalaxyForSubtopic].push(word);

    // üí° –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è drag-and-drop ‚Äî –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    const index = all.findIndex(c => c.id === word.id);
    if (index !== -1) {
      all[index] = word;
    } else {
      all.push(word); // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º
    }

    localStorage.setItem('vocabulary_cards', JSON.stringify(all));

    this.activePendingWord = undefined;
    this.savePostponedWords();
  }

  getSubtopicsForSelectedGalaxy(): string[] {
    const galaxy = this.galaxies.find(g => g.name === this.selectedGalaxyForSubtopic);
    return galaxy?.subtopics.map(s => s.name) || [];
  }

  onDropToSubtopic(event: DragEvent, galaxyName: string, subtopicName: string): void {
    event.preventDefault();

    const rawData = event.dataTransfer?.getData('text/plain');
    if (!rawData) return;

    const word: WordCard = JSON.parse(rawData);
    word.galaxy = galaxyName;
    word.subtopic = subtopicName;

    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    const index = allCards.findIndex(c => c.id === word.id);
    if (index !== -1) {
      allCards[index] = word;
      localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));
      alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥—Ç–µ–º—É "${subtopicName}"`);

      this.pendingSubtopicWords = this.pendingSubtopicWords.filter(w => w.id !== word.id);
    }
  }

  togglePostponedList(galaxy: string): void {
    this.collapsedPostponedList[galaxy] = !this.collapsedPostponedList[galaxy];
  }

  onEntryChanged(index: number): void {
    const entry = this.entries[index];

    if (index === 0) {
      const isFilled = !!(entry.word.trim() || entry.translation.trim());

      this.hasStartedTypingFirstEntry = isFilled;

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—ë—Ä –≤—Å—ë ‚Äî –≤—ã–π—Ç–∏ –∏–∑ multiEntry —Ä–µ–∂–∏–º–∞
      if (!isFilled) {
        this.isMultiEntryMode = false;

        // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
        this.entries = [this.entries[0]];
      }
    }
  }

  removeEntry(index: number): void {
    this.entries.splice(index, 1);
    if (this.entries.length <= 1) {
      this.isMultiEntryMode = false;
    }
  }

  saveAll(): void {
    const validEntries = this.entries.filter(e => e.word.trim());
    if (!validEntries.length) return;

    const now = Date.now();

    const backendCards = validEntries.map(entry => ({
      word: entry.word.trim(),
      translations: [],
      galaxy: '',
      subtopic: '',
      type: this.newGlobalType, // üü¢ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∏–ø
      createdAt: Date.now(),
      grammar: entry.grammar ?? undefined,
    }));

    try {
      this.lexiconService.addMultipleWords(backendCards).subscribe({
        next: (res) => {
          console.log('‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î:', res);
          this.saveAllLocally(validEntries, backendCards, now);
          this.resetEntryModal(true, validEntries.length);
        },
        error: (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', err);
          this.saveAllLocally(validEntries, backendCards, now);
          this.resetEntryModal(false, validEntries.length);
        }
      });
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', e);
      this.saveAllLocally(validEntries, backendCards, now);
      this.resetEntryModal(false, validEntries.length);
    }
  }

  private saveAllLocally(validEntries: WordEntry[], backendCards: any[], now: number) {
    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    backendCards.forEach((card, index) => {
      const localCard: WordCard = {
        id: now + index,
        word: card.word,
        translation: validEntries[index].translation.trim(),
        galaxy: '',
        subtopic: '',
        type: card.type,
        createdAt: card.createdAt,
        grammar: card.grammar
      };

      allCards.unshift(localCard);

      if (!localCard.galaxy && !localCard.subtopic) {
        this.orphanWords.unshift(localCard);
      }
    });

    localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));
  }

  private resetEntryModal(success: boolean, count: number): void {
    this.entries = [{ word: '', translation: '', grammar: undefined }];
    this.showGlobalAddWordOrExpressionModal = false;
    const message = success
      ? `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: ${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`
      : `‚ö†Ô∏è –°–ª–æ–≤–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ë–î. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: ${count}`;
    alert(message);
  }


  onLangChangeAttempt(): void {
    if (this.isMultiEntryMode) {
      alert('‚ö†Ô∏è –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —è–∑—ã–∫ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤.');
    }
  }


  enableMultiEntry(): void {
    if (this.entries.length < this.maxEntries) {
      this.entries.push({ word: '', translation: '', grammar: undefined });
      this.isMultiEntryMode = true;
    }
  }

  onTranslationChanged(entry: WordEntry): void {
    if (entry.translation.trim() && !entry.grammar) {
      if (this.newGlobalType === 'word') {
        entry.grammar = { partOfSpeech: 'noun' };
      } else if (this.newGlobalType === 'expression') {
        entry.grammar = {
          partOfSpeech: 'expression',
          expressionType: 'other'
        };
      }
    }

    if (!entry.translation.trim()) {
      entry.grammar = undefined;
    }
  }

  onGrammarValidate(updatedGrammar: GrammarData, entry: WordEntry) {
    console.log('‚úÖ Grammar validated:', updatedGrammar);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    entry.grammar = updatedGrammar;

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    // –ù–∞–ø—Ä–∏–º–µ—Ä: this.saveGrammarImmediately(entry);
  }

  showNavigateToSubtopicModal(card: WordCard) {
    const goToSubtopic = confirm(`‚úÖ –°–ª–æ–≤–æ "${card.word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥—Ç–µ–º—É "${card.subtopic}".\n–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–µ–º–µ?`);

    if (goToSubtopic) {
      this.router.navigate(['/student/wordsTeaching', card.galaxy, card.subtopic]);
    } else {
      // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–∞—Ö
    }
  }

  stayOnGlobalPage() {
    this.showPostAddModal = false;
    this.targetGalaxyForPostponed = undefined;
  }

  goToPostponedWords() {
    if (!this.targetGalaxyForPostponed) return;

    this.showPostAddModal = false;

    this.zoomIntoGalaxy(this.targetGalaxyForPostponed);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å—Ä–∞–∑—É
    setTimeout(() => {
      this.collapsedPostponedList[this.targetGalaxyForPostponed.name] = false;
    }, 500);
  }

  updatePostponedStatus(wordId: number, postponed: boolean): void {
    this.lexiconService.updateWord(wordId, { postponed }).subscribe({
      next: () => console.log(`‚úÖ –°—Ç–∞—Ç—É—Å postponed –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è —Å–ª–æ–≤–∞ id=${wordId}: ${postponed}`),
      error: (err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ postponed:', err)
    });
  }


}
