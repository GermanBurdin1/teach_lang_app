import { Component, ElementRef, QueryList, ViewChildren, AfterViewInit } from '@angular/core';
import { VocabularyGptService } from '../../services/vocabulary-gpt.service';
import { Router } from '@angular/router';
import { TranslationService } from '../../services/translation.service';
import { GrammarData } from '../vocabulary/models/grammar-data.model';
import textFit from 'textfit';

interface WordCard {
  id?: number;
  word: string;
  translation: string;
  galaxy: string;
  subtopic: string;
  type?: 'word' | 'expression';
  createdAt?: number;
  grammar?: GrammarData
}


@Component({
  selector: 'app-words',
  templateUrl: './words.component.html',
  styleUrls: ['./words.component.css']
})
export class WordsComponent {
  @ViewChildren('subtopicElement') subtopicElements!: QueryList<ElementRef>;
  @ViewChildren('galaxyElement') galaxyElements!: QueryList<ElementRef>;
  @ViewChildren('galaxyWrapper') galaxyWrappers!: QueryList<ElementRef>;
  @ViewChildren('labelRef') labelElements!: QueryList<ElementRef>;

  searchQuery: string = '';
  searchResults: any[] = [];
  zoomStyle = {};
  isZoomingToPlanet = false;
  isZoomingToGalaxy = false;
  focusedGalaxyIndex: number | null = null;
  showGlobalAddWordOrExpressionModal: boolean = false;
  newGlobalWord: string = '';
  newGlobalTranslation: string = '';
  newGlobalType: 'word' | 'expression' = 'word';
  selectedGalaxy: string = '';
  selectedSubtopic: string = '';
  availableSubtopics: string[] = [];
  addSuccessMessage: string = '';
  isFromGalaxyShortcut: boolean = false;
  galaxies = [
    {
      name: '–ö—Ä—É–≥–æ–∑–æ—Ä',
      sanitizedName: '–ö—Ä—É–≥–æ–∑–æ—Ä'.replace(/\s+/g, '-'), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è id
      subtopics: this.generateSubtopics(6, ['–ò—Å—Ç–æ—Ä–∏—è', '–ù–∞—É–∫–∞', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ö—É–ª—å—Ç—É—Ä–∞'])
    },
    {
      name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏',
      sanitizedName: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ-—Å–≤—è–∑–∏'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(5, ['–°–µ–º—å—è', '–î—Ä—É–∑—å—è', '–†–∞–±–æ—Ç–∞', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è'])
    },
    {
      name: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞',
      sanitizedName: '–†–∞–±–æ—Ç–∞-–∏-–∫–∞—Ä—å–µ—Ä–∞'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(4, ['–í–∞–∫–∞–Ω—Å–∏–∏', '–ù–∞–≤—ã–∫–∏', '–†–µ–∑—é–º–µ', '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'])
    },
    {
      name: '–ü—Ä–µ–¥–º–µ—Ç—ã',
      sanitizedName: '–ü—Ä–µ–¥–º–µ—Ç—ã'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(6, ['–ú–µ–±–µ–ª—å', '–¢–µ—Ö–Ω–∏–∫–∞', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–û–¥–µ–∂–¥–∞', '–£–∫—Ä–∞—à–µ–Ω–∏—è', '–ò–≥—Ä—É—à–∫–∏'])
    },
    {
      name: '–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
      sanitizedName: '–ú–µ–¥–∏—Ü–∏–Ω–∞-–∏-–∑–¥–æ—Ä–æ–≤—å–µ'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(5, ['–ë–æ–ª–µ–∑–Ω–∏', '–õ–µ—á–µ–Ω–∏–µ', '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞', '–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', '–ê–ø—Ç–µ–∫–∏'])
    },
    {
      name: '–°–∏—Ç—É–∞—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
      sanitizedName: '–°–∏—Ç—É–∞—Ü–∏–∏-–∏-—Å–æ–±—ã—Ç–∏—è'.replace(/\s+/g, '-'),
      subtopics: this.generateSubtopics(4, ['–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã', '–°–ø–æ—Ä—Ç', '–ü–æ–ª–∏—Ç–∏–∫–∞'])
    }
  ];
  zoomedGalaxy: any = null;
  sourceLang: 'ru' | 'fr' | 'en' = 'ru';
  targetLang: 'ru' | 'fr' | 'en' = 'fr';
  grammarData: GrammarData | null = null;

  zoomedZoneLibre = false;
  showZoneLibre: boolean = false;
  orphanWords: WordCard[] = [];

  pendingSubtopic?: boolean;
  pendingClassificationWords: WordCard[] = [];
  pendingSubtopicWords: WordCard[] = [];
  selectedGalaxyForSubtopic: string | null = null;
  postponedWordsByGalaxy: { [galaxyName: string]: WordCard[] } = {};

  activePendingWord?: WordCard;
  collapsedPostponedList: { [galaxy: string]: boolean } = {};


  ngAfterViewInit(): void {
    this.labelElements.changes.subscribe(() => {
      this.fitSubtopicLabels();
    });
    this.fitSubtopicLabels(); // initial
  }

  constructor(private router: Router, private gptService: VocabularyGptService, private translationService: TranslationService) { }

  hoverGalaxy(galaxy: any) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
  }

  hoverSubtopic(subtopic: any) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  }

  zoomIntoGalaxy(galaxy: any) {
    this.zoomedGalaxy = galaxy;
    this.isZoomingToPlanet = false; // <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
    this.zoomStyle = {}; // —Å–±—Ä–æ—Å
  }


  resetZoom() {
    this.zoomedGalaxy = null;
    this.zoomStyle = {};
    this.focusedGalaxyIndex = null;

    const galaxyWrappers = document.querySelectorAll('.galaxy-wrapper');
    galaxyWrappers.forEach(el => el.classList.remove('focused'));
  }



  generateSubtopics(count: number, names: string[]) {
    let subtopics = [];
    for (let i = 0; i < count; i++) {
      let angle = (i / count) * Math.PI * 2;
      let x = 100 + Math.cos(angle) * 90; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å RX —ç–ª–ª–∏–ø—Å–∞
      let y = 100 + Math.sin(angle) * 60; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–¥–∏—É—Å RY —ç–ª–ª–∏–ø—Å–∞

      subtopics.push({
        x,
        y,
        name: names[i]
      });
    }
    return subtopics;
  }



  onSubtopicClick(galaxyName: string, subtopicName: string) {
    this.router.navigate(['/student/wordsTeaching', galaxyName, subtopicName]); // <-- –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç–æ—á–µ–∫
  }

  ////////////////////////////////–ø–æ–∏—Å–∫ —Å–ª–æ–≤

  searchWord() {
    if (!this.searchQuery.trim()) {
      this.searchResults = [];
      return;
    }

    const raw = localStorage.getItem('vocabulary_cards');
    console.log('üì¶ –ò–∑ localStorage:', raw);

    const allWords: WordCard[] = JSON.parse(raw || '[]');
    console.log('üìÑ –í—Å–µ–≥–æ —Å–ª–æ–≤:', allWords.length);

    this.searchResults = allWords
      .filter(card =>
        card.word.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
        card.translation.toLowerCase().includes(this.searchQuery.toLowerCase())
      )
      .map(card => ({
        ...card,
        display: `${card.word} ‚Üí ${card.translation}`,
        fullPath: `${card.subtopic} ‚Üí ${card.galaxy}`
      }));

    console.log('üîé –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', this.searchResults.length);
  }

  navigateToWord(result: any) {
    const galaxy = this.galaxies.find(g => g.name === result.galaxy);
    if (!galaxy) return;

    const galaxyIndex = this.galaxies.indexOf(galaxy);
    const galaxyElement = this.galaxyWrappers.get(galaxyIndex)?.nativeElement;
    if (!galaxyElement) return;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–∞–ª–∞–∫—Ç–∏–∫–∏
    const galaxyRect = galaxyElement.getBoundingClientRect();
    const centerX = galaxyRect.left + galaxyRect.width / 2;
    const centerY = galaxyRect.top + galaxyRect.height / 2;

    const viewportCenterX = window.innerWidth / 2;
    const viewportCenterY = window.innerHeight / 2;

    const offsetX = viewportCenterX - centerX;
    const offsetY = viewportCenterY - centerY;

    this.isZoomingToGalaxy = true;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º transform –∫ .galaxies —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –æ–±—ë—Ä—Ç–∫—É
    const galaxiesContainer = document.querySelector('.galaxies') as HTMLElement;
    galaxiesContainer.style.transition = 'transform 1.8s ease';
    galaxiesContainer.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(2)`;

    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º zoomedGalaxy
    setTimeout(() => {
      this.isZoomingToGalaxy = false;
      galaxiesContainer.style.transform = ''; // —Å–±—Ä–æ—Å
      this.zoomedGalaxy = galaxy;
      this.isZoomingToPlanet = true;

      setTimeout(() => {
        const subtopic = galaxy.subtopics.find(s => s.name === result.subtopic);
        if (!subtopic) return;

        const targetX = subtopic.x * 3;
        const targetY = subtopic.y * 3;
        const offsetX = 300 - targetX;
        const offsetY = 300 - targetY;

        this.zoomStyle = {
          transition: 'transform 2s ease',
          transform: `translate(${offsetX}px, ${offsetY}px) scale(2)`
        };

        setTimeout(() => {
          this.isZoomingToPlanet = false;
          this.onSubtopicClick(galaxy.name, result.subtopic);
        }, 2500);
      }, 200);
    }, 2000);
  }

  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
  openGlobalAddWordOrExpressionModal(): void {
    this.isFromGalaxyShortcut = false; // –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    this.showGlobalAddWordOrExpressionModal = true;
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.newGlobalType = 'word';
    this.selectedGalaxy = '';
    this.selectedSubtopic = '';
    this.availableSubtopics = [];
    this.addSuccessMessage = '';
  }

  openAddWordOrExpressionForGalaxy(galaxyName: string): void {
    this.isFromGalaxyShortcut = true;
    this.selectedGalaxy = galaxyName;
    this.availableSubtopics = this.galaxies.find(g => g.name === galaxyName)?.subtopics.map(s => s.name) || [];
    this.selectedSubtopic = '';
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.newGlobalType = 'word';
    this.showGlobalAddWordOrExpressionModal = true;
  }

  onGalaxyAddButtonClick(event: MouseEvent, galaxyName: string): void {
    event.stopPropagation();
    this.openAddWordOrExpressionForGalaxy(galaxyName);
  }


  closeGlobalAddWordOrExpressionModal(): void {
    this.showGlobalAddWordOrExpressionModal = false;
  }

  saveGlobalWordOrExpression(): void {
    if (!this.newGlobalWord.trim()) return;

    const newCard: WordCard = {
      id: Date.now(),
      word: this.newGlobalWord.trim(),
      translation: this.newGlobalTranslation.trim() || '...',
      galaxy: this.selectedGalaxy || '',            // –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      subtopic: this.selectedSubtopic || '',
      type: this.newGlobalType,
      createdAt: Date.now(),
      grammar: this.grammarData ?? undefined,
    };

    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    allCards.unshift(newCard);
    localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));

    this.addSuccessMessage = '‚úÖ –°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';

    // –°–±—Ä–æ—Å –ø–æ–ª–µ–π
    this.newGlobalWord = '';
    this.newGlobalTranslation = '';
    this.selectedGalaxy = '';
    this.selectedSubtopic = '';
    this.availableSubtopics = [];

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
    setTimeout(() => {
      this.addSuccessMessage = '';
      this.closeGlobalAddWordOrExpressionModal();
    }, 1000);

    this.grammarData = null;
  }


  toggleGlobalType(): void {
    this.newGlobalType = this.newGlobalType === 'word' ? 'expression' : 'word';
  }

  onGalaxySelected(): void {
    const galaxy = this.galaxies.find(g => g.name === this.selectedGalaxy);
    if (galaxy) {
      this.availableSubtopics = galaxy.subtopics.map((s: any) => s.name);
      this.selectedSubtopic = ''; // —Å–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
    } else {
      this.availableSubtopics = [];
    }
  }

  // –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ª–æ–≤
  generateWithGPT(): void {
    if (!this.newGlobalWord.trim()) return;

    this.gptService.classifyWord(this.newGlobalWord, 'user123').subscribe({
      next: (res) => {
        this.selectedGalaxy = res.theme;
        this.onGalaxySelected(); // –æ–±–Ω–æ–≤–∏–º –ø–æ–¥—Ç–µ–º—ã
        this.selectedSubtopic = res.subtheme;
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ GPT:', err);
      }
    });
  }

  // –ø–µ—Ä–µ–≤–æ–¥
  autoTranslateWord(): void {
    if (!this.newGlobalWord.trim()) return;

    const detectedLang = this.detectLang(this.newGlobalWord);
    if (detectedLang !== this.sourceLang) {
      const langNames: any = { ru: '—Ä—É—Å—Å–∫–∏–π', fr: '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', en: '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' };
      const confirmSwitch = confirm(`–í–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ª–æ–≤–æ –Ω–∞ —è–∑—ã–∫–µ "${langNames[detectedLang]}", –∞ –≤—ã –≤—ã–±—Ä–∞–ª–∏ "${langNames[this.sourceLang]}". –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è?`);
      if (confirmSwitch) {
        this.sourceLang = detectedLang;
      } else {
        return;
      }
    }

    this.translationService.requestTranslation(this.newGlobalWord, this.sourceLang, this.targetLang).subscribe({
      next: (res) => {
        if (res.translations.length) {
          this.newGlobalTranslation = res.translations[0];
          this.showConfetti(); // üéâ
          alert(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥: ${res.translations[0]}`);
        } else {
          alert('‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
      },
      error: (err) => {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞.');
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', err);
      }
    });
  }

  showConfetti(): void {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js';
    script.onload = () => {
      (window as any).confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      });
    };
    document.body.appendChild(script);
  }


  detectLang(word: string): 'ru' | 'fr' | 'en' {
    if (/^[–∞-—è—ë\s]+$/i.test(word)) return 'ru';
    if (/^[a-z\s]+$/i.test(word)) return 'en';
    if (/^[a-z√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø√±√¶≈ì\s]+$/i.test(word)) return 'fr';
    return 'en'; // fallback
  }


  // info combien de mots ou expressions
  getWordAndExpressionCount(subtopicName: string, galaxyName: string): string {
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    const relevant = all.filter(item => item.galaxy === galaxyName && item.subtopic === subtopicName);
    const wordCount = relevant.filter(item => item.type === 'word').length;
    const exprCount = relevant.filter(item => item.type === 'expression').length;

    return `${wordCount} mots / ${exprCount} expressions`;
  }

  fitSubtopicLabels(): void {
    setTimeout(() => {
      this.labelElements.forEach(el => {
        textFit(el.nativeElement, {
          alignHoriz: true,
          alignVert: true,
          multiLine: false,
          maxFontSize: 20,
          minFontSize: 8
        });
      });
    }, 0);
  }

  // ajouter l'info li√©e aux champs grammatiques
  onGlobalTranslationInput() {
    if (this.newGlobalTranslation.trim() && this.newGlobalType === 'word') {
      this.grammarData = {
        partOfSpeech: 'noun'
      };
    } else {
      this.grammarData = null;
    }
  }

  onGrammarChange(updated: GrammarData) {
    this.grammarData = updated;
  }

  toggleZoneLibre() {
    this.showZoneLibre = !this.showZoneLibre;

    // –ø–æ–ª—É—á–∞–µ–º –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    if (this.showZoneLibre) {
      this.getOrphanWords();
    }

    setTimeout(() => {
      this.zoomedZoneLibre = this.showZoneLibre;
    }, 100);
  }


  getOrphanWords() {
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];
    this.orphanWords = all.filter(w => !w.galaxy || !w.subtopic);
  }

  onDropToGalaxy(event: DragEvent, galaxyName: string): void {
    event.preventDefault();

    const rawData = event.dataTransfer?.getData('text/plain');
    if (!rawData) return;

    const word: WordCard = JSON.parse(rawData);
    word.galaxy = galaxyName;
    word.subtopic = ''; // –ø–æ–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–µ–º—ã

    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    const index = allCards.findIndex(c => c.id === word.id);
    if (index !== -1) {
      allCards[index] = word;
      localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));

      // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–µ–º—É
      this.pendingSubtopicWords.push(word);
      this.activePendingWord = word;
      this.orphanWords = this.orphanWords.filter(w => w.id !== word.id);

      this.selectedGalaxyForSubtopic = galaxyName;

      alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–ª–∞–∫—Ç–∏–∫—É "${galaxyName}"`);

      // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      this.getOrphanWords();

      // –ó—É–º–∏—Ä—É–µ–º—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–∞–ª–∞–∫—Ç–∏–∫—É
      this.zoomIntoGalaxy(this.galaxies.find(g => g.name === galaxyName));
    }
  }


  onDragOver(event: DragEvent): void {
    event.preventDefault(); // –†–∞–∑—Ä–µ—à–∞–µ–º drop
  }

  onDragStart(event: DragEvent, word: WordCard): void {
    event.dataTransfer?.setData('text/plain', JSON.stringify(word));
  }

  assignSubtopicToPendingWord(subtopicName: string): void {
    const word = this.pendingSubtopicWords.shift();
    if (!word || !this.selectedGalaxyForSubtopic) return;

    word.subtopic = subtopicName;

    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    all.unshift(word);
    localStorage.setItem('vocabulary_cards', JSON.stringify(all));

    this.addSuccessMessage = `‚úÖ "${word.word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥—Ç–µ–º—É "${subtopicName}"`;

    setTimeout(() => {
      this.addSuccessMessage = '';
    }, 2000);

    this.activePendingWord = undefined;

  }

  postponePendingWord(): void {
    const word = this.pendingSubtopicWords.shift();
    if (!word || !this.selectedGalaxyForSubtopic) return;

    if (!this.postponedWordsByGalaxy[this.selectedGalaxyForSubtopic]) {
      this.postponedWordsByGalaxy[this.selectedGalaxyForSubtopic] = [];
    }

    this.postponedWordsByGalaxy[this.selectedGalaxyForSubtopic].push(word);

    // üí° –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è drag-and-drop ‚Äî –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ localStorage
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    const index = all.findIndex(c => c.id === word.id);
    if (index !== -1) {
      all[index] = word;
    } else {
      all.push(word); // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º
    }

    localStorage.setItem('vocabulary_cards', JSON.stringify(all));

    this.activePendingWord = undefined;

  }

  getSubtopicsForSelectedGalaxy(): string[] {
    const galaxy = this.galaxies.find(g => g.name === this.selectedGalaxyForSubtopic);
    return galaxy?.subtopics.map(s => s.name) || [];
  }

  onDropToSubtopic(event: DragEvent, galaxyName: string, subtopicName: string): void {
    event.preventDefault();

    const rawData = event.dataTransfer?.getData('text/plain');
    if (!rawData) return;

    const word: WordCard = JSON.parse(rawData);
    word.galaxy = galaxyName;
    word.subtopic = subtopicName;

    const raw = localStorage.getItem('vocabulary_cards');
    const allCards: WordCard[] = raw ? JSON.parse(raw) : [];

    const index = allCards.findIndex(c => c.id === word.id);
    if (index !== -1) {
      allCards[index] = word;
      localStorage.setItem('vocabulary_cards', JSON.stringify(allCards));
      alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥—Ç–µ–º—É "${subtopicName}"`);

      this.pendingSubtopicWords = this.pendingSubtopicWords.filter(w => w.id !== word.id);
    }
  }

  togglePostponedList(galaxy: string): void {
    this.collapsedPostponedList[galaxy] = !this.collapsedPostponedList[galaxy];
  }


}
