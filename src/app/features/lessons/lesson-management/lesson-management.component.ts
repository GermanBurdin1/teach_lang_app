import { Component, OnInit, OnDestroy } from '@angular/core';
import { HomeworkService } from '../../../services/homework.service';
import { LessonService } from '../../../services/lesson.service';
import { AuthService } from '../../../services/auth.service';
import { MaterialService } from '../../../services/material.service';
import { PageEvent } from '@angular/material/paginator';
import { ActivatedRoute, Router } from '@angular/router';
import { VideoCallService } from '../../../services/video-call.service';
import { Subscription } from 'rxjs';

interface Task {
  id: string;
  lessonId: string;
  title: string;
  description: string | null;
  createdBy: string;
  createdByRole: 'student' | 'teacher';
  isCompleted: boolean;
  completedAt: Date | null;
  createdAt: Date;
}

interface Question {
  id: string;
  lessonId: string;
  question: string;
  answer: string | null;
  createdBy: string;
  createdByRole: 'student' | 'teacher';
  isAnswered: boolean;
  answeredAt: Date | null;
  createdAt: Date;
}

interface Material {
  id: string;
  title: string;
  type: 'text' | 'audio' | 'video' | 'pdf' | 'image';
  content: string;
  description?: string;
  createdBy: string;
  createdByName: string;
  createdAt: Date;
  attachedLessons: string[];
  tags: string[];
}

interface Lesson {
  id: string;
  teacherId: string;
  studentId: string;
  scheduledAt: Date;
  status: string;
  teacherName?: string;
  tasks: Task[];
  questions: Question[];
  materials: Material[];
}

@Component({
  selector: 'app-lesson-management',
  templateUrl: './lesson-management.component.html',
  styleUrls: ['./lesson-management.component.css']
})
export class LessonManagementComponent implements OnInit, OnDestroy {
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  filter: string = 'future';
  selectedTeacher: string | null = null;
  highlightedLessonId: string | null = null;
  activePanel: 'cours' | 'settings' | 'stats' = 'cours';
  hideTabs = true;
  searchTerm = '';
  startDate?: string;
  endDate?: string;
  pageSize = 4;
  currentPage = 1;
  showMoreNotifications = false;
  readonly MAX_NOTIFICATIONS = 10;

  // –î–∞–Ω–Ω—ã–µ
  lessons: Lesson[] = [];
  currentLesson: Lesson | null = null;
  
  // –§–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  showAddTaskForm = false;
  showAddQuestionForm = false;
  newTaskTitle = '';
  newTaskDescription = '';
  newQuestionText = '';
  
  // –ó–∞–≥—Ä—É–∑–∫–∞
  loading = false;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL
  highlightedLessonIdFromUrl: string | null = null;

  private subscriptions: Subscription[] = [];

  constructor(
    private homeworkService: HomeworkService,
    private lessonService: LessonService,
    private authService: AuthService,
    private materialService: MaterialService,
    private route: ActivatedRoute,
    private router: Router,
    private videoCallService: VideoCallService
  ) { }

  ngOnInit(): void {
    this.route.params.subscribe(params => {
      this.highlightedLessonIdFromUrl = params['lessonId'] || null;
      console.log('üìã LessonManagement: –ü–æ–ª—É—á–µ–Ω lessonId –∏–∑ URL:', this.highlightedLessonIdFromUrl);
    });

    this.route.queryParams.subscribe(params => {
      // –ï—Å–ª–∏ –µ—Å—Ç—å lessonId –≤ query params, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (params['lessonId']) {
        this.highlightedLessonIdFromUrl = params['lessonId'];
        console.log('üìã LessonManagement: –ü–æ–ª—É—á–µ–Ω lessonId –∏–∑ query params:', this.highlightedLessonIdFromUrl);
      }
    });

    this.loadStudentLessons();

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫ –∏–∑ URL, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if (this.highlightedLessonIdFromUrl) {
      setTimeout(() => {
        this.loadLesson(this.highlightedLessonIdFromUrl!);
      }, 500);
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const materialAttachedSubscription = this.materialService.onMaterialAttached().subscribe(({ materialId, lessonId }) => {
      console.log('üîó –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', { materialId, lessonId });
      
      // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      if (this.currentLesson && this.currentLesson.id === lessonId) {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞');
        this.reloadMaterialsForCurrentLesson();
      }
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —É—Ä–æ–∫–æ–≤
      const lessonInList = this.lessons.find(l => l.id === lessonId);
      if (lessonInList) {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ');
        this.getMaterialsForLesson(lessonId).then(materials => {
          lessonInList.materials = materials;
        });
      }
    });

    this.subscriptions.push(materialAttachedSubscription);
  }

  ngOnDestroy(): void {
    this.subscriptions.forEach(subscription => subscription.unsubscribe());
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
  loadStudentLessons(): void {
    const studentId = this.authService.getCurrentUser()?.id;
    if (!studentId) return;

    this.loading = true;
    this.lessonService.getStudentSentRequests(studentId).subscribe({
      next: (requests) => {
        console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', requests);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–∫–æ–≤
        this.lessons = requests.map(request => ({
          id: request.lessonId || request.id,
          teacherId: request.teacherId,
          studentId: studentId,
          scheduledAt: new Date(request.scheduledAt),
          status: request.status,
          teacherName: request.teacherName,
          tasks: [],
          questions: [],
          materials: []
        }));
        
        this.updateLessonStatuses();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
        this.loadTasksAndQuestionsForAllLessons();
        
        console.log('üìö –£—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', this.lessons);
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤:', error);
        this.loading = false;
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
  loadLesson(lessonId: string): void {
    this.loading = true;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫
    this.lessonService.getLessonDetails(lessonId).subscribe({
      next: (lesson) => {
        this.currentLesson = lesson;
        this.highlightedLessonId = lessonId;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã
        this.loadTasksAndQuestions(lessonId);
        
        setTimeout(() => {
          this.highlightedLessonId = null;
        }, 5000);
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞:', error);
        this.loading = false;
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞
  loadTasksAndQuestions(lessonId: string): void {
    Promise.all([
      this.lessonService.getTasksForLesson(lessonId).toPromise(),
      this.lessonService.getQuestionsForLesson(lessonId).toPromise(),
      this.getMaterialsForLesson(lessonId)
    ]).then(([tasks, questions, materials]) => {
      if (this.currentLesson) {
        this.currentLesson.tasks = tasks || [];
        this.currentLesson.questions = questions || [];
        this.currentLesson.materials = materials || [];
      }
      this.loading = false;
    }).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
      this.loading = false;
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞
  private async getMaterialsForLesson(lessonId: string): Promise<Material[]> {
    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—Ä–æ–∫–∞:', lessonId);
      const allMaterials = await this.materialService.getMaterials().toPromise();
      console.log('üì¶ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã:', allMaterials);
      
      if (!allMaterials || allMaterials.length === 0) {
        console.warn('‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ file-service –Ω–µ –∑–∞–ø—É—â–µ–Ω?');
        return [];
      }
      
      const filteredMaterials = allMaterials.filter(material => {
        const isAttached = material.attachedLessons && material.attachedLessons.includes(lessonId);
        console.log(`üìé –ú–∞—Ç–µ—Ä–∏–∞–ª "${material.title}" –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —É—Ä–æ–∫–∞–º:`, material.attachedLessons, '–≤–∫–ª—é—á–∞–µ—Ç —É—Ä–æ–∫', lessonId, '?', isAttached);
        return isAttached;
      });
      
      console.log('‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—Ä–æ–∫–∞:', filteredMaterials);
      return filteredMaterials;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞:', error);
      console.error('‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('   1. File-service –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3008');
      console.error('   2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API');
      console.error('   3. –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
      return [];
    }
  }

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
  async reloadMaterialsForCurrentLesson(): Promise<void> {
    if (!this.currentLesson) return;
    
    try {
      const materials = await this.getMaterialsForLesson(this.currentLesson.id);
      this.currentLesson.materials = materials;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≤ —Å–ø–∏—Å–∫–µ —É—Ä–æ–∫–æ–≤
      const lessonInList = this.lessons.find(l => l.id === this.currentLesson!.id);
      if (lessonInList) {
        lessonInList.materials = materials;
      }
      
      console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã:', materials);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
  loadTasksAndQuestionsForAllLessons(): void {
    if (this.lessons.length === 0) {
      this.loading = false;
      return;
    }

    const loadPromises = this.lessons.map(lesson => 
      Promise.all([
        this.lessonService.getTasksForLesson(lesson.id).toPromise().catch(() => []),
        this.lessonService.getQuestionsForLesson(lesson.id).toPromise().catch(() => []),
        this.getMaterialsForLesson(lesson.id).catch(() => [])
      ]).then(([tasks, questions, materials]) => {
        lesson.tasks = tasks || [];
        lesson.questions = questions || [];
        lesson.materials = materials || [];
      })
    );

    Promise.all(loadPromises).then(() => {
      this.loading = false;
      console.log('üìö –ó–∞–¥–∞—á–∏, –≤–æ–ø—Ä–æ—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤');
    }).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É—Ä–æ–∫–æ–≤:', error);
      this.loading = false;
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Ä–æ–∫–æ–≤ (–ø—Ä–æ—à–µ–¥—à–∏–µ/–±—É–¥—É—â–∏–µ)
  updateLessonStatuses(): void {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ API, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∏—Ö
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –¥–∞—Ç–µ –∏ —Å—Ç–∞—Ç—É—Å–µ –≤ –º–µ—Ç–æ–¥–µ matchesCurrentFilter
    console.log('üìä –°—Ç–∞—Ç—É—Å—ã —É—Ä–æ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', this.lessons.map(l => ({id: l.id, status: l.status, date: l.scheduledAt})));
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  addTask(): void {
    if (!this.newTaskTitle.trim() || !this.currentLesson) return;

    const studentId = this.authService.getCurrentUser()?.id;
    if (!studentId) return;

    const taskData = {
      lessonId: this.currentLesson.id,
      title: this.newTaskTitle,
      description: this.newTaskDescription || null,
      createdBy: studentId,
      createdByRole: 'student' as const
    };

    this.lessonService.addTaskToLesson(taskData).subscribe({
      next: (newTask) => {
        if (this.currentLesson) {
          this.currentLesson.tasks.push(newTask);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏ –≤ —Å–ø–∏—Å–∫–µ —É—Ä–æ–∫–æ–≤
          const lessonInList = this.lessons.find(l => l.id === this.currentLesson!.id);
          if (lessonInList) {
            lessonInList.tasks.push(newTask);
          }
        }
        this.clearTaskForm();
        console.log('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', newTask);
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      }
    });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  addQuestion(): void {
    if (!this.newQuestionText.trim() || !this.currentLesson) return;

    const studentId = this.authService.getCurrentUser()?.id;
    if (!studentId) return;

    const questionData = {
      lessonId: this.currentLesson.id,
      question: this.newQuestionText,
      createdBy: studentId,
      createdByRole: 'student' as const
    };

    this.lessonService.addQuestionToLesson(questionData).subscribe({
      next: (newQuestion) => {
        if (this.currentLesson) {
          this.currentLesson.questions.push(newQuestion);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤ —Å–ø–∏—Å–∫–µ —É—Ä–æ–∫–æ–≤
          const lessonInList = this.lessons.find(l => l.id === this.currentLesson!.id);
          if (lessonInList) {
            lessonInList.questions.push(newQuestion);
          }
        }
        this.clearQuestionForm();
        console.log('–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω:', newQuestion);
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
      }
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–¥–∞—á–∏
  clearTaskForm(): void {
    this.newTaskTitle = '';
    this.newTaskDescription = '';
    this.showAddTaskForm = false;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤–æ–ø—Ä–æ—Å–∞
  clearQuestionForm(): void {
    this.newQuestionText = '';
    this.showAddQuestionForm = false;
  }

  // –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  completeTask(taskId: string): void {
    const studentId = this.authService.getCurrentUser()?.id;
    if (!studentId) return;

    this.lessonService.completeTask(taskId, studentId).subscribe({
      next: (updatedTask) => {
        if (this.currentLesson) {
          const taskIndex = this.currentLesson.tasks.findIndex(t => t.id === taskId);
          if (taskIndex > -1) {
            this.currentLesson.tasks[taskIndex] = updatedTask;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –≤ —Å–ø–∏—Å–∫–µ —É—Ä–æ–∫–æ–≤
          const lessonInList = this.lessons.find(l => l.id === this.currentLesson!.id);
          if (lessonInList) {
            const taskIndexInList = lessonInList.tasks.findIndex(t => t.id === taskId);
            if (taskIndexInList > -1) {
              lessonInList.tasks[taskIndexInList] = updatedTask;
            }
          }
        }
        console.log('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è:', updatedTask);
      },
      error: (error) => {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      }
    });
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —à–∞–±–ª–æ–Ω–æ–º
  get filteredLessons() {
    if (this.currentLesson) {
      // –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–∫ —á–µ—Ä–µ–∑ calendar, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      const otherLessons = this.lessons.filter(lesson => 
        lesson.id !== this.currentLesson!.id && this.matchesCurrentFilter(lesson)
      );
      return [this.currentLesson, ...otherLessons];
    }
    
    // –ö–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const allFiltered = this.fullFilteredLessons;
    const startIndex = (this.currentPage - 1) * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    return allFiltered.slice(startIndex, endIndex);
  }

  get fullFilteredLessons() {
    console.log(`üìä –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä "${this.filter}" –∫ ${this.lessons.length} —É—Ä–æ–∫–∞–º`);
    
    const result = this.lessons.filter(lesson => this.matchesCurrentFilter(lesson));
    
    console.log(`üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${result.length} —É—Ä–æ–∫–æ–≤`, result.map(l => ({
      id: l.id, 
      date: l.scheduledAt, 
      status: l.status,
      teacherName: l.teacherName
    })));

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫ (—á–µ—Ä–µ–∑ calendar), —Å—Ç–∞–≤–∏–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
    if (this.highlightedLessonIdFromUrl) {
      const highlightedLesson = result.find(l => l.id === this.highlightedLessonIdFromUrl);
      const otherLessons = result.filter(l => l.id !== this.highlightedLessonIdFromUrl);
      
      if (highlightedLesson) {
        return [highlightedLesson, ...otherLessons];
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ: –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –ø—Ä–æ—à–µ–¥—à–∏–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    const sorted = result.sort((a, b) => {
      const dateA = new Date(a.scheduledAt);
      const dateB = new Date(b.scheduledAt);
      const now = new Date();
      
      const aIsFuture = dateA > now;
      const bIsFuture = dateB > now;
      
      if (aIsFuture && bIsFuture) {
        return dateA.getTime() - dateB.getTime(); // –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ: –±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏
      } else if (!aIsFuture && !bIsFuture) {
        return dateB.getTime() - dateA.getTime(); // –ü—Ä–æ—à–µ–¥—à–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏
      } else {
        return aIsFuture ? -1 : 1; // –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ—à–µ–¥—à–∏–º–∏
      }
    });
    
    console.log(`üìä –ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: ${sorted.length} —É—Ä–æ–∫–æ–≤`);
    return sorted;
  }

  private matchesCurrentFilter(lesson: Lesson): boolean {
    const now = new Date();
    const lessonDate = new Date(lesson.scheduledAt);
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (this.filter === 'future') {
      // √Ä venir: –¢–û–õ–¨–ö–û –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —É—Ä–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const isFutureTime = lessonDate > now;
      
      console.log(`üîç –§–∏–ª—å—Ç—Ä Future –¥–ª—è —É—Ä–æ–∫–∞ ${lesson.id}:`, {
        lessonDate: lessonDate.toISOString(),
        now: now.toISOString(), 
        status: lesson.status,
        isFutureTime,
        teacherName: lesson.teacherName
      });
      
      if (!isFutureTime) return false;
    } else if (this.filter === 'past') {
      // Pass√©s: –¢–û–õ–¨–ö–û –ø—Ä–æ—à–µ–¥—à–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const isPastTime = lessonDate <= now;
      
      console.log(`üïê –§–∏–ª—å—Ç—Ä Past –¥–ª—è —É—Ä–æ–∫–∞ ${lesson.id}:`, {
        lessonDate: lessonDate.toISOString(),
        now: now.toISOString(),
        status: lesson.status,
        isPastTime,
        teacherName: lesson.teacherName
      });
      
      if (!isPastTime) return false;
    }
    // 'all' - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ, –ø—Ä–æ—à–µ–¥—à–∏–µ, –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
    if (this.selectedTeacher && lesson.teacherName !== this.selectedTeacher) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
    if (this.startDate) {
      const filterDate = new Date(this.startDate);
      if (lessonDate < filterDate) return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (this.endDate) {
      const filterDate = new Date(this.endDate);
      filterDate.setHours(23, 59, 59, 999); // –ö–æ–Ω–µ—Ü –¥–Ω—è
      if (lessonDate > filterDate) return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (this.searchTerm) {
      const searchLower = this.searchTerm.toLowerCase();
      const hasMatchInTasks = lesson.tasks.some(task => 
        task.title.toLowerCase().includes(searchLower) ||
        task.description?.toLowerCase().includes(searchLower)
      );
      const hasMatchInQuestions = lesson.questions.some(question =>
        question.question.toLowerCase().includes(searchLower)
      );
      
      if (!hasMatchInTasks && !hasMatchInQuestions) return false;
    }

    return true;
  }

  get uniqueTeachers(): string[] {
    const teachers = this.lessons
      .map(lesson => lesson.teacherName)
      .filter((name, index, arr) => name && arr.indexOf(name) === index);
    return teachers as string[];
  }

  get allHomework(): string[] {
    return [];
  }

  get stats() {
    const now = new Date();
    return {
      pastCount: this.lessons.filter(l => {
        const lessonDate = new Date(l.scheduledAt);
        return lessonDate <= now || ['completed', 'past'].includes(l.status);
      }).length,
      futureCount: this.lessons.filter(l => {
        const lessonDate = new Date(l.scheduledAt);
        return lessonDate > now || ['confirmed', 'pending', 'in_progress'].includes(l.status);
      }).length,
      totalTasks: this.lessons.reduce((acc, l) => acc + l.tasks.length, 0),
      totalQuestions: this.lessons.reduce((acc, l) => acc + l.questions.length, 0),
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  getStatusText(status: string): string {
    const statusMap: { [key: string]: string } = {
      'pending': 'En attente',
      'confirmed': 'Confirm√©',
      'rejected': 'Rejet√©',
      'cancelled_by_student': 'Annul√© par l\'√©tudiant',
      'cancelled_by_student_no_refund': 'Annul√© (pas de remboursement)',
      'in_progress': 'En cours',
      'completed': 'Termin√©',
      'future': '√Ä venir',
      'past': 'Pass√©'
    };
    return statusMap[status] || status;
  }

  getStatusClass(status: string): string {
    const classMap: { [key: string]: string } = {
      'pending': 'status-pending',
      'confirmed': 'status-confirmed',
      'rejected': 'status-rejected',
      'cancelled_by_student': 'status-cancelled',
      'cancelled_by_student_no_refund': 'status-cancelled',
      'in_progress': 'status-in-progress',
      'completed': 'status-completed',
      'future': 'status-future',
      'past': 'status-past'
    };
    return classMap[status] || 'status-default';
  }

  // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤
  backToLessonList(): void {
    this.currentLesson = null;
    this.highlightedLessonId = null;
    this.highlightedLessonIdFromUrl = null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL, —É–±–∏—Ä–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–∫–∞
    this.router.navigate([], {
      relativeTo: this.route,
      queryParams: {},
      replaceUrl: true
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
    if (this.lessons.length === 0) {
      this.loadStudentLessons();
    }
  }

  // –ú–µ—Ç–æ–¥—ã-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  onPageChange(event: PageEvent) {
    this.pageSize = event.pageSize;
    this.currentPage = event.pageIndex + 1;
  }

  addToHomework(item: any) {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏ n√©cessit√©
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ –≤–æ–π—Ç–∏ –≤ –∫–ª–∞—Å—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è confirmed —É—Ä–æ–∫–æ–≤ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å)
  canEnterClass(lesson: Lesson): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å - –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ confirmed —É—Ä–æ–∫–∏ (–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º)
    if (lesson.status !== 'confirmed') {
      return false;
    }

    const now = new Date();
    const lessonTime = new Date(lesson.scheduledAt);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Ä–æ–∫ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
    const isSameDay = now.getFullYear() === lessonTime.getFullYear() &&
                      now.getMonth() === lessonTime.getMonth() &&
                      now.getDate() === lessonTime.getDate();
    
    return isSameDay;
  }

  // –í—Ö–æ–¥ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
  enterVirtualClass(lesson: Lesson): void {
    const currentUserId = this.authService.getCurrentUser()?.id;
    if (!currentUserId) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –≤ VideoCallService
    this.videoCallService.setLessonData(lesson.id, currentUserId);
    
    this.router.navigate([`/classroom/${lesson.id}/lesson`], {
      queryParams: { startCall: true }
    });
  }

  recalculateStatus() {
    this.updateLessonStatuses();
    this.currentPage = 1; // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
  }

  // ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ê–í–¢–û–†–°–¢–í–ê ====================
  
  getTaskAuthorDisplay(task: Task): string {
    const currentUserId = this.authService.getCurrentUser()?.id;
    if (task.createdBy === currentUserId) {
      return 'Mes t√¢ches';
    } else {
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
      return this.currentLesson?.teacherName || 'Professeur';
    }
  }

  getQuestionAuthorDisplay(question: Question): string {
    const currentUserId = this.authService.getCurrentUser()?.id;
    if (question.createdBy === currentUserId) {
      return 'Mes questions';
    } else {
      // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
      return this.currentLesson?.teacherName || 'Professeur';
    }
  }

  getMaterialAuthorDisplay(material: Material): string {
    const currentUserId = this.authService.getCurrentUser()?.id;
    if (material.createdBy === currentUserId) {
      return 'Mes mat√©riaux';
    } else {
      // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
      return material.createdByName || 'Professeur';
    }
  }

  isOwnContent(createdBy: string): boolean {
    const currentUserId = this.authService.getCurrentUser()?.id;
    return createdBy === currentUserId;
  }
}
