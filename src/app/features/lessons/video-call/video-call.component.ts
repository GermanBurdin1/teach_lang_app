import { Component, OnInit, ViewChild, ElementRef, Input, AfterViewInit, OnDestroy } from '@angular/core';
import { VideoCallService } from '../../../services/video-call.service';
import { WebSocketService } from '../../../services/web-socket.service';

@Component({
  selector: 'app-video-call',
  templateUrl: './video-call.component.html',
  styleUrls: ['./video-call.component.scss']
})
export class VideoCallComponent implements OnInit {
  @ViewChild('localVideo') localVideo!: ElementRef<HTMLVideoElement>;
  @Input() isFloatingMode: boolean = false;
  remoteUserIds: string[] = [];

  constructor(public videoCallService: VideoCallService, private wsService: WebSocketService) { }

  ngOnInit(): void {
    console.log('üìπ VideoCallComponent –∑–∞–≥—Ä—É–∂–µ–Ω –≤ ngOnInit', { isFloatingMode: this.isFloatingMode });
    console.log("üé• video-call.component.ts ‚Üí ngOnInit() —Å—Ä–∞–±–æ—Ç–∞–ª!");
    console.log(`üé• video-call.component.ts ‚Üí –°–æ–∑–¥–∞–Ω ${new Date().toISOString()}`);
    this.videoCallService.joinChannel().then(() => {
      if (this.videoCallService.localTracks.videoTrack) {
        this.videoCallService.localTracks.videoTrack.play(this.localVideo.nativeElement);
      }
    });

    this.videoCallService.agoraClient.on('user-published', (user) => {
      this.remoteUserIds.push(user.uid.toString());
    });

    this.videoCallService.agoraClient.on('user-unpublished', (user) => {
      this.remoteUserIds = this.remoteUserIds.filter(uid => uid !== user.uid.toString());
    });

    this.wsService.listen('call_invite').subscribe((data: any) => {
      console.log(`üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç ${data.from}`);

      const acceptCall = confirm(`üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç ${data.from}. –ü—Ä–∏–Ω—è—Ç—å?`);
      if (acceptCall) {
        this.videoCallService.acceptCall(data.from);
      } else {
        this.videoCallService.rejectCall(data.from);
      }
    });

    this.wsService.listen('call_reject').subscribe((data: any) => {
      console.log(`üìµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤.`);
      alert(`üìµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤.`);
    });

    this.wsService.listen('call_accept').subscribe((data: any) => {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤.`);
      this.videoCallService.startVideoCall();
    });
  }

  ngAfterViewInit(): void {
    console.log("üìπ VideoCallComponent –∑–∞–≥—Ä—É–∂–µ–Ω!");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ localVideo
    if (!this.localVideo || !this.localVideo.nativeElement) {
      console.warn("‚ö† localVideo –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –û–∂–∏–¥–∞–Ω–∏–µ 500ms...");
      setTimeout(() => this.initLocalVideo(), 500);
      return;
    }

    this.initLocalVideo();
    console.log("üé• video-call.component.ts ‚Üí ngAfterViewInit() —Å—Ä–∞–±–æ—Ç–∞–ª!");
  }

  ngOnDestroy() {
    console.log("‚ùå video-call.component.ts ‚Üí –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω!");
  }


  private initLocalVideo(): void {
    if (!this.videoCallService.localTracks.videoTrack) {
      console.warn("‚ö† –í–∏–¥–µ–æ—Ç—Ä–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 500ms...");
      setTimeout(() => this.initLocalVideo(), 500);
      return;
    }

    if (!this.localVideo || !this.localVideo.nativeElement) {
      console.error("‚ùå localVideo –ù–ï –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è!");
      return;
    }

    console.log("‚úÖ –í–∏–¥–µ–æ—Ç—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ!");
    this.videoCallService.localTracks.videoTrack.play(this.localVideo.nativeElement);

  }

  get videoWidth(): number {
    return this.videoCallService.videoWidth;
  }

  get videoHeight(): number {
    return this.videoCallService.videoHeight;
  }

  showVideoControls(): void {
    this.videoCallService.showControls = true;
    clearTimeout(this.videoCallService.controlTimeout);
    this.videoCallService.controlTimeout = setTimeout(() => {
      this.videoCallService.showControls = false;
    }, 3000);
  }

  hideVideoControls(): void {
    this.videoCallService.controlTimeout = setTimeout(() => {
      this.videoCallService.showControls = false;
    }, 3000);
  }

  get showControls(): boolean {
    return this.videoCallService.showControls;
  }

  get callActive(): boolean {
    return this.videoCallService.callActive;
  }

  toggleCall(): void {
    this.videoCallService.toggleCall();
  }

  startResize(event: MouseEvent): void {
    event.preventDefault();

    console.log("üîÑ –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ");

    const startX = event.clientX;
    const startY = event.clientY;

    const onMouseMove = (moveEvent: MouseEvent) => {
      const deltaX = moveEvent.clientX - startX;
      const deltaY = moveEvent.clientY - startY;

      this.videoCallService.resizeVideo(deltaX, deltaY);
    };

    const onMouseUp = () => {
      console.log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ");
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
    };

    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
  }

  //screensharing
  isScreenSharing = false;

  async toggleScreenSharing() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    const isSupported = await this.videoCallService.checkSystemSupport();
    if (!isSupported) {
        alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —ç–∫—Ä–∞–Ω–∞!");
        return;
    }

    if (this.isScreenSharing) {
        await this.videoCallService.stopScreenSharing();
    } else {
        await this.videoCallService.startScreenSharing();
        this.videoCallService.startTrackMonitoring(); // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–∫–∞
    }

    this.isScreenSharing = !this.isScreenSharing;
}

}
