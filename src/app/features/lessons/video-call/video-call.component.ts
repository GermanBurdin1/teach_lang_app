import { Component, OnInit, ViewChild, ElementRef, Input } from '@angular/core';
import { VideoCallService } from '../../../services/video-call.service';
import { WebSocketService } from '../../../services/web-socket.service';
import { AuthService } from '../../../services/auth.service';

interface CallData {
  from: string;
  to: string;
  [key: string]: unknown;
}

@Component({
  selector: 'app-video-call',
  templateUrl: './video-call.component.html',
  styleUrls: ['./video-call.component.scss']
})
export class VideoCallComponent implements OnInit {
  @ViewChild('localVideo') localVideo!: ElementRef<HTMLVideoElement>;
  @ViewChild('localVideoPip') localVideoPip!: ElementRef<HTMLVideoElement>;
  @Input() isFloatingMode: boolean = false;
  remoteUserIds: string[] = [];

  // PiP –ø–æ–∑–∏—Ü–∏—è –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
  pipPosition = { x: 20, y: 20 };
  isDragging = false;
  dragOffset = { x: 0, y: 0 };

  constructor(public videoCallService: VideoCallService, private wsService: WebSocketService, public authService: AuthService) { }

  ngOnInit(): void {
    console.log('üìπ VideoCallComponent –∑–∞–≥—Ä—É–∂–µ–Ω –≤ ngOnInit', { isFloatingMode: this.isFloatingMode });
    console.log("üé• video-call.component.ts ‚Üí ngOnInit() —Å—Ä–∞–±–æ—Ç–∞–ª!");
    console.log(`üé• video-call.component.ts ‚Üí –°–æ–∑–¥–∞–Ω ${new Date().toISOString()}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS –¥–ª—è AgoraRTC
    this.checkHTTPSRequirement();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebSocket
    if (this.videoCallService.userId) {
      this.wsService.registerUser(this.videoCallService.userId);
    }
    
    this.videoCallService.joinChannel().then(() => {
      if (this.videoCallService.localTracks.videoTrack) {
        this.videoCallService.localTracks.videoTrack.play(this.localVideo.nativeElement);
      }
    }).catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫—É:', error);
      this.handleVideoCallError(error);
    });

    this.videoCallService.agoraClient?.on('user-published', async (user, mediaType) => {
      console.log('üéØ –ü–û–õ–£–ß–ï–ù user-published:', {
        uid: user.uid,
        mediaType: mediaType,
        currentChannel: this.videoCallService.channelName,
        currentUser: this.videoCallService.userId
      });
      
      try {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.videoCallService.agoraClient) {
          await this.videoCallService.agoraClient.subscribe(user, mediaType);
        }
        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.uid, mediaType);
        
        if (mediaType === 'video') {
          if (!this.remoteUserIds.includes(user.uid.toString())) {
            this.remoteUserIds.push(user.uid.toString());
            console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –°–ø–∏—Å–æ–∫:', this.remoteUserIds);
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ PiP —Ä–µ–∂–∏–º
            setTimeout(() => {
              this.initLocalVideo();
            }, 300);
          }
          
          // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤–∏–¥–µ–æ –Ω–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
          setTimeout(() => {
            const remoteVideoTrack = user.videoTrack;
            
            console.log('üé• –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ:', {
              uid: user.uid,
              hasTrack: !!remoteVideoTrack,
              isTeacher: this.isTeacher(),
              isTeacherUID: this.isTeacherUID(user.uid.toString())
            });
            
            if (remoteVideoTrack) {
              // –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º ID
              const mainVideoElements = document.querySelectorAll(`#remote-video-${user.uid}`) as NodeListOf<HTMLVideoElement>;
              mainVideoElements.forEach((element, index) => {
                if (element) {
                  remoteVideoTrack.play(element);
                  console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è ${user.uid} (—ç–ª–µ–º–µ–Ω—Ç ${index + 1})`);
                }
              });

              // –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: PiP –≤–∏–¥–µ–æ –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
              if (!this.isTeacher() && !this.isTeacherUID(user.uid.toString())) {
                const pipVideoElement = document.getElementById(`student-pip-${user.uid}`) as HTMLVideoElement;
                if (pipVideoElement) {
                  remoteVideoTrack.play(pipVideoElement);
                  console.log('‚úÖ PiP –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', user.uid);
                }
              }
            }
          }, 200);
        }
        
        if (mediaType === 'audio') {
          user.audioTrack?.play();
          console.log('üîä –ê—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.uid);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    });

    this.videoCallService.agoraClient?.on('user-unpublished', (user, mediaType) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª:', user.uid, mediaType);
      if (mediaType === 'video') {
        this.remoteUserIds = this.remoteUserIds.filter(uid => uid !== user.uid.toString());
        console.log('üìù –£–¥–∞–ª–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –°–ø–∏—Å–æ–∫:', this.remoteUserIds);
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω—ã–π —Ä–µ–∂–∏–º
        setTimeout(() => {
          this.initLocalVideo();
        }, 300);
      }
    });

    // WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
    this.wsService.listen('call_invite').subscribe((data: CallData) => {
      console.log(`üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç ${data.from}`);
      const acceptCall = window.confirm(`üìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç ${data.from}. –ü—Ä–∏–Ω—è—Ç—å?`);
      if (acceptCall) {
        this.wsService.acceptCall(data.from, data.to);
        this.videoCallService.joinChannel();
      } else {
        this.wsService.rejectCall(data.from, data.to);
      }
    });

    this.wsService.listen('call_accept').subscribe((data: CallData) => {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤`);
      this.videoCallService.joinChannel();
    });

    this.wsService.listen('call_reject').subscribe((data: CallData) => {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.from} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤`);
      window.alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤`);
    });
  }

  ngAfterViewInit(): void {
    console.log("üìπ VideoCallComponent –∑–∞–≥—Ä—É–∂–µ–Ω!");
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    setTimeout(() => {
      this.initLocalVideo();
    }, 500);
    
    console.log("üé• video-call.component.ts ‚Üí ngAfterViewInit() —Å—Ä–∞–±–æ—Ç–∞–ª!");
  }

  ngOnDestroy() {
    console.log("‚ùå video-call.component.ts ‚Üí –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω!");
  }


  private initLocalVideo(): void {
    if (!this.videoCallService.localTracks.videoTrack) {
      console.warn("‚ö† –í–∏–¥–µ–æ—Ç—Ä–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 500ms...");
      setTimeout(() => this.initLocalVideo(), 500);
      return;
    }

    console.log("‚úÖ –í–∏–¥–µ–æ—Ç—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ!");
    console.log("üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", {
      hasLocalVideo: !!(this.localVideo && this.localVideo.nativeElement),
      hasLocalVideoPip: !!(this.localVideoPip && this.localVideoPip.nativeElement),
      remoteUsersCount: this.remoteUserIds.length,
      isTeacher: this.isTeacher()
    });
    
    if (this.isTeacher()) {
      // –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨: –¢–æ–ª—å–∫–æ –≤ —Å–µ—Ç–∫–µ, –ù–ï –≤ PiP (–∫–∞–∫ –≤ Teams)
      if (this.localVideo && this.localVideo.nativeElement) {
        this.videoCallService.localTracks.videoTrack.play(this.localVideo.nativeElement);
        console.log("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –≤ —Å–µ—Ç–∫–µ (–±–µ–∑ PiP)");
      }
      
      // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ PiP - –æ–Ω –≤—Å–µ–≥–¥–∞ –≤ —Å–µ—Ç–∫–µ
    } else {
      // –°–¢–£–î–ï–ù–¢: –í –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –µ—Å–ª–∏ –æ–¥–∏–Ω, –≤ PiP –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ
      if (this.remoteUserIds.length === 0) {
        // –°—Ç—É–¥–µ–Ω—Ç –æ–¥–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
        if (this.localVideo && this.localVideo.nativeElement) {
          this.videoCallService.localTracks.videoTrack.play(this.localVideo.nativeElement);
          console.log("‚úÖ –°—Ç—É–¥–µ–Ω—Ç: –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ (–æ–¥–∏–Ω)");
        }
      } else {
        // –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ PiP
        if (this.localVideoPip && this.localVideoPip.nativeElement) {
          this.videoCallService.localTracks.videoTrack.play(this.localVideoPip.nativeElement);
          console.log("‚úÖ –°—Ç—É–¥–µ–Ω—Ç: –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –≤ PiP");
        }
      }
    }
  }

  get videoWidth(): number {
    return this.videoCallService.videoWidth;
  }

  get videoHeight(): number {
    return this.videoCallService.videoHeight;
  }

  showVideoControls(): void {
    this.videoCallService.showControls = true;
    clearTimeout(this.videoCallService.controlTimeout);
    this.videoCallService.controlTimeout = setTimeout(() => {
      this.videoCallService.showControls = false;
    }, 3000);
  }

  hideVideoControls(): void {
    this.videoCallService.controlTimeout = setTimeout(() => {
      this.videoCallService.showControls = false;
    }, 3000);
  }

  get showControls(): boolean {
    return this.videoCallService.showControls;
  }

  get callActive(): boolean {
    return this.videoCallService.callActive;
  }

  toggleCall(): void {
    this.videoCallService.toggleCall();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  initiateCall(targetUserId: string): void {
    const currentUserId = this.videoCallService.userId;
    if (currentUserId) {
      console.log(`üìû –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫ –æ—Ç ${currentUserId} –∫ ${targetUserId}`);
      this.wsService.initiateCall(targetUserId, currentUserId);
    } else {
      console.error('‚ùå –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  startResize(event: MouseEvent): void {
    event.preventDefault();

    console.log("üîÑ –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ");

    const startX = event.clientX;
    const startY = event.clientY;

    const onMouseMove = (moveEvent: MouseEvent) => {
      const deltaX = moveEvent.clientX - startX;
      const deltaY = moveEvent.clientY - startY;

      this.videoCallService.resizeVideo(deltaX, deltaY);
    };

    const onMouseUp = () => {
      console.log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ");
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
    };

    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
  }

  //screensharing
  isScreenSharing = false;

  async toggleScreenSharing() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
    const isSupported = await this.videoCallService.checkSystemSupport();
    if (!isSupported) {
      alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —ç–∫—Ä–∞–Ω–∞!");
      return;
    }

    if (this.isScreenSharing) {
      await this.videoCallService.stopScreenSharing();
    } else {
      await this.videoCallService.startScreenSharing();
      this.videoCallService.startTrackMonitoring(); // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–∫–∞
    }

    this.isScreenSharing = !this.isScreenSharing;
  }

  startVideoDrag(event: MouseEvent) {
    event.preventDefault();

    const elem = ((event.currentTarget as HTMLElement).closest('.video-call-container')) as HTMLElement;
    if (!elem) return;

    const startX = event.clientX;
    const startY = event.clientY;
    const startLeft = elem.offsetLeft;
    const startTop = elem.offsetTop;

    const onMouseMove = (moveEvent: MouseEvent) => {
      const deltaX = moveEvent.clientX - startX;
      const deltaY = moveEvent.clientY - startY;

      let newLeft = startLeft + deltaX;
      let newTop = startTop + deltaY;

      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤—ã—Å–æ—Ç–µ –æ–∫–Ω–∞
      const videoWidth = elem.offsetWidth;
      const videoHeight = elem.offsetHeight;
      const maxLeft = window.innerWidth - videoWidth;
      const maxTop = window.innerHeight - videoHeight;

      // üîí –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
      newLeft = Math.max(0, Math.min(newLeft, maxLeft));
      newTop = Math.max(0, Math.min(newTop, maxTop));

      elem.style.left = `${newLeft}px`;
      elem.style.top = `${newTop}px`;
    };


    const onMouseUp = () => {
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
    };

    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
  }

  // === TEAMS-LIKE UX –ú–ï–¢–û–î–´ ===

  isTeacher(): boolean {
    const currentUser = this.authService.getCurrentUser();
    return currentUser?.currentRole === 'teacher';
  }

  isTeacherUID(uid: string): boolean {
    const currentUser = this.authService.getCurrentUser();
    return uid === currentUser?.id && currentUser?.currentRole === 'teacher';
  }

  getGridLayout(): string {
    const count = this.remoteUserIds.length;
    return Math.min(count, 9).toString();
  }

  getTeacherGridLayout(): string {
    // –£—á–∏—Ç–µ–ª—å + —Å—Ç—É–¥–µ–Ω—Ç—ã (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —É—á–∏—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è)
    const totalCount = this.remoteUserIds.length + 1;
    return Math.min(totalCount, 9).toString();
  }

  getTeacherUID(): string | null {
    return this.remoteUserIds.find(uid => this.isTeacherUID(uid)) || null;
  }

  getParticipantDisplayName(uid: string): string {
    const userMap: {[key: string]: string} = {
      'teacher1': '–£—á–∏—Ç–µ–ª—å –ò–≤–∞–Ω',
      'student1': '–°—Ç—É–¥–µ–Ω—Ç –ü–µ—Ç—Ä',
      'student2': '–°—Ç—É–¥–µ–Ω—Ç –ú–∞—Ä–∏—è',
      'student3': '–°—Ç—É–¥–µ–Ω—Ç –ê–ª–∏—Å–∞',
      'student4': '–°—Ç—É–¥–µ–Ω—Ç –ù–∏–∫–∏—Ç–∞'
    };
    return userMap[uid] || uid;
  }

  getTeacherName(): string {
    const teacherUID = this.remoteUserIds.find(uid => this.isTeacherUID(uid));
    return teacherUID ? this.getParticipantDisplayName(teacherUID) : '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å';
  }

  getOtherStudents(): string[] {
    return this.remoteUserIds.filter(uid => !this.isTeacherUID(uid));
  }

  trackByStudentId(index: number, studentId: string): string {
    return studentId;
  }

  private checkHTTPSRequirement(): void {
    const isSecure = window.location.protocol === 'https:' || 
                    window.location.hostname === 'localhost' || 
                    window.location.hostname === '127.0.0.1';
    
    if (isSecure) {
      console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è AgoraRTC:', window.location.protocol);
    }
    // –£–±—Ä–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è HTTP —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  }

  private handleVideoCallError(error: any): void {
    console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', error);
    
    if (error.code === 'WEB_SECURITY_RESTRICT') {
      console.error('üîí –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–∞');
      console.error('üí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –∏–ª–∏ localhost');
    } else if (error.code === 'NOT_SUPPORTED') {
      console.error('üö´ –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
      console.error('üí° –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä');
    } else {
      console.error('üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è PiP
  startDrag(event: MouseEvent): void {
    if (event.target instanceof HTMLElement && event.target.classList.contains('drag-handle')) {
      event.preventDefault();
      this.isDragging = true;
      this.dragOffset = {
        x: event.clientX - this.pipPosition.x,
        y: event.clientY - this.pipPosition.y
      };
      
      document.addEventListener('mousemove', this.onDrag);
      document.addEventListener('mouseup', this.stopDrag);
    }
  }

  onDrag = (event: MouseEvent): void => {
    if (this.isDragging) {
      const container = document.querySelector('app-lesson-material');
      if (container) {
        const containerRect = container.getBoundingClientRect();
        const pipWidth = 200;
        const pipHeight = 150;
        
        let newX = event.clientX - this.dragOffset.x;
        let newY = event.clientY - this.dragOffset.y;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        newX = Math.max(0, Math.min(newX, containerRect.width - pipWidth));
        newY = Math.max(0, Math.min(newY, containerRect.height - pipHeight));
        
        this.pipPosition = { x: newX, y: newY };
      }
    }
  }

  stopDrag = (): void => {
    this.isDragging = false;
    document.removeEventListener('mousemove', this.onDrag);
    document.removeEventListener('mouseup', this.stopDrag);
  }
}
