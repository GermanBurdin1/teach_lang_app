import { Component, OnInit, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';
import AgoraRTC, { IAgoraRTCClient, ILocalTrack, IRemoteVideoTrack, IRemoteAudioTrack, ILocalVideoTrack, ILocalAudioTrack } from 'agora-rtc-sdk-ng';
import { TokenService } from '../../../services/token.service';

@Component({
  selector: 'app-video-call',
  templateUrl: './video-call.component.html',
  styleUrls: ['./video-call.component.scss']
})
export class VideoCallComponent implements OnInit {
  @ViewChild('localVideo') localVideo!: ElementRef<HTMLVideoElement>;

  agoraClient: IAgoraRTCClient = AgoraRTC.createClient({ mode: 'rtc', codec: 'vp8' });
  localTracks: {
    videoTrack: ILocalVideoTrack | null,
    audioTrack: ILocalAudioTrack | null
  } = {
    videoTrack: null,
    audioTrack: null
  };

  remoteUsers: { [uid: string]: { videoTrack: IRemoteVideoTrack | null, audioTrack: IRemoteAudioTrack | null } } = {};
  appId = 'a020b374553e4fac80325223fba38531'; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π App ID
  channelName = 'rtc_token';
  token = '';
  remoteVideos: ElementRef<HTMLVideoElement>[] = [];
  callActive: boolean = false;

  @Output() callStarted = new EventEmitter<void>();
  @Output() callEnded = new EventEmitter<void>();

  constructor(private tokenService: TokenService) {}

  ngOnInit(): void {
    console.log('üìπ VideoCallComponent –∑–∞–≥—Ä—É–∂–µ–Ω');
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
  .then(stream => {
    console.log('‚úÖ –ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:', stream);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–º–µ—Ä–µ:', error);
  });
}



  // –§—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –∏–∑–≤–Ω–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
  public async startCall(): Promise<void> {
    try {
      console.log('üîµ startCall() –≤—ã–∑–≤–∞–Ω');

      this.token = await this.tokenService.getToken(this.channelName);
      console.log('üîµ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', this.token);

      await this.joinChannel();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É');

      this.callStarted.emit();
      this.callActive = true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–≤–æ–Ω–∫–∞:', error);
    }
  }

  public async toggleCall(): Promise<void> {
    if (this.callActive) {
      await this.endCall();
    } else {
      await this.startCall();
    }
  }

  public async endCall(): Promise<void> {
    try {
      console.log('üî¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫...');

      this.localTracks.videoTrack?.stop();
      this.localTracks.videoTrack?.close();
      this.localTracks.audioTrack?.stop();
      this.localTracks.audioTrack?.close();

      this.agoraClient.remoteUsers.forEach(user => {
        this.agoraClient.unsubscribe(user);
      });

      await this.agoraClient.leave();
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª');

      this.callEnded.emit();
      this.callActive = false; // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞

      // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ—ç–ª–µ–º–µ–Ω—Ç—ã
      if (this.localVideo.nativeElement) {
        this.localVideo.nativeElement.srcObject = null;
      }
      document.querySelectorAll('video[id^="video_"]').forEach(video => video.remove());

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
    }
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
  private async joinChannel(): Promise<void> {
    try {
        if (!this.token) {
            throw new Error('‚ùå Token is not available for joining channel.');
        }

        console.log('üîµ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É:', this.channelName);

        this.localTracks.audioTrack = await AgoraRTC.createMicrophoneAudioTrack();
        console.log('üéôÔ∏è –ê—É–¥–∏–æ—Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.');

        this.localTracks.videoTrack = await AgoraRTC.createCameraVideoTrack();
        console.log('üìπ –í–∏–¥–µ–æ—Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', this.localTracks.videoTrack);

        if (this.localVideo.nativeElement) {
            console.log('üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç–æ.');
            this.localTracks.videoTrack.play(this.localVideo.nativeElement);
        }

        console.log('üîµ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ –∫–∞–Ω–∞–ª—É Agora:', this.channelName);
        await this.agoraClient.join(this.appId, this.channelName, this.token);
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É.');

        console.log('üì° –ü—É–±–ª–∏–∫—É—é –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫...');
        await this.agoraClient.publish(Object.values(this.localTracks).filter(track => track !== null) as ILocalTrack[]);
        console.log('‚úÖ –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.');

        this.agoraClient.on('user-published', async (user, mediaType) => {
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.uid} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –º–µ–¥–∏–∞: ${mediaType}`);
            await this.agoraClient.subscribe(user, mediaType);
            console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${mediaType} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.uid} —É—Å–ø–µ—à–Ω–∞.`);

            if (mediaType === 'video' && user.videoTrack) {
                console.log(`üìπ –í–∏–¥–µ–æ—Ç—Ä–µ–∫ –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.uid}, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...`);
                const remoteVideoTrack = user.videoTrack;

                const videoElement = document.createElement('video');
                videoElement.id = `video_${user.uid}`;
                document.body.appendChild(videoElement);
                remoteVideoTrack.play(videoElement);

                this.remoteVideos.push(new ElementRef(videoElement));
            }

            if (mediaType === 'audio' && user.audioTrack) {
                console.log(`üîä –ê—É–¥–∏–æ—Ç—Ä–µ–∫ –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.uid}, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...`);
                user.audioTrack.play();
            }
        });

        this.agoraClient.on('user-unpublished', (user) => {
            console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.uid} –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é.`);
            const index = this.remoteVideos.findIndex(x => x.nativeElement.id === `video_${user.uid}`);
            if (index !== -1) {
                console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.uid}`);
                this.remoteVideos[index].nativeElement.remove();
                this.remoteVideos.splice(index, 1);
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–∞–Ω–∞–ª—É:', error);
    }
}


  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞
  private async leaveChannel(): Promise<void> {
    this.localTracks.videoTrack?.close();
    this.localTracks.audioTrack?.close();

    this.agoraClient.remoteUsers.forEach((user) => {
      this.agoraClient.unsubscribe(user);
    });
    await this.agoraClient.leave();

    console.log('Client leaves channel');
  }
}
