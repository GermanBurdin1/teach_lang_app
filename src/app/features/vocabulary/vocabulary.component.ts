import { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { LexiconService } from '../../services/lexicon.service';
import { TranslationService } from '../../services/translation.service';

interface WordCard {
  id: number;
  word: string;
  translations: string[];
  userInput: string;
  flipped: boolean;
  hintVisible: boolean;
  isCorrect: boolean | null;
  hintIndex: number;
  showTranslation: boolean;
  status: 'learned' | 'repeat' | 'error' | null;
  type: 'word' | 'expression';
  createdAt: number;
  galaxy: string;
  subtopic: string;
}

@Component({
  selector: 'app-vocabulary',
  templateUrl: './vocabulary.component.html',
  styleUrls: ['./vocabulary.component.css'],
})
export class VocabularyComponent implements OnInit {

  @Input() currentGalaxy: string = '';
  @Input() currentSubtopic: string = '';
  words: WordCard[] = [];
  expressions: WordCard[] = [];
  newWord: string = '';
  newTranslation: string = '';
  showHint: boolean = true; // –ü–æ–¥—Å–∫–∞–∑–∫–∞ "–ö–ª–∏–∫–Ω–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥"
  sortBy: string = 'all';
  sortOrderWords: 'asc' | 'desc' = 'desc';
  sortOrderExpressions: 'asc' | 'desc' = 'desc';
  newWordType: 'word' | 'expression' = 'word';
  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞
  showInputFields: boolean = false;
  wordsPerPage = 10;
  expressionsPerPage = 10;
  currentWordsPage = 1;
  currentExpressionsPage = 1;
  viewMode: 'cards' | 'list' = 'cards'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏
  filterType: 'all' | 'word' | 'expression' = 'all';
  showAddCardModal: boolean = false;
  editingCard: WordCard | null = null;
  manualTranslation: string = '';
  sourceLang: 'ru' | 'fr' | 'en' = 'fr';
  targetLang: 'ru' | 'fr' | 'en' = 'ru';
  isManualTranslation: boolean = false;
  isAutoTranslation: boolean = false;

  constructor(private route: ActivatedRoute, private lexiconService: LexiconService, private translationService: TranslationService) { }

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      console.log("–≤ –ø–∏–∑–¥—É –±–ª—è—Ç—å!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
      this.currentGalaxy = params.get('galaxy') || '';
      this.currentSubtopic = params.get('subtopic') || '';

      console.log('üìå Galaxy from route:', this.currentGalaxy);
      console.log('üìå Subtopic from route:', this.currentSubtopic);

      // üîÅ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å backend
      this.lexiconService.getWordsByGalaxyAndSubtopic(this.currentGalaxy, this.currentSubtopic)
        .subscribe({

          next: (data) => {
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç backend:', data);
            const enriched = data.map(card => {
              const translations = (card.translations?.map(t => t.target) ?? []);


              return {
                ...card,
                id: card.id ?? Date.now(),
                translations,
                userInput: '',
                flipped: false,
                hintVisible: true,
                isCorrect: null,
                hintIndex: 0,
                showTranslation: false,
                status: card.status ?? null,
                createdAt: card.createdAt ?? Date.now(),
              };
            });

            this.words = enriched.filter(item => item.type === 'word');
            this.expressions = enriched.filter(item => item.type === 'expression');
            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            this.saveToLocalStorage(enriched);

            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å backend:', enriched);
          },
          error: (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å backend. –ü—Ä–æ–±—É–µ–º localStorage:', err);

            const updated = this.loadFromLocalStorage();
            if (!updated) return;

            const relevant = updated.filter(
              item => item.galaxy === this.currentGalaxy && item.subtopic === this.currentSubtopic
            );
            this.words = relevant.filter(item => item.type === 'word');
            this.expressions = relevant.filter(item => item.type === 'expression');

            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage:', relevant);
          }
        });
    });
  }


  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–π –º–∞—Å—Å–∏–≤)
  loadWords(): void {
    const rawItems: WordCard[] = [
      // –ö–†–£–ì–û–ó–û–†
      { id: 1, word: '—Ä–µ–≤–æ–ª—é—Ü–∏—è', translations: ['revolution'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ò—Å—Ç–æ—Ä–∏—è', ...this.defaultCard() },
      { id: 2, word: '–∏–º–ø–µ—Ä–∏—è', translations: ['empire'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ò—Å—Ç–æ—Ä–∏—è', ...this.defaultCard() },
      { id: 3, word: '–∞—Ç–æ–º', translations: ['atom'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ù–∞—É–∫–∞', ...this.defaultCard() },
      { id: 4, word: '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', translations: ['experiment'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ù–∞—É–∫–∞', ...this.defaultCard() },
      { id: 5, word: '–ø—å–µ—Å–∞', translations: ['play (theater)'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', ...this.defaultCard() },
      { id: 6, word: '–ø–∞–ª–∏—Ç—Ä–∞', translations: ['palette'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', ...this.defaultCard() },
      { id: 7, word: '–º—ã—Å–ª–∏—Ç–µ–ª—å', translations: ['thinker'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', ...this.defaultCard() },
      { id: 8, word: '–≤–æ–ø—Ä–æ—Å –±—ã—Ç–∏—è', translations: ['question of being'], type: 'expression', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', ...this.defaultCard() },
      { id: 9, word: '–∏–Ω–Ω–æ–≤–∞—Ü–∏—è', translations: ['innovation'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', ...this.defaultCard() },
      { id: 10, word: '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', translations: ['artificial intelligence'], type: 'expression', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', ...this.defaultCard() },
      { id: 11, word: '–Ω–∞—Å–ª–µ–¥–∏–µ', translations: ['heritage'], type: 'word', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ö—É–ª—å—Ç—É—Ä–∞', ...this.defaultCard() },
      { id: 12, word: '—Ç—Ä–∞–¥–∏—Ü–∏–∏ –Ω–∞—Ä–æ–¥–∞', translations: ['folk traditions'], type: 'expression', galaxy: '–ö—Ä—É–≥–æ–∑–æ—Ä', subtopic: '–ö—É–ª—å—Ç—É—Ä–∞', ...this.defaultCard() },

      // –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–í–Ø–ó–ò
      { id: 13, word: '–º–∞–º–∞', translations: ['mom'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–°–µ–º—å—è', ...this.defaultCard() },
      { id: 14, word: '–±—Ä–∞—Ç', translations: ['brother'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–°–µ–º—å—è', ...this.defaultCard() },
      { id: 15, word: '–ª—É—á—à–∏–π –¥—Ä—É–≥', translations: ['best friend'], type: 'expression', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–î—Ä—É–∑—å—è', ...this.defaultCard() },
      { id: 16, word: '–¥—Ä—É–∂–∏—Ç—å', translations: ['be friends'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–î—Ä—É–∑—å—è', ...this.defaultCard() },
      { id: 17, word: '–Ω–∞—á–∞–ª—å–Ω–∏–∫', translations: ['boss'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–†–∞–±–æ—Ç–∞', ...this.defaultCard() },
      { id: 18, word: '—Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å', translations: ['workflow'], type: 'expression', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–†–∞–±–æ—Ç–∞', ...this.defaultCard() },
      { id: 19, word: '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–æ–º', translations: ['share a post'], type: 'expression', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', ...this.defaultCard() },
      { id: 20, word: '–ø–æ–¥–ø–∏—Å—á–∏–∫', translations: ['follower'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', ...this.defaultCard() },
      { id: 21, word: '–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥', translations: ['have a dialogue'], type: 'expression', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 31, word: '–∫–æ–Ω—Ç–∞–∫—Ç', translations: ['contact'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 32, word: '–¥–∏–∞–ª–æ–≥', translations: ['dialogue'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 33, word: '–æ–±—â–µ–Ω–∏–µ', translations: ['communication'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 34, word: '—Ä–∞–∑–≥–æ–≤–æ—Ä', translations: ['conversation'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 35, word: '–≤–æ–ø—Ä–æ—Å', translations: ['question'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 36, word: '–æ—Ç–≤–µ—Ç', translations: ['answer'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 37, word: '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ', translations: ['discussion'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 38, word: '–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ', translations: ['statement'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 39, word: '–Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ', translations: ['misunderstanding'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 40, word: '–∞—Ä–≥—É–º–µ–Ω—Ç', translations: ['argument'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 41, word: '–º–Ω–µ–Ω–∏–µ', translations: ['opinion'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 42, word: '–ø–µ—Ä–µ–ø–∏—Å–∫–∞', translations: ['correspondence'], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },

      // –†–ê–ë–û–¢–ê –ò –ö–ê–†–¨–ï–†–ê
      { id: 23, word: '–≤–∞–∫–∞–Ω—Å–∏—è', translations: ['job opening'], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–í–∞–∫–∞–Ω—Å–∏–∏', ...this.defaultCard() },
      { id: 24, word: '—Ä–µ–∑—é–º–µ', translations: ['resume'], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–í–∞–∫–∞–Ω—Å–∏–∏', ...this.defaultCard() },
      { id: 25, word: '–∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', translations: ['communication skills'], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–ù–∞–≤—ã–∫–∏', ...this.defaultCard() },
      { id: 26, word: '—Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏', translations: ['solve tasks'], type: 'expression', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–ù–∞–≤—ã–∫–∏', ...this.defaultCard() },
      { id: 27, word: '–æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞', translations: ['experience description'], type: 'expression', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–†–µ–∑—é–º–µ', ...this.defaultCard() },
      { id: 28, word: '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', translations: ['education'], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–†–µ–∑—é–º–µ', ...this.defaultCard() },
      { id: 29, word: '–≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏', translations: ['interview question'], type: 'expression', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', ...this.defaultCard() },
      { id: 30, word: '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', translations: ['employer'], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', ...this.defaultCard() }
    ];

    const enrichedItems = rawItems.map(item => ({
      ...item,
      type: item.type,
      userInput: '',
      flipped: false,
      hintVisible: true,
      isCorrect: null,
      hintIndex: 0,
      status: null,
      showTranslation: false
    }));

    this.saveToLocalStorage(enrichedItems);
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ –∏ –ø–æ–¥—Ç–µ–º–µ
    const relevant = enrichedItems.filter(
      item => item.galaxy === this.currentGalaxy && item.subtopic === this.currentSubtopic
    );
    this.words = relevant.filter(item => item.type === 'word');
    this.expressions = relevant.filter(item => item.type === 'expression');

  }

  defaultCard() {
    return {
      userInput: '',
      flipped: false,
      hintVisible: true,
      isCorrect: null,
      hintIndex: 0,
      showTranslation: false,
      status: null,
      createdAt: Date.now()
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  addItem(): void {
    if (!this.newWord.trim()) return;

    const newCard: WordCard = {
      id: Date.now(),
      createdAt: Date.now(),
      word: this.newWord.trim(),
      translations: [this.newTranslation],
      userInput: '',
      flipped: false,
      hintVisible: true,
      isCorrect: null,
      hintIndex: 0,
      showTranslation: false,
      status: null,
      type: this.newWordType,
      galaxy: this.currentGalaxy,
      subtopic: this.currentSubtopic
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ backend:', {
      word: newCard.word,
      galaxy: newCard.galaxy,
      subtopic: newCard.subtopic,
      type: newCard.type
    });

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend
    this.lexiconService.addWord({
      word: newCard.word,
      galaxy: newCard.galaxy!,
      subtopic: newCard.subtopic!,
      type: newCard.type
    }).subscribe({
      next: (res) => {
        console.log('‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î:', res);
      },
      error: (err) => {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–î. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', err);
      }
    });

    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ UI
    if (this.newWordType === 'word') {
      this.words.unshift(newCard);
    } else {
      this.expressions.unshift(newCard);
    }

    this.saveToLocalStorage();

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
    this.newWord = '';
    this.newTranslation = '';

    this.closeAddCardModal();
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  deleteWord(id: number): void {
    this.words = this.words.filter(word => word.id !== id);
  }

  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ) ‚Äî —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞
  openAddCardModal(type: 'word' | 'expression'): void {
    this.newWordType = type;
    this.showAddCardModal = true;
  }

  closeAddCardModal(): void {
    this.showAddCardModal = false;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  deleteItem(id: number, type: 'word' | 'expression'): void {
    if (type === 'word') {
      this.words = this.words.filter(word => word.id !== id);
    } else {
      this.expressions = this.expressions.filter(expression => expression.id !== id);
    }
    this.saveToLocalStorage();
  }

  // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
  flipCard(card: WordCard): void {
    if (!card.translations[0] || card.translations[0] === '...') {
      this.openTranslationForm(card); // <-- –ø–æ–∫–∞–∂–µ–º —Ñ–æ—Ä–º—É
      return;
    }

    card.flipped = !card.flipped;
    card.hintVisible = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
  checkTranslation(card: WordCard): void {
    if (card.userInput.trim().toLowerCase() === card.translations[0].toLowerCase()) {
      card.isCorrect = true;
      card.status = 'learned';
      this.lexiconService.updateWordStatus(card.id, 'learned').subscribe();
      // ...
    } else {
      card.isCorrect = false;
      card.status = 'error'; // üëà –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      this.lexiconService.updateWordStatus(card.id, 'error').subscribe();
    }
    this.saveToLocalStorage();
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  sortWords(): void {
    const allItems = this.loadFromLocalStorage() || [];

    const relevantItems = allItems.filter(
      card =>
        card.galaxy === this.currentGalaxy &&
        card.subtopic === this.currentSubtopic
    );

    let filtered = relevantItems;

    switch (this.sortBy) {
      case 'repeat':
        filtered = relevantItems.filter(card => card.status === 'repeat');
        break;
      case 'learned':
        filtered = relevantItems.filter(card => card.status === 'learned');
        break;
      case 'untranslated':
        filtered = relevantItems.filter(card => !card.translations[0] || card.translations[0] === '...');
        break;
      case 'hardest':
        filtered = relevantItems.filter(card => card.status === 'error');
        break;
      case 'all':
      default:
        // –Ω–∏—á–µ–≥–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        break;
    }

    this.words = filtered
      .filter(card => card.type === 'word')
      .sort((a, b) =>
        this.sortOrderWords === 'desc'
          ? b.createdAt - a.createdAt
          : a.createdAt - b.createdAt
      );

    this.expressions = filtered
      .filter(card => card.type === 'expression')
      .sort((a, b) =>
        this.sortOrderExpressions === 'desc'
          ? b.createdAt - a.createdAt
          : a.createdAt - b.createdAt
      );
  }

  toggleSortOrderWords(): void {
    this.sortOrderWords = this.sortOrderWords === 'desc' ? 'asc' : 'desc';
    this.sortWords();
  }

  toggleSortOrderExpressions(): void {
    this.sortOrderExpressions = this.sortOrderExpressions === 'desc' ? 'asc' : 'desc';
    this.sortWords();
  }

  getAllItems(): WordCard[] {
    return [...this.words, ...this.expressions];
  }


  getHint(card: WordCard): string {
    if (!card.translations[0] || card.translations[0] === '...') {
      return '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥';
    }

    const full = card.translations[0];
    const visible = full
      .slice(0, card.hintIndex ?? 0)
      .split('')
      .join(' ');
    const hidden = full
      .slice(card.hintIndex ?? 0)
      .replace(/./g, '_')
      .split('')
      .join(' ');
    return `${visible} ${hidden}`.trim();
  }


  revealNextHint(card: WordCard): void {
    if ((card.hintIndex ?? 0) < card.translations[0].length - 1) {
      card.hintIndex = (card.hintIndex ?? 0) + 1;
    } else {
      card.showTranslation = true;
    }
  }

  showFullTranslation(card: WordCard): void {
    card.showTranslation = true;
  }

  ///////////////////////////////////////////–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤

  markAsLearned(card: WordCard): void {
    card.status = 'learned';
    this.lexiconService.updateWordStatus(card.id, 'learned').subscribe({
      next: () => console.log('üìò –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ "–≤—ã—É—á–µ–Ω–æ"'),
      error: err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err)
    });
    this.saveToLocalStorage();
  }

  markForRepetition(card: WordCard): void {
    card.status = 'repeat';
    this.lexiconService.updateWordStatus(card.id, 'repeat').subscribe({
      next: () => console.log('üìò –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å"'),
      error: err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err)
    });
    this.saveToLocalStorage();
  }


  saveToLocalStorage(cards?: WordCard[]): void {
    const allItems = cards ?? [...this.words, ...this.expressions];
    localStorage.setItem('vocabulary_cards', JSON.stringify(allItems));
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ localStorage:', allItems); // <--- –¥–æ–±–∞–≤—å —ç—Ç–æ!
  }

  loadFromLocalStorage(): WordCard[] | null {
    const data = localStorage.getItem('vocabulary_cards');
    if (!data) return null;

    const parsed = JSON.parse(data);
    return parsed.map((item: any) => ({
      ...item,
      createdAt: item.createdAt || Date.now() // <-- –¥–æ–±–∞–≤–∏–º –¥–∞—Ç—É, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
    }));
  }


  /////////////////////////////////////////////////////
  get paginatedWords(): WordCard[] {
    const start = (this.currentWordsPage - 1) * this.wordsPerPage;
    return this.words.slice(start, start + this.wordsPerPage);
  }

  get paginatedExpressions(): WordCard[] {
    const start = (this.currentExpressionsPage - 1) * this.expressionsPerPage;
    return this.expressions.slice(start, start + this.expressionsPerPage);
  }

  get totalWords(): number {
    return this.words.length;
  }

  get totalExpressions(): number {
    return this.expressions.length;
  }

  get wordsRangeLabel(): string {
    const start = (this.currentWordsPage - 1) * this.wordsPerPage + 1;
    const end = Math.min(this.currentWordsPage * this.wordsPerPage, this.totalWords);
    return `–ö–∞—Ä—Ç–æ—á–∫–∏: ${start}‚Äì${end} –∏–∑ ${this.totalWords}`;
  }

  get hasNextWordsPage(): boolean {
    return this.currentWordsPage * this.wordsPerPage < this.totalWords;
  }

  get hasPrevWordsPage(): boolean {
    return this.currentWordsPage > 1;
  }

  get expressionsPaginationLabel(): string {
    const total = this.expressions.length;
    const start = (this.currentExpressionsPage - 1) * this.expressionsPerPage + 1;
    const end = Math.min(start + this.expressionsPerPage - 1, total);
    return `–í—ã—Ä–∞–∂–µ–Ω–∏—è: ${start}‚Äì${end} –∏–∑ ${total}`;
  }

  get hasNextExpressionsPage(): boolean {
    return this.currentExpressionsPage * this.expressionsPerPage < this.expressions.length;
  }

  get hasPrevExpressionsPage(): boolean {
    return this.currentExpressionsPage > 1;
  }

  get filteredWords(): WordCard[] {
    return this.filterType === 'all' || this.filterType === 'word' ? this.words : [];
  }

  get filteredExpressions(): WordCard[] {
    return this.filterType === 'all' || this.filterType === 'expression' ? this.expressions : [];
  }


  changeWordsPage(delta: number): void {
    const maxPage = Math.ceil(this.words.length / this.wordsPerPage);
    this.currentWordsPage = Math.max(1, Math.min(this.currentWordsPage + delta, maxPage));
  }

  changeExpressionsPage(delta: number): void {
    const maxPage = Math.ceil(this.expressions.length / this.expressionsPerPage);
    this.currentExpressionsPage = Math.max(1, Math.min(this.currentExpressionsPage + delta, maxPage));
  }

  resetToPractice(card: WordCard): void {
    card.status = null;
    card.userInput = '';
    card.isCorrect = null;
    card.hintIndex = 0;
    card.showTranslation = false;
    card.flipped = false; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
    card.hintVisible = true; // —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å ¬´–ö–ª–∏–∫–Ω–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥¬ª
    this.saveToLocalStorage();
  }


  //–ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –∏/–∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  getWordAndExpressionCount(): string {
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    const relevant = all.filter(item =>
      item.galaxy === this.currentGalaxy &&
      item.subtopic === this.currentSubtopic
    );

    const wordCount = relevant.filter(item => item.type === 'word').length;
    const exprCount = relevant.filter(item => item.type === 'expression').length;

    return `${wordCount} —Å–ª–æ–≤ / ${exprCount} –≤—ã—Ä–∞–∂–µ–Ω–∏–π`;
  }

  //–¥–ª—è –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö
  openTranslationForm(card: WordCard): void {
    this.editingCard = card;
    this.manualTranslation = '';
  }

  saveManualTranslation(): void {
    if (this.editingCard && this.manualTranslation.trim()) {
      const translationText = this.manualTranslation.trim();
      // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ backend
      this.translationService.saveTranslation({
        source: "manual",
        sourceText: this.editingCard.word,
        translation: translationText,
        sourceLang: this.sourceLang,
        targetLang: this.targetLang,
        wordId: this.editingCard.id,
      }).subscribe({
        next: (res) => {
          console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î (—Ä—É—á–Ω–æ–π):', res);
          this.editingCard!.translations[0] = translationText;
          this.saveToLocalStorage();

          this.editingCard = null;
          this.manualTranslation = '';
        },
        error: (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:', err);
          alert('–£–ø—Å üòì –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
        }
      });
    }
  }


  cancelTranslationEdit(): void {
    this.editingCard = null;
    this.manualTranslation = '';
  }

  detectLanguage(word: string): 'ru' | 'fr' | 'en' {
    if (/^[–∞-—è—ë\s]+$/i.test(word)) return 'ru';
    if (/^[a-z\s]+$/i.test(word)) return 'en';
    if (/^[a-z√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø√±√¶≈ì\s\-']+$/i.test(word)) return 'fr';
    return 'en'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  requestTranslation(card: WordCard | null = null): void {
    if (this.newWord.trim() === '') return;

    const detectedLang = this.detectLanguage(this.newWord);

    if (detectedLang !== this.sourceLang) {
      const langNames = { ru: '—Ä—É—Å—Å–∫–∏–π', fr: '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', en: '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' };
      const confirmed = confirm(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å —è–∑—ã–∫–∞: ${langNames[this.sourceLang]}, –Ω–æ —Å–ª–æ–≤–æ "${this.newWord}" –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞ ${langNames[detectedLang]}. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫ –Ω–∞ ${langNames[detectedLang]}?`
      );
      if (confirmed) {
        this.sourceLang = detectedLang;
      } else {
        return;
      }
    }

    this.translationService.requestTranslation(this.newWord, this.sourceLang, this.targetLang).subscribe({
      next: (res) => {
        if (res.translations.length) {
          this.newTranslation = res.translations[0];
          this.isAutoTranslation = true;
          this.isManualTranslation = false;

          this.showConfetti();

          console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ ${res.from}:`, res.translations);

          // üëâ –î–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
          const newCard: WordCard = {
            id: Date.now(),
            createdAt: Date.now(),
            word: this.newWord.trim(),
            translations: [this.newTranslation],
            userInput: '',
            flipped: false,
            hintVisible: true,
            isCorrect: null,
            hintIndex: 0,
            showTranslation: false,
            status: null,
            type: this.newWordType,
            galaxy: this.currentGalaxy,
            subtopic: this.currentSubtopic
          };

          // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend
          this.lexiconService.addWord({
            word: newCard.word,
            galaxy: newCard.galaxy!,
            subtopic: newCard.subtopic!,
            type: newCard.type
          }).subscribe({
            next: (res) => console.log('‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î:', res),
            error: (err) => console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–î. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', err)
          });

          if (this.newWordType === 'word') {
            this.words.unshift(newCard);
          } else {
            this.expressions.unshift(newCard);
          }

          this.saveToLocalStorage();
          this.newWord = '';
          this.newTranslation = '';
          this.closeAddCardModal(); // ‚úÖ –ó–∞–∫—Ä–æ–µ–º –º–æ–¥–∞–ª–∫—É
        }
      },
      error: (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:', err);
      }
    });
  }

  showConfetti(): void {
    const confettiScript = document.createElement('script');
    confettiScript.src = 'https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js';
    confettiScript.onload = () => {
      (window as any).confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      });
    };
    document.body.appendChild(confettiScript);
  }

  onManualTranslationInput(): void {
    if (this.newTranslation.trim()) {
      this.isManualTranslation = true;
      this.isAutoTranslation = false;
    } else {
      this.isManualTranslation = false;
    }
  }

}
