import { Component, Input, OnInit } from '@angular/core';
import { Title, Meta } from '@angular/platform-browser';
import { ActivatedRoute } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { LexiconService } from '../../services/lexicon.service';
import { TranslationService } from '../../services/translation.service';
import * as Grammar from './models/grammar-data.model';
import { GrammarData } from './models/grammar-data.model';
import { AddWordDialogComponent, AddWordDialogData, AddWordDialogResult } from './add-word-dialog.component';

interface VocabularyItem {
  id?: string;
  word: string;
  translation: string;
  createdAt: number;
  [key: string]: unknown;
}

interface ConfettiWindow extends Window {
  confetti?: (options: {
    particleCount: number;
    spread: number;
    origin: { y: number };
  }) => void;
}

interface TranslationEntry {
  id?: number;
  target: string;
  examples?: string[];
}

interface WordCard {
  id: number;
  word: string;
  translations: TranslationEntry[];
  userInput: string;
  flipped: boolean;
  hintVisible: boolean;
  isCorrect: boolean | null;
  hintIndex: number;
  showTranslation: boolean;
  status: 'learned' | 'repeat' | 'error' | null;
  revealed?: boolean;
  type: 'word' | 'expression';
  createdAt: number;
  galaxy: string;
  subtopic: string;
  grammar?: GrammarData;
}

@Component({
  selector: 'app-vocabulary',
  templateUrl: './vocabulary.component.html',
  styleUrls: ['./vocabulary.component.css'],
})
export class VocabularyComponent implements OnInit {

  @Input() currentGalaxy: string = '';
  @Input() currentSubtopic: string = '';
  words: WordCard[] = [];
  expressions: WordCard[] = [];
  newWord: string = '';
  newTranslation: string = '';
  showHint: boolean = true; // Astuce "Clique pour voir la traduction"
  sortBy: string = 'all';
  sortOrderWords: 'asc' | 'desc' = 'desc';
  sortOrderExpressions: 'asc' | 'desc' = 'desc';
  sortByLang: boolean = false;
  newWordType: 'word' | 'expression' = 'word';
  // Variable pour contr√¥ler l'affichage du formulaire de saisie
  showInputFields: boolean = false;
  wordsPerPage = 10;
  expressionsPerPage = 10;
  currentWordsPage = 1;
  currentExpressionsPage = 1;
  viewMode: 'cards' | 'list' = 'cards'; // cartes par d√©faut
  filterType: 'all' | 'word' | 'expression' = 'all';
  showAddCardModal: boolean = false;
  editingCard: WordCard | null = null;
  manualTranslation: string = '';
  sourceLang: 'ru' | 'fr' | 'en' = 'fr';
  targetLang: 'ru' | 'fr' | 'en' = 'ru';
  isManualTranslation: boolean = false;
  isAutoTranslation: boolean = false;
  selectedTranslationIndex: number | null = null;
  showExtraModal: boolean = false;
  newExample: string = '';
  showExtraTranslationModal: boolean = false;
  showExamplesView: boolean = false;
  showTranslationsView: boolean = false;
  enlargedCardId: number | null = null;
  showGrammarModal: boolean = false;
  grammarModalCard: WordCard | null = null;
  newGrammarData: Grammar.GrammarData | null = null;
  newTranslationGrammar: Grammar.GrammarData | null = null;
  showTranslationInputForm: boolean = false;


  constructor(
    private route: ActivatedRoute, 
    private lexiconService: LexiconService, 
    private translationService: TranslationService,
    private dialog: MatDialog,
    private title: Title,
    private meta: Meta
  ) { }

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      this.currentGalaxy = params.get('galaxy') || '';
      this.currentSubtopic = params.get('subtopic') || '';

      console.log('üìå Galaxy from route:', this.currentGalaxy);
      console.log('üìå Subtopic from route:', this.currentSubtopic);
      
      this.updateSEOTags();

      // üîÅ Essai de chargement depuis le backend
      this.lexiconService.getWordsByGalaxyAndSubtopic(this.currentGalaxy, this.currentSubtopic)
        .subscribe({

          next: (data) => {
            console.log('üì¶ Donn√©es du backend:', data);
            const enriched = data.map(card => {
              const translations = (card.translations ?? []).map(t => ({
                id: t.id,
                target: t.target,
                examples: t.example ? [t.example] : [],
              }));


              return {
                ...card,
                id: card.id ?? Date.now(),
                translations,
                userInput: '',
                flipped: false,
                grammar: card.grammar ?? undefined,
                hintVisible: true,
                isCorrect: null,
                hintIndex: 0,
                showTranslation: card?.revealed ?? false,
                status: card.status ?? null,
                createdAt: card.createdAt ?? Date.now(),
              };
            });

            this.words = enriched.filter(item => item.type === 'word');
            this.expressions = enriched.filter(item => item.type === 'expression');
            // ‚úÖ Sauvegarde de secours
            this.saveToLocalStorage(enriched);

            console.log('‚úÖ Cartes charg√©es depuis le backend:', enriched);
          },
          error: (err) => {
            console.error('‚ùå Erreur lors du chargement depuis le backend. Tentative localStorage:', err);

            const updated = this.loadFromLocalStorage();
            if (!updated) return;

            const relevant = updated.filter(
              item => item.galaxy === this.currentGalaxy && item.subtopic === this.currentSubtopic
            );
            this.words = relevant.filter(item => item.type === 'word');
            this.expressions = relevant.filter(item => item.type === 'expression');

            console.log('‚úÖ Charg√© depuis localStorage:', relevant);
          }
        });
    });
  }

  getNounGrammar(card: WordCard) {
    return card.grammar?.partOfSpeech === 'noun' ? card.grammar as Grammar.NounGrammar : null;
  }

  getVerbGrammar(card: WordCard) {
    return card.grammar?.partOfSpeech === 'verb' ? card.grammar as Grammar.VerbGrammar : null;
  }

  getAdjectiveGrammar(card: WordCard): Grammar.AdjectiveGrammar | null {
    return card.grammar?.partOfSpeech === 'adjective' ? card.grammar as Grammar.AdjectiveGrammar : null;
  }

  getAdverbGrammar(card: WordCard): Grammar.AdverbGrammar | null {
    return card.grammar?.partOfSpeech === 'adverb' ? card.grammar as Grammar.AdverbGrammar : null;
  }

  getPronounGrammar(card: WordCard): Grammar.PronounGrammar | null {
    return card.grammar?.partOfSpeech === 'pronoun' ? card.grammar as Grammar.PronounGrammar : null;
  }

  getConjunctionGrammar(card: WordCard): Grammar.ConjunctionGrammar | null {
    return card.grammar?.partOfSpeech === 'conjunction' ? card.grammar as Grammar.ConjunctionGrammar : null;
  }

  getInterjectionGrammar(card: WordCard): Grammar.InterjectionGrammar | null {
    return card.grammar?.partOfSpeech === 'interjection' ? card.grammar as Grammar.InterjectionGrammar : null;
  }

  getExpressionGrammar(card: WordCard): Grammar.ExpressionGrammar | null {
    return card.grammar?.partOfSpeech === 'expression' ? card.grammar as Grammar.ExpressionGrammar : null;
  }

  // Chargement des cartes (pour l'instant juste un tableau statique)
  loadWords(): void {
    const rawItems: WordCard[] = [
      // CULTURE G√âN√âRALE
      { id: 1, word: 'r√©volution', translations: [{ target: 'revolution' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Histoire', ...this.defaultCard() },
      { id: 2, word: 'empire', translations: [{ target: 'empire' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Histoire', ...this.defaultCard() },
      { id: 3, word: 'atome', translations: [{ target: 'atom' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Science', ...this.defaultCard() },
      { id: 4, word: 'exp√©rience', translations: [{ target: 'experiment' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Science', ...this.defaultCard() },
      { id: 5, word: 'pi√®ce', translations: [{ target: 'play (theater)' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Art', ...this.defaultCard() },
      { id: 6, word: 'palette', translations: [{ target: 'palette' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Art', ...this.defaultCard() },
      { id: 7, word: 'penseur', translations: [{ target: 'thinker' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Philosophie', ...this.defaultCard() },
      { id: 8, word: 'question de l\'√™tre', translations: [{ target: 'question of being' }], type: 'expression', galaxy: 'Culture g√©n√©rale', subtopic: 'Philosophie', ...this.defaultCard() },
      { id: 9, word: 'innovation', translations: [{ target: 'innovation' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Technologies', ...this.defaultCard() },
      { id: 10, word: 'intelligence artificielle', translations: [{ target: 'artificial intelligence' }], type: 'expression', galaxy: 'Culture g√©n√©rale', subtopic: 'Technologies', ...this.defaultCard() },
      { id: 11, word: 'h√©ritage', translations: [{ target: 'heritage' }], type: 'word', galaxy: 'Culture g√©n√©rale', subtopic: 'Culture', ...this.defaultCard() },
      { id: 12, word: 'traditions populaires', translations: [{ target: 'folk traditions' }], type: 'expression', galaxy: 'Culture g√©n√©rale', subtopic: 'Culture', ...this.defaultCard() },

      // LIENS SOCIAUX
      { id: 13, word: 'maman', translations: [{ target: 'mom' }], type: 'word', galaxy: 'Liens sociaux', subtopic: 'Famille', ...this.defaultCard() },
      { id: 14, word: 'fr√®re', translations: [{ target: 'brother' }], type: 'word', galaxy: 'Liens sociaux', subtopic: 'Famille', ...this.defaultCard() },
      { id: 15, word: 'meilleur ami', translations: [{ target: 'best friend' }], type: 'expression', galaxy: 'Liens sociaux', subtopic: 'Amis', ...this.defaultCard() },
      { id: 16, word: '√™tre ami', translations: [{ target: 'be friends' }], type: 'word', galaxy: 'Liens sociaux', subtopic: 'Amis', ...this.defaultCard() },
      { id: 17, word: 'patron', translations: [{ target: 'boss' }], type: 'word', galaxy: 'Liens sociaux', subtopic: 'Travail', ...this.defaultCard() },
      { id: 18, word: 'processus de travail', translations: [{ target: 'workflow' }], type: 'expression', galaxy: 'Liens sociaux', subtopic: 'Travail', ...this.defaultCard() },
      { id: 19, word: 'partager un post', translations: [{ target: 'share a post' }], type: 'expression', galaxy: 'Liens sociaux', subtopic: 'R√©seaux sociaux', ...this.defaultCard() },
      { id: 20, word: '–ø–æ–¥–ø–∏—Å—á–∏–∫', translations: [{ target: 'follower' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', ...this.defaultCard() },
      { id: 21, word: '–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥', translations: [{ target: 'have a dialogue' }], type: 'expression', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 31, word: '–∫–æ–Ω—Ç–∞–∫—Ç', translations: [{ target: 'contact' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 32, word: '–¥–∏–∞–ª–æ–≥', translations: [{ target: 'dialogue' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 33, word: '–æ–±—â–µ–Ω–∏–µ', translations: [{ target: 'communication' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 34, word: '—Ä–∞–∑–≥–æ–≤–æ—Ä', translations: [{ target: 'conversation' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 35, word: '–≤–æ–ø—Ä–æ—Å', translations: [{ target: 'question' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 36, word: '–æ—Ç–≤–µ—Ç', translations: [{ target: 'answer' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 37, word: '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ', translations: [{ target: 'discussion' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 38, word: '–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ', translations: [{ target: 'statement' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 39, word: '–Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ', translations: [{ target: 'misunderstanding' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 40, word: '–∞—Ä–≥—É–º–µ–Ω—Ç', translations: [{ target: 'argument' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 41, word: '–º–Ω–µ–Ω–∏–µ', translations: [{ target: 'opinion' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },
      { id: 42, word: '–ø–µ—Ä–µ–ø–∏—Å–∫–∞', translations: [{ target: 'correspondence' }], type: 'word', galaxy: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏', subtopic: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', ...this.defaultCard() },

      // –†–ê–ë–û–¢–ê –ò –ö–ê–†–¨–ï–†–ê
      { id: 23, word: '–≤–∞–∫–∞–Ω—Å–∏—è', translations: [{ target: 'job opening' }], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–í–∞–∫–∞–Ω—Å–∏–∏', ...this.defaultCard() },
      { id: 24, word: '—Ä–µ–∑—é–º–µ', translations: [{ target: 'resume' }], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–í–∞–∫–∞–Ω—Å–∏–∏', ...this.defaultCard() },
      { id: 25, word: '–∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', translations: [{ target: 'communication skills' }], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–ù–∞–≤—ã–∫–∏', ...this.defaultCard() },
      { id: 26, word: '—Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏', translations: [{ target: 'solve tasks' }], type: 'expression', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–ù–∞–≤—ã–∫–∏', ...this.defaultCard() },
      { id: 27, word: '–æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞', translations: [{ target: 'experience description' }], type: 'expression', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–†–µ–∑—é–º–µ', ...this.defaultCard() },
      { id: 28, word: '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', translations: [{ target: 'education' }], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–†–µ–∑—é–º–µ', ...this.defaultCard() },
      { id: 29, word: '–≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏', translations: [{ target: 'interview question' }], type: 'expression', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', ...this.defaultCard() },
      { id: 30, word: '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', translations: [{ target: 'employer' }], type: 'word', galaxy: '–†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞', subtopic: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', ...this.defaultCard() }
    ];

    const enrichedItems = rawItems.map(item => ({
      ...item,
      type: item.type,
      userInput: '',
      flipped: false,
      hintVisible: true,
      isCorrect: null,
      hintIndex: 0,
      status: null,
      showTranslation: false
    }));

    this.saveToLocalStorage(enrichedItems);
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ –∏ –ø–æ–¥—Ç–µ–º–µ
    const relevant = enrichedItems.filter(
      item => item.galaxy === this.currentGalaxy && item.subtopic === this.currentSubtopic
    );
    this.words = relevant.filter(item => item.type === 'word');
    this.expressions = relevant.filter(item => item.type === 'expression');

  }

  defaultCard() {
    return {
      userInput: '',
      flipped: false,
      hintVisible: true,
      isCorrect: null,
      hintIndex: 0,
      showTranslation: false,
      status: null,
      createdAt: Date.now()
    };
  }

  // –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  addItem(): void {
    if (!this.newWord.trim()) return;
    const hasManualTranslation = this.isManualTranslation && this.newTranslation.trim().length > 0;

    const translations = this.newTranslation.trim()
      ? [{
        id: 0, // –≤—Ä–µ–º–µ–Ω–Ω—ã–π id –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        source: this.newWord.trim(),
        target: this.newTranslation.trim(),
        sourceLang: this.sourceLang,
        targetLang: this.targetLang,
        meaning: '',
        example: null
      }]
      : [];

    const newCard: WordCard = {
      id: 0,
      createdAt: Date.now(),
      word: this.newWord.trim(),
      translations: translations.length > 0 ? [{ target: this.newTranslation.trim() }] : [],
      userInput: '',
      flipped: false,
      hintVisible: true,
      isCorrect: null,
      hintIndex: 0,
      showTranslation: hasManualTranslation,
      status: null,
      type: this.newWordType,
      galaxy: this.currentGalaxy,
      subtopic: this.currentSubtopic,
      grammar: this.newGrammarData ?? undefined,
    };

    console.log('üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–î (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥):', this.newGrammarData);
    console.log('üß† –ü–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥—ë–Ω –≤—Ä—É—á–Ω—É—é:', hasManualTranslation);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend
    this.lexiconService.addWord({
      word: newCard.word,
      translations: newCard.translations.map(t => ({
        id: 0, // –≤—Ä–µ–º–µ–Ω–Ω–æ 0
        lexiconId: 0, // –≤—Ä–µ–º–µ–Ω–Ω–æ 0
        source: newCard.word,
        target: t.target,
        sourceLang: this.sourceLang,
        targetLang: this.targetLang,
        meaning: '',
        example: t.examples?.[0] || null
      })),
      galaxy: newCard.galaxy!,
      subtopic: newCard.subtopic!,
      type: newCard.type,
      grammar: this.newGrammarData ?? undefined
    }).subscribe({
      next: (res) => {
        console.log('‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î:', res);
        newCard.id = (res as {id?: number}).id || 0;
      },
      error: (err) => {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–î. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', err);
      }
    });

    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ UI
    if (this.newWordType === 'word') {
      this.words.unshift(newCard);
    } else {
      this.expressions.unshift(newCard);
    }

    this.saveToLocalStorage();

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Material Dialog
    // this.newWord = '';
    // this.newTranslation = '';
    // this.newGrammarData = null;

  }

  updateGrammar(cardId: number, grammar: GrammarData): void {
    this.lexiconService.updateGrammar(cardId, grammar).subscribe({
      next: () => {
        console.log(`‚úÖ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î –¥–ª—è id=${cardId}:`, grammar);
        const all = [...this.words, ...this.expressions];
        const target = all.find(card => card.id === cardId);
        if (target) {
          target.grammar = grammar;
          this.saveToLocalStorage();
        }

        // ‚û°Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        this.enlargedCardId = null;

        // ‚û°Ô∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª–∫–∏
        this.resetModals();

        // ‚û°Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ üéâ
        this.showConfetti();
      },
      error: (err) => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –¥–ª—è id=${cardId}:`, err)
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  deleteWord(id: number): void {
    this.words = this.words.filter(word => word.id !== id);
  }

  deleteItem(id: number, type: 'word' | 'expression'): void {
    this.lexiconService.deleteWord(id).subscribe({
      next: () => {
        if (type === 'word') {
          this.words = this.words.filter(word => word.id !== id);
        } else {
          this.expressions = this.expressions.filter(expression => expression.id !== id);
        }
        this.saveToLocalStorage();
        console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ, id=${id}`);
      },
      error: (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', err);
      }
    });
  }


  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å–ª–æ–≤–æ/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ) ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Material Dialog
  openAddCardModal(type: 'word' | 'expression'): void {
    const dialogData: AddWordDialogData = {
      type: type,
      currentGalaxy: this.currentGalaxy,
      currentSubtopic: this.currentSubtopic
    };

    const dialogRef = this.dialog.open(AddWordDialogComponent, {
      width: '600px',
      maxWidth: '90vw',
      data: dialogData,
      disableClose: false,
      autoFocus: true,
      panelClass: 'custom-dialog-container'
    });

    dialogRef.afterClosed().subscribe((result: AddWordDialogResult) => {
      if (result) {
        this.handleDialogResult(result);
      }
    });
  }

  private handleDialogResult(result: AddWordDialogResult): void {
    const translations = result.translation.trim()
      ? [{
        id: 0, // –≤—Ä–µ–º–µ–Ω–Ω—ã–π id –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        target: result.translation.trim(),
        examples: []
      }]
      : [];

    const newCard: WordCard = {
      id: 0,
      createdAt: Date.now(),
      word: result.word,
      translations: translations,
      userInput: '',
      flipped: false,
      hintVisible: true,
      isCorrect: null,
      hintIndex: 0,
      showTranslation: result.isManual,
      status: null,
      type: result.type,
      galaxy: this.currentGalaxy,
      subtopic: this.currentSubtopic,
      grammar: result.grammar ?? undefined,
    };

    console.log('üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞:', result.grammar);
    console.log('üß† –ü–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥—ë–Ω –≤—Ä—É—á–Ω—É—é:', result.isManual);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend
    this.lexiconService.addWord({
      word: newCard.word,
      translations: newCard.translations.map(t => ({
        id: 0, // –≤—Ä–µ–º–µ–Ω–Ω–æ 0
        lexiconId: 0, // –≤—Ä–µ–º–µ–Ω–Ω–æ 0
        source: newCard.word,
        target: t.target,
        sourceLang: result.sourceLang,
        targetLang: result.targetLang,
        meaning: '',
        example: t.examples?.[0] || null
      })),
      galaxy: newCard.galaxy!,
      subtopic: newCard.subtopic!,
      type: newCard.type,
      grammar: result.grammar ?? undefined
    }).subscribe({
      next: (res) => {
        console.log('‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î:', res);
        newCard.id = (res as {id?: number}).id || 0;
      },
      error: (err) => {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–î. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', err);
      }
    });

    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ UI
    if (result.type === 'word') {
      this.words.unshift(newCard);
    } else {
      this.expressions.unshift(newCard);
    }

    this.saveToLocalStorage();
  }

  // closeAddCardModal –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ Material Dialog


  // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
  flipCard(card: WordCard, event?: Event): void {
    // –£–±–∏—Ä–∞–µ–º focus —Å —ç–ª–µ–º–µ–Ω—Ç–∞ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ hover —ç—Ñ—Ñ–µ–∫—Ç–∞
    if (event && event.target) {
      (event.target as HTMLElement).blur();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è hover –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
      const cardElement = (event.target as HTMLElement).closest('.card');
      if (cardElement) {
        cardElement.classList.add('flipping');
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
          cardElement.classList.remove('flipping');
        }, 600); // 600ms = –≤—Ä–µ–º—è transition
      }
    }

    if (!card.translations[0] || card.translations[0].target === '...') {
      this.openTranslationForm(card); // <-- –ø–æ–∫–∞–∂–µ–º —Ñ–æ—Ä–º—É
      return;
    }

    card.flipped = !card.flipped;
    card.hintVisible = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
  checkTranslation(card: WordCard): void {
    const userAnswer = card.userInput.trim().toLowerCase();
    const correctAnswer = card.translations[0]?.target?.toLowerCase();

    if (userAnswer === correctAnswer) {
      card.isCorrect = true;
      card.status = 'learned';

      this.lexiconService.updateWordStatus(card.id, 'learned').subscribe({
        next: () => console.log(`‚úÖ –°—Ç–∞—Ç—É—Å "learned" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è id=${card.id}`),
        error: (err) => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "learned" –¥–ª—è id=${card.id}:`, err)
      });

    } else {
      card.isCorrect = false;
      card.status = 'error';

      this.lexiconService.updateWordStatus(card.id, 'error').subscribe({
        next: () => console.log(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å "error" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è id=${card.id}`),
        error: (err) => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "error" –¥–ª—è id=${card.id}:`, err)
      });
    }

    this.saveToLocalStorage();
  }


  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
  sortWords(): void {
    const allItems = this.loadFromLocalStorage() || [];

    const relevantItems = allItems.filter(
      card =>
        card.galaxy === this.currentGalaxy &&
        card.subtopic === this.currentSubtopic
    );

    let filtered = relevantItems;

    switch (this.sortBy) {
      case 'repeat':
        filtered = relevantItems.filter(card => card.status === 'repeat');
        break;
      case 'learned':
        filtered = relevantItems.filter(card => card.status === 'learned');
        break;
      case 'untranslated':
        filtered = relevantItems.filter(card => !card.translations[0] || card.translations[0].target === '...');
        break;
      case 'hardest':
        filtered = relevantItems.filter(card => card.status === 'error');
        break;
      case 'all':
      default:
        // –Ω–∏—á–µ–≥–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        break;
    }

    this.words = filtered
      .filter(card => card.type === 'word')
      .sort((a, b) =>
        this.sortOrderWords === 'desc'
          ? b.createdAt - a.createdAt
          : a.createdAt - b.createdAt
      );

    this.expressions = filtered
      .filter(card => card.type === 'expression')
      .sort((a, b) =>
        this.sortOrderExpressions === 'desc'
          ? b.createdAt - a.createdAt
          : a.createdAt - b.createdAt
      );

    if (this.sortByLang) {
      this.words = this.words.sort((a, b) =>
        a.word.localeCompare(b.word, this.sourceLang === 'fr' ? 'fr' : this.sourceLang === 'ru' ? 'ru' : 'en')
      );
      this.expressions = this.expressions.sort((a, b) =>
        a.word.localeCompare(b.word, this.sourceLang === 'fr' ? 'fr' : this.sourceLang === 'ru' ? 'ru' : 'en')
      );
      return;
    }
  }

  toggleSortOrderWords(): void {
    this.sortOrderWords = this.sortOrderWords === 'desc' ? 'asc' : 'desc';
    this.sortWords();
  }

  toggleSortOrderExpressions(): void {
    this.sortOrderExpressions = this.sortOrderExpressions === 'desc' ? 'asc' : 'desc';
    this.sortWords();
  }

  getAllItems(): WordCard[] {
    return [...this.words, ...this.expressions];
  }


  getHint(card: WordCard): string {
    if (!card.translations[0] || card.translations[0].target === '...') {
      return '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥';
    }

    const full = card.translations[0].target;
    const visible = full
      .slice(0, card.hintIndex ?? 0)
      .split('')
      .join(' ');
    const hidden = full
      .slice(card.hintIndex ?? 0)
      .replace(/./g, '_')
      .split('')
      .join(' ');
    return `${visible} ${hidden}`.trim();
  }


  revealNextHint(card: WordCard): void {
    if ((card.hintIndex ?? 0) < card.translations[0].target.length - 1) {
      card.hintIndex = (card.hintIndex ?? 0) + 1;
    } else {
      card.showTranslation = true;
      this.lexiconService.revealWord(card.id).subscribe({
        next: () => console.log('üìò –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω (revealed = true)'),
        error: (err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ revealWord:', err)
      });
    }
    this.saveToLocalStorage();
  }

  showFullTranslation(card: WordCard): void {
    card.showTranslation = true;

    this.lexiconService.revealWord(card.id).subscribe({
      next: () => console.log('üìò –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω (revealed = true)'),
      error: (err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ revealWord:', err)
    });
    this.saveToLocalStorage();
  }

  // showFullTranslation(card: WordCard): void {
  //   card.showTranslation = true;
  //   this.lexiconService.markAsRevealed(card.id).subscribe({
  //     next: () => console.log('üëÅ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ revealed=true'),
  //     error: err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ revealed:', err)
  //   });
  // }

  ///////////////////////////////////////////–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤

  markAsLearned(card: WordCard): void {
    card.status = 'learned';

    this.lexiconService.updateWordStatus(card.id, 'learned').subscribe({
      next: () => console.log(`‚úÖ –°—Ç–∞—Ç—É—Å "learned" –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î –¥–ª—è id=${card.id}`),
      error: (err) => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ "learned" –¥–ª—è id=${card.id}:`, err)
    });

    this.saveToLocalStorage();
  }


  markForRepetition(card: WordCard): void {
    card.status = 'repeat';

    this.lexiconService.updateWordStatus(card.id, 'repeat').subscribe({
      next: () => console.log(`üîÅ –°—Ç–∞—Ç—É—Å "repeat" –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î –¥–ª—è id=${card.id}`),
      error: (err) => console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ "repeat" –¥–ª—è id=${card.id}:`, err)
    });

    this.saveToLocalStorage();
  }



  saveToLocalStorage(cards?: WordCard[]): void {
    const allItems = cards ?? [...this.words, ...this.expressions];
    localStorage.setItem('vocabulary_cards', JSON.stringify(allItems));
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ localStorage:', allItems); // <--- –¥–æ–±–∞–≤—å —ç—Ç–æ!
  }

  loadFromLocalStorage(): WordCard[] | null {
    const data = localStorage.getItem('vocabulary_cards');
    if (!data) return null;

    const parsed = JSON.parse(data);
    return parsed.map((item: VocabularyItem) => ({
      ...item,
      createdAt: item.createdAt || Date.now() // <-- –¥–æ–±–∞–≤–∏–º –¥–∞—Ç—É, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
    }));
  }


  /////////////////////////////////////////////////////
  get paginatedWords(): WordCard[] {
    const start = (this.currentWordsPage - 1) * this.wordsPerPage;
    return this.words.slice(start, start + this.wordsPerPage);
  }

  get paginatedExpressions(): WordCard[] {
    const start = (this.currentExpressionsPage - 1) * this.expressionsPerPage;
    return this.expressions.slice(start, start + this.expressionsPerPage);
  }

  get totalWords(): number {
    return this.words.length;
  }

  get totalExpressions(): number {
    return this.expressions.length;
  }

  get wordsRangeLabel(): string {
    const start = (this.currentWordsPage - 1) * this.wordsPerPage + 1;
    const end = Math.min(this.currentWordsPage * this.wordsPerPage, this.totalWords);
    return `Cartes: ${start}‚Äì${end} sur ${this.totalWords}`;
  }

  get hasNextWordsPage(): boolean {
    return this.currentWordsPage * this.wordsPerPage < this.totalWords;
  }

  get hasPrevWordsPage(): boolean {
    return this.currentWordsPage > 1;
  }

  get expressionsPaginationLabel(): string {
    const total = this.expressions.length;
    const start = (this.currentExpressionsPage - 1) * this.expressionsPerPage + 1;
    const end = Math.min(start + this.expressionsPerPage - 1, total);
    return `Expressions: ${start}‚Äì${end} sur ${total}`;
  }

  get hasNextExpressionsPage(): boolean {
    return this.currentExpressionsPage * this.expressionsPerPage < this.expressions.length;
  }

  get hasPrevExpressionsPage(): boolean {
    return this.currentExpressionsPage > 1;
  }

  get filteredWords(): WordCard[] {
    return this.filterType === 'all' || this.filterType === 'word' ? this.words : [];
  }

  get filteredExpressions(): WordCard[] {
    return this.filterType === 'all' || this.filterType === 'expression' ? this.expressions : [];
  }

  get selectedTranslation(): TranslationEntry | null {
    if (this.editingCard && this.selectedTranslationIndex !== null) {
      return this.editingCard.translations[this.selectedTranslationIndex] || null;
    }
    return null;
  }


  changeWordsPage(delta: number): void {
    const maxPage = Math.ceil(this.words.length / this.wordsPerPage);
    this.currentWordsPage = Math.max(1, Math.min(this.currentWordsPage + delta, maxPage));
  }

  changeExpressionsPage(delta: number): void {
    const maxPage = Math.ceil(this.expressions.length / this.expressionsPerPage);
    this.currentExpressionsPage = Math.max(1, Math.min(this.currentExpressionsPage + delta, maxPage));
  }

  resetToPractice(card: WordCard): void {
    card.status = null;
    card.userInput = '';
    card.isCorrect = null;
    card.hintIndex = 0;
    card.showTranslation = false;
    card.flipped = false; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
    card.hintVisible = true; // —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å ¬´–ö–ª–∏–∫–Ω–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥¬ª
    this.saveToLocalStorage();
  }

  //–ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –∏/–∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  getWordAndExpressionCount(): string {
    const raw = localStorage.getItem('vocabulary_cards');
    const all: WordCard[] = raw ? JSON.parse(raw) : [];

    const relevant = all.filter(item =>
      item.galaxy === this.currentGalaxy &&
      item.subtopic === this.currentSubtopic
    );

    const wordCount = relevant.filter(item => item.type === 'word').length;
    const exprCount = relevant.filter(item => item.type === 'expression').length;

    return `${wordCount} —Å–ª–æ–≤ / ${exprCount} –≤—ã—Ä–∞–∂–µ–Ω–∏–π`;
  }

  //–¥–ª—è –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö
  openTranslationForm(card: WordCard, forceShow = false): void {
    this.editingCard = card;
    this.manualTranslation = ' ';
  }


  saveManualTranslation(): void {
    if (this.editingCard && this.manualTranslation.trim()) {
      const translationText = this.manualTranslation.trim();
      // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ backend
      this.translationService.saveTranslation({
        source: "manual",
        sourceText: this.editingCard.word,
        translation: translationText,
        sourceLang: this.sourceLang,
        targetLang: this.targetLang,
        wordId: this.editingCard.id,
      }).subscribe({
        next: (res) => {
          console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î (—Ä—É—á–Ω–æ–π):', res);
          this.editingCard!.translations[0].target = translationText;
          this.editingCard!.showTranslation = true;
          this.editingCard!.hintVisible = false;
          this.editingCard!.status = null;
          this.saveToLocalStorage();

          this.editingCard = null;
          this.manualTranslation = '';
        },
        error: (err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:', err);
          alert('–£–ø—Å üòì –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
        }
      });
    }
  }


  cancelTranslationEdit({ keepActionChoiceModal = true } = {}): void {
    this.editingCard = null;
    this.manualTranslation = '';
  }



  detectLanguage(word: string): 'ru' | 'fr' | 'en' {
    if (/^[–∞-—è—ë\s]+$/i.test(word)) return 'ru';
    if (/^[a-z\s]+$/i.test(word)) return 'en';
    if (/^[a-z√†√¢√ß√©√®√™√´√Æ√Ø√¥√ª√π√º√ø√±√¶≈ì\s\-']+$/i.test(word)) return 'fr';
    return 'en'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  requestTranslation(card: WordCard | null = null): void {
    if (this.newWord.trim() === '') return;

    const detectedLang = this.detectLanguage(this.newWord);

    if (detectedLang !== this.sourceLang) {
      const langNames = { ru: '—Ä—É—Å—Å–∫–∏–π', fr: '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', en: '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' };
      const confirmed = window.confirm(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å —è–∑—ã–∫–∞: ${langNames[this.sourceLang]}, –Ω–æ —Å–ª–æ–≤–æ "${this.newWord}" –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞ ${langNames[detectedLang]}. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫ –Ω–∞ ${langNames[detectedLang]}?`
      );
      if (confirmed) {
        this.sourceLang = detectedLang;
      } else {
        return;
      }
    }

    this.translationService.requestTranslation(this.newWord, this.sourceLang, this.targetLang).subscribe({
      next: (res) => {
        if (res.translations.length) {
          this.newTranslation = res.translations[0];
          if (res.grammar) {
            this.newGrammarData = res.grammar;
          };
          this.isAutoTranslation = true;
          this.isManualTranslation = false;

          this.showConfetti();

          console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ ${res.from}:`, res.translations);

          // üëâ –î–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
          const newCard: WordCard = {
            id: Date.now(),
            createdAt: Date.now(),
            word: this.newWord.trim(),
            translations: [{ target: this.newTranslation }],
            userInput: '',
            flipped: false,
            hintVisible: true,
            isCorrect: null,
            hintIndex: 0,
            showTranslation: card?.revealed ?? false,
            status: null,
            type: this.newWordType,
            galaxy: this.currentGalaxy,
            subtopic: this.currentSubtopic
          };

          // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend
          this.lexiconService.addWord({
            word: newCard.word,
            galaxy: newCard.galaxy!,
            subtopic: newCard.subtopic!,
            type: newCard.type,
            grammar: this.newGrammarData ?? undefined
          }).subscribe({
            next: (res) => console.log('‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î:', res),
            error: (err) => console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ë–î. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', err)
          });

          if (this.newWordType === 'word') {
            this.words.unshift(newCard);
          } else {
            this.expressions.unshift(newCard);
          }

          this.saveToLocalStorage();
          // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Material Dialog
          // this.newWord = '';
          // this.newTranslation = '';
          // –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Material Dialog
        }
      },
      error: (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:', err);
      }
    });
  }

  showConfetti(): void {
    const confettiScript = document.createElement('script');
    confettiScript.src = 'https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js';
    confettiScript.onload = () => {
      (window as ConfettiWindow).confetti?.({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      });
    };
    document.body.appendChild(confettiScript);
  }

  onManualTranslationInput(): void {
    if (this.newTranslation.trim()) {
      this.isManualTranslation = true;
      this.isAutoTranslation = false;

      // –µ—Å–ª–∏ –Ω–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
      if (!this.newGrammarData && this.newWordType === 'word') {
        this.onPartOfSpeechChange('noun'); // –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–µ—Ñ–æ–ª—Ç
      }
    } else {
      this.isManualTranslation = false;
      this.newGrammarData = null;
    }
  }

  openExtraModal(card: WordCard, index: number): void {
    this.enlargedCardId = card.id;
    this.editingCard = card;
    this.selectedTranslationIndex = index;
    this.newExample = '';
    this.resetModals(); // –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤
  }

  closeExtraModal(): void {
    this.showExtraModal = false;
    this.newExample = '';
    this.editingCard = null;
    this.selectedTranslationIndex = null;
  }

  openExampleModal(): void {
    // this.resetModals();
    this.showExtraModal = true;
  }

  openExtraTranslationModal(): void {
    // this.resetModals();
    this.showExtraTranslationModal = true;
  }

  viewExamples(): void {
    this.resetModals();
    this.showExamplesView = true;
  }

  viewTranslations(): void {
    this.resetModals();
    this.showTranslationsView = true;
  }

  closeAllModals(): void {
    this.resetModals();
    this.editingCard = null;
    this.selectedTranslationIndex = null;
  }

  resetModals(): void {
    this.showAddCardModal = false;
    this.showExtraModal = false;
    this.showExtraTranslationModal = false;
    this.showExamplesView = false;
    this.showTranslationsView = false;
    this.showGrammarModal = false;
    this.grammarModalCard = null;
  }

  addExample(): void {
    if (!this.editingCard || this.selectedTranslationIndex === null) return;
    const example = this.newExample.trim();
    if (!example) return;

    const translation = this.editingCard.translations[this.selectedTranslationIndex];
    translation.examples = translation.examples || [];
    translation.examples.push(example);

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ backend:
    if (!translation?.id) return;
    this.translationService.updateTranslationExample({
      translationId: translation.id,
      examples: translation.examples
    }).subscribe({
      next: () => {
        console.log('‚úÖ –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
        this.saveToLocalStorage();
        this.newExample = '';
      },
      error: (err) => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞', err)
    });
  }

  enlargeCard(card: WordCard): void {
    console.log('üîç Agrandissement de la carte:', {
      cardId: card.id,
      cardType: card.type,
      cardWord: card.word,
      hasGrammar: !!card.grammar
    });
    this.enlargedCardId = card.id;
    this.editingCard = card;
  }

  closeEnlargedCard(): void {
    this.enlargedCardId = null;
    this.editingCard = null;
    this.resetModals();
  }

  toggleEnlargedCard(card: WordCard, index: number): void {
    if (this.enlargedCardId === card.id) {
      this.closeEnlargedCard();
    } else {
      this.enlargeCard(card);
      this.selectedTranslationIndex = index;
    }
  }

  openGrammarModal(card: WordCard): void {
    console.log('üöÄ Ouverture de la modalka de grammaire pour:', {
      cardType: card.type,
      cardWord: card.word,
      hasGrammar: !!card.grammar
    });
    
    this.ensureCardGrammar(card);
    this.grammarModalCard = card;
    this.showGrammarModal = true;
  }

  closeGrammarModal(): void {
    console.log('‚ùå Fermeture de la modalka de grammaire');
    this.showGrammarModal = false;
    this.grammarModalCard = null;
  }

  // M√©thodes pour test du th√®me global
  toggleTheme(): void {
    const isDarkTheme = document.body.classList.contains('dark-theme');
    if (isDarkTheme) {
      document.body.classList.remove('dark-theme');
      localStorage.setItem('theme', 'light');
      console.log('üåû Bascul√© vers Light theme');
    } else {
      document.body.classList.add('dark-theme');
      localStorage.setItem('theme', 'dark');
      console.log('üåô Bascul√© vers Dark theme');
    }
  }

  get isDarkTheme(): boolean {
    return document.body.classList.contains('dark-theme');
  }

  closeExtraTranslationModal(): void {
    console.log('‚ùå Fermeture de la modale de traduction suppl√©mentaire');
    this.showExtraTranslationModal = false;
    this.newTranslation = '';
  }

  addExtraTranslation(): void {
    if (!this.newTranslation.trim() || !this.editingCard) {
      console.warn('‚ö†Ô∏è Pas de traduction √† ajouter ou aucune carte s√©lectionn√©e');
      return;
    }

    console.log('‚ûï Ajout d\'une nouvelle traduction:', this.newTranslation.trim());
    
    // Cr√©er une nouvelle traduction pour la carte s√©lectionn√©e
    this.editingCard.translations.push({
      target: this.newTranslation.trim()
    });
    
    console.log('‚úÖ Traduction ajout√©e √† la carte');
    this.saveToLocalStorage();

    this.newTranslation = '';
    this.showExtraTranslationModal = false;
  }



  // –∫–æ–¥ —Å–≤—è–∑–∞–Ω—ã–π —Å —á–∞—Å—Ç—è–º–∏ —Ä–µ—á–∏
  onPartOfSpeechChange(partOfSpeech: Grammar.PartOfSpeech): void {
    switch (partOfSpeech) {
      case 'noun':
        this.newGrammarData = { partOfSpeech: 'noun' };
        break;
      case 'verb':
        this.newGrammarData = { partOfSpeech: 'verb' };
        break;
      case 'adjective':
        this.newGrammarData = { partOfSpeech: 'adjective' };
        break;
      case 'adverb':
        this.newGrammarData = { partOfSpeech: 'adverb' };
        break;
      case 'pronoun':
        this.newGrammarData = { partOfSpeech: 'pronoun' };
        break;
      case 'preposition':
        this.newGrammarData = { partOfSpeech: 'preposition' };
        break;
      case 'conjunction':
        this.newGrammarData = { partOfSpeech: 'conjunction' };
        break;
      case 'interjection':
        this.newGrammarData = { partOfSpeech: 'interjection' };
        break;
      default:
        this.newGrammarData = null;
    }
  }

  onGrammarValidate(card: WordCard): void {
    console.log("–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞")
    if (card.grammar) {
      this.updateGrammar(card.id, card.grammar);
    } else {
      console.warn('‚ùó –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.');
    }
  }

  ensureCardGrammar(card: WordCard): void {
    console.log('üìù V√©rification de la grammaire pour la carte:', {
      cardType: card.type,
      cardWord: card.word,
      hasGrammar: !!card.grammar
    });
    if (!card.grammar) {
      card.grammar = { partOfSpeech: '' as Grammar.PartOfSpeech };
      console.log('‚ûï Grammaire ajout√©e pour la carte');
    }
  }

  getGrammarBadge(grammar: GrammarData): string {
    const parts: string[] = [];

    switch (grammar.partOfSpeech) {
      case 'noun': {
        parts.push('n.');
        const gender = (grammar as Grammar.NounGrammar).gender;
        if (gender === 'masculine') parts.push('m.');
        if (gender === 'feminine') parts.push('f.');
        const number = (grammar as Grammar.NounGrammar).number;
        if (number === 'singular') parts.push('sg.');
        if (number === 'plural') parts.push('pl.');
        break;
      }
      case 'verb':
        parts.push('v.');
        break;
      case 'adjective':
        parts.push('adj.');
        break;
      case 'adverb':
        parts.push('adv.');
        break;
      case 'pronoun':
        parts.push('pron.');
        break;
      case 'preposition':
        parts.push('prep.');
        break;
      case 'conjunction':
        parts.push('conj.');
        break;
      case 'interjection':
        parts.push('interj.');
        break;
    }

    return parts.join(' ');
  }

  onTranslationInputChange(): void {
    if (this.newTranslation.trim()) {
      if (this.newWordType === 'word') {
        this.newGrammarData = { partOfSpeech: 'noun' };
      } else if (this.newWordType === 'expression') {
        this.newGrammarData = {
          partOfSpeech: 'expression',
          expressionType: 'other' // –∏–ª–∏ '–≤—ã—Ä–∞–∂–µ–Ω–∏–µ'
        };
      }
    } else {
      this.newGrammarData = null;
    }
  }

  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
  showAddMeaningModal = false;
  selectedCard: WordCard | null = null;

  newMeaningWord = '';
  newMeaningGalaxy = '';
  newMeaningSubtopic = '';

  availableGalaxies: string[] = [
    'Galaxie de la Technologie', 
    'Galaxie de l\'Art', 
    'Galaxie de la Science',
    'Galaxie du Sport',
    'Galaxie de la Cuisine',
    'Galaxie de l\'√âducation',
    'Galaxie des Voyages',
    'Galaxie de la Musique'
  ];
  availableSubtopics: string[] = []; // –ø–æ–¥—Ç–µ–º—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–∏


  openAddMeaningModal(card: WordCard) {
    this.selectedCard = card;
    this.newMeaningWord = card.word; // ‚Üê —Ç–µ–∫—Å—Ç —Å–ª–æ–≤–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–º –∂–µ
    this.showAddMeaningModal = true;
  }

  cancelAddMeaning() {
    this.showAddMeaningModal = false;
    this.selectedCard = null;
    this.newMeaningWord = '';
    this.newMeaningGalaxy = '';
    this.newMeaningSubtopic = '';
  }

  onMeaningGalaxyChange() {
    // –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–∞–ª–∞–∫—Ç–∏–∫–∏ ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–µ–º
    this.availableSubtopics = this.getSubtopicsForGalaxy(this.newMeaningGalaxy);
    this.newMeaningSubtopic = ''; // R√©initialiser le sous-th√®me s√©lectionn√©
  }

  getSubtopicsForGalaxy(galaxy: string): string[] {
    const subtopicsMap: { [key: string]: string[] } = {
      'Galaxie de la Technologie': ['Applications', 'Intelligence Artificielle', 'R√©seaux', 'Programmation', 'Hardware'],
      'Galaxie de l\'Art': ['Peinture', 'Sculpture', 'Photographie', 'Design', 'Architecture'],
      'Galaxie de la Science': ['Physique', 'Chimie', 'Biologie', 'Astronomie', 'Math√©matiques'],
      'Galaxie du Sport': ['Football', 'Tennis', 'Natation', 'Athl√©tisme', 'Sports d\'hiver'],
      'Galaxie de la Cuisine': ['Recettes', 'Techniques', 'Ingr√©dients', 'Cuisines du monde', 'P√¢tisserie'],
      'Galaxie de l\'√âducation': ['M√©thodes', 'Disciplines', '√âvaluation', 'Technologies √©ducatives', 'Psychologie'],
      'Galaxie des Voyages': ['Destinations', 'Transport', 'H√©bergement', 'Culture locale', 'Aventure'],
      'Galaxie de la Musique': ['Instruments', 'Genres', 'Th√©orie musicale', 'Compositeurs', 'Production']
    };

    return subtopicsMap[galaxy] || [];
  }

  saveNewMeaning() {
    if (!this.selectedCard || !this.newMeaningGalaxy || !this.newMeaningSubtopic) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    this.lexiconService.addWord({
      word: this.newMeaningWord,
      galaxy: this.newMeaningGalaxy,
      subtopic: this.newMeaningSubtopic,
      type: this.selectedCard.type, // —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
      grammar: this.selectedCard.grammar // –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
    }).subscribe({
      next: (res) => {
        console.log('‚úÖ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', res);
        this.showAddMeaningModal = false;
        this.selectedCard = null;
        this.newMeaningWord = '';
        this.newMeaningGalaxy = '';
        this.newMeaningSubtopic = '';
      },
      error: (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è:', err);
      }
    });
  }

  private updateSEOTags(): void {
    const pageTitle = `Dictionnaire Fran√ßais - ${this.currentSubtopic} | LINGUACONNECT`;
    const pageDescription = `Apprenez le vocabulaire fran√ßais avec ${this.currentSubtopic}. Dictionnaire interactif pour √©tudiants DELF/DALF avec traductions et exercices.`;
    
    this.title.setTitle(pageTitle);
    this.meta.updateTag({ name: 'description', content: pageDescription });
    this.meta.updateTag({ property: 'og:title', content: pageTitle });
    this.meta.updateTag({ property: 'og:description', content: pageDescription });
    this.meta.updateTag({ property: 'og:type', content: 'website' });
  }

}
