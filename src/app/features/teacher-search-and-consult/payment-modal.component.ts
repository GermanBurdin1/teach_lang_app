import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';
import { PaymentService, CreatePaymentIntentDto, ConfirmPaymentDto } from '../../services/payment.service';
import { AuthService } from '../../services/auth.service';
import { NotificationService } from '../../services/notification.service';
import { TeacherDetails } from './teacher-details.model';

interface StripeInterface {
  elements: () => unknown;
  confirmCardPayment: (secret: string, config: unknown) => Promise<unknown>;
  [key: string]: unknown;
}

interface PaymentData {
  id: string;
  status: string;
  amount: number;
  [key: string]: unknown;
}

interface PaymentIntent {
  id: string;
  client_secret: string;
  amount: number;
  status: string;
  [key: string]: unknown;
}

declare const Stripe: (key: string) => StripeInterface;

@Component({
  selector: 'app-payment-modal',
  templateUrl: './payment-modal.component.html',
  styleUrls: ['./payment-modal.component.css'],
  standalone: false
})
export class PaymentModalComponent implements OnInit {
  @Input() teacher: TeacherDetails | null = null;
  @Input() selectedDate: Date = new Date();
  @Input() selectedTime: string = '';
  @Input() lessonDuration: number = 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  @Output() paymentSuccess = new EventEmitter<PaymentData>();
  @Output() paymentCancel = new EventEmitter<void>();

  showPaymentModal = false;
  isLoading = false;
  paymentProcessing = false;
  
  // Stripe
  stripe: StripeInterface | null = null;
  elements: unknown = null;
  cardElement: unknown = null;
  
  // Payment data
  paymentIntent: PaymentIntent | null = null;
  clientSecret: string = '';
  paymentId: string = '';

  constructor(
    private paymentService: PaymentService,
    private authService: AuthService,
    private notificationService: NotificationService
  ) {}

  ngOnInit() {
    console.log('üîç PaymentModal: ngOnInit() –≤—ã–∑–≤–∞–Ω');
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.showPaymentModal = true;
    console.log('üîç PaymentModal: showPaymentModal —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true');
    this.initializeStripe();
    // –í—ã–∑—ã–≤–∞–µ–º createPaymentIntent –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      this.createPaymentIntent();
    }, 500);
  }

  initializeStripe() {
    console.log('üîç PaymentModal: initializeStripe() –≤—ã–∑–≤–∞–Ω');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
    this.stripe = Stripe('pk_test_51Qb3cWGaUr31i20XRiurDRW2WZzxuaFCQWTHQGzPbFqUOzha4GBz3jIHTLHChC9o7E3aflhABxcRLWYSswDLzQrq00QqZAFkCO');
    this.elements = this.stripe.elements();
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã
    this.cardElement = (this.elements as {create: (type: string, options?: unknown) => unknown}).create('card', {
      style: {
        base: {
          fontSize: '16px',
          color: '#424770',
          '::placeholder': {
            color: '#aab7c4',
          },
        },
        invalid: {
          color: '#9e2146',
        },
      },
    });
    
    console.log('üîç PaymentModal: Stripe –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  openPaymentModal() {
    console.log('üîç PaymentModal: openPaymentModal() –≤—ã–∑–≤–∞–Ω');
    this.showPaymentModal = true;
    console.log('üîç PaymentModal: showPaymentModal =', this.showPaymentModal);
    this.createPaymentIntent();
  }

  ngAfterViewInit() {
    console.log('üîç PaymentModal: ngAfterViewInit() –≤—ã–∑–≤–∞–Ω');
    // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    setTimeout(() => {
      if (this.cardElement) {
        (this.cardElement as {mount: (selector: string) => void}).mount('#card-element');
        console.log('üîç PaymentModal: –ö–∞—Ä—Ç–∞ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      } else {
        console.error('‚ùå cardElement –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }, 100);
  }

  closePaymentModal() {
    this.showPaymentModal = false;
    this.paymentCancel.emit();
  }

  createPaymentIntent() {
    console.log('üîç PaymentModal: createPaymentIntent() –≤—ã–∑–≤–∞–Ω');
    console.log('üîç teacher:', this.teacher);
    console.log('üîç selectedTime:', this.selectedTime);
    console.log('üîç selectedDate:', this.selectedDate);
    console.log('üîç lessonDuration:', this.lessonDuration);
    
    if (!this.teacher || !this.selectedTime) {
      console.error('‚ùå Informations de r√©servation manquantes');
      console.error('‚ùå teacher:', this.teacher);
      console.error('‚ùå selectedTime:', this.selectedTime);
      this.notificationService.error('Informations de r√©servation manquantes');
      return;
    }

    this.isLoading = true;
    
    const currentUser = this.authService.getCurrentUser();
    console.log('üîç currentUser:', currentUser);
    
    if (!currentUser) {
      console.error('‚ùå Utilisateur non connect√©');
      this.notificationService.error('Utilisateur non connect√©');
      return;
    }

    const teacherPrice = (this.teacher as {price?: number}).price || 0;
    const amount = teacherPrice * (this.lessonDuration / 60); // –¶–µ–Ω–∞ –∑–∞ —á–∞—Å * –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
    console.log('üîç amount:', amount);
    console.log('üîç teacher.price:', teacherPrice);
    console.log('üîç lessonDuration:', this.lessonDuration);
    
    const paymentData: CreatePaymentIntentDto = {
      userId: currentUser.id,
      amount: amount,
      currency: 'eur',
      description: `Cours avec ${this.teacher.name} - ${this.selectedDate.toLocaleDateString()} ${this.selectedTime}`,
      metadata: {
        teacherId: this.teacher.id,
        teacherName: this.teacher.name,
        lessonDate: this.selectedDate.toISOString(),
        lessonTime: this.selectedTime,
        lessonDuration: this.lessonDuration
      }
    };
    
    console.log('üîç paymentData:', paymentData);

    this.paymentService.createPaymentIntent(paymentData).subscribe({
      next: (response) => {
        console.log('‚úÖ Payment intent —Å–æ–∑–¥–∞–Ω:', response);
        this.paymentIntent = response as unknown as PaymentIntent;
        this.clientSecret = (response as {clientSecret?: string}).clientSecret || '';
        this.paymentId = (response as {paymentId?: string}).paymentId || '';
        this.isLoading = false;
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è client secret
        setTimeout(() => {
          (this.cardElement as {mount: (selector: string) => void}).mount('#card-element');
          console.log('üîç –ö–∞—Ä—Ç–∞ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞');
        }, 100);
      },
      error: (error) => {
        console.error('‚ùå Erreur lors de la cr√©ation du paiement:', error);
        console.error('‚ùå Error details:', error.error);
        this.notificationService.error('Erreur lors de la cr√©ation du paiement');
        this.isLoading = false;
      }
    });
  }

  async processPayment() {
    console.log('üîç PaymentModal: processPayment() –≤—ã–∑–≤–∞–Ω');
    console.log('üîç clientSecret:', this.clientSecret ? 'present' : 'missing');
    console.log('üîç cardElement:', this.cardElement ? 'present' : 'missing');
    
    if (!this.clientSecret) {
      console.error('‚ùå Informations de paiement manquantes - clientSecret –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      this.notificationService.error('Informations de paiement manquantes');
      return;
    }

    this.paymentProcessing = true;
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞...');

    try {
      const result = await this.stripe?.confirmCardPayment(this.clientSecret, {
        payment_method: {
          card: this.cardElement!,
          billing_details: {
            name: this.authService.getCurrentUser()?.name || '',
            email: this.authService.getCurrentUser()?.email || ''
          }
        }
      }) as unknown as {error?: unknown, paymentIntent?: unknown};
      const { error, paymentIntent } = result;

      console.log('üîç Stripe response:', { error, paymentIntent });

      if (error) {
        console.error('‚ùå Erreur de paiement:', error);
        this.notificationService.error(`Erreur de paiement: ${(error as {message?: string}).message || 'Erreur inconnue'}`);
        this.paymentProcessing = false;
        return;
      }

      if ((paymentIntent as {status?: string})?.status === 'succeeded') {
        console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑ Stripe');
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
        const confirmData: ConfirmPaymentDto = {
          paymentIntentId: (paymentIntent as {id?: string}).id || '',
          paymentMethodId: (paymentIntent as {payment_method?: string}).payment_method || ''
        };

        this.paymentService.confirmPayment(confirmData).subscribe({
          next: () => {
            console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ');
            this.notificationService.success('Paiement r√©ussi! Votre r√©servation a √©t√© confirm√©e.');
            this.paymentSuccess.emit({
              paymentId: this.paymentId,
              paymentIntent: paymentIntent
            } as unknown as PaymentData);
            this.closePaymentModal();
          },
          error: (error) => {
            console.error('‚ùå Erreur lors de la confirmation:', error);
            // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–ª–∞—Ç–µ–∂ —É–∂–µ –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ Stripe
            this.notificationService.success('Paiement r√©ussi! Votre r√©servation a √©t√© confirm√©e.');
            this.paymentSuccess.emit({
              paymentId: this.paymentId,
              paymentIntent: paymentIntent
            } as unknown as PaymentData);
            this.closePaymentModal();
          },
          complete: () => {
            this.paymentProcessing = false;
          }
        });
      } else {
        console.log('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:', (paymentIntent as {status?: string})?.status);
        this.notificationService.warning('Le paiement n√©cessite une action suppl√©mentaire');
        this.paymentProcessing = false;
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement du paiement:', error);
      this.notificationService.error('Erreur lors du traitement du paiement');
      this.paymentProcessing = false;
    }
  }

  getTotalAmount(): number {
    if (!this.teacher) return 0;
    return this.teacher.price * (this.lessonDuration / 60);
  }

  getLessonDurationText(): string {
    if (this.lessonDuration === 60) return '1 heure';
    return `${this.lessonDuration} minutes`;
  }

  testPayment() {
    console.log('üîç PaymentModal: testPayment() –≤—ã–∑–≤–∞–Ω');
    this.notificationService.success('–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!');
    this.paymentSuccess.emit({
      paymentId: 'test-payment-id',
      paymentIntent: { id: 'test-intent-id' }
    } as unknown as PaymentData);
    this.closePaymentModal();
  }
} 