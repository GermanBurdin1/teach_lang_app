import { Component, AfterViewInit, HostListener, OnInit } from '@angular/core';
import * as fabric from 'fabric';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { VideoCallService } from '../../../services/video-call.service';
import { ClassroomModule } from '../../classroom.module';
import { ChangeDetectorRef } from '@angular/core';

@Component({
  selector: 'app-interactive-board',
  standalone: true,
  templateUrl: './interactive-board.component.html',
  styleUrls: ['./interactive-board.component.css'],
  imports: [CommonModule, FormsModule, ClassroomModule],
})
export class InteractiveBoardComponent implements OnInit, AfterViewInit {
  canvas!: fabric.Canvas;
  zoomLevel = 1; // Current zoom level
  panX = 0; // Horizontal pan offset
  panY = 0; // Vertical pan offset

  // Brush settings
  brushColor = '#000000'; // Default brush color
  brushWidth = 5; // Default brush width

  // Current tool
  currentTool: 'brush' | 'rectangle' | 'circle' = 'brush';
  // –§–ª–∞–≥ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –≤–∏–¥–µ–æ
  isFloatingVideo: boolean = false;
  floatingVideoPosition = { x: window.innerWidth - 320, y: 20 }; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É)
  dragging = false;
  offsetX = 0;
  offsetY = 0;


  constructor(private cdr: ChangeDetectorRef, public videoService: VideoCallService) {}

  ngOnInit(): void {
    console.log('üìå BoardComponent –∑–∞–≥—Ä—É–∂–µ–Ω');
    setTimeout(() => {
      if (!this.videoService.isFloatingVideoSubject.getValue()) {
        console.log('üü¢ –í–∫–ª—é—á–∞–µ–º –ø–ª–∞–≤–∞—é—â–µ–µ –≤–∏–¥–µ–æ');
        this.videoService.toggleFloatingVideo(true);
      } else {
        console.log('‚úÖ –ü–ª–∞–≤–∞—é—â–µ–µ –≤–∏–¥–µ–æ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ');
      }

      // üî• –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º Board
      setTimeout(() => {
        this.cdr.detectChanges();
      }, 100);
    }, 500);
  }
  ngAfterViewInit(): void {
    this.canvas = new fabric.Canvas('drawingCanvas', {
      isDrawingMode: true,
      width: window.innerWidth,
      height: window.innerHeight,
    });

    this.setBrush();
    this.addGrid();
    this.setupZoom();
    this.setupPan();
    this.trackObjectAddition();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫–∏—Å—Ç—å—é
    this.canvas.on('path:created', (event) => {
      const path = event.path;
      path.selectable = true;
      path.evented = true;
      this.canvas.add(path);
      this.canvas.setActiveObject(path);
      this.canvas.renderAll();
      this.canvas.discardActiveObject();
      this.canvas.setActiveObject(path);
      this.actionHistory.push(path);
      this.canvas.isDrawingMode = false;
      // this.canvas.renderAll();

      console.log('–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –∫–∏—Å—Ç—å—é:', path);
    });

  }

  // Zoom in and out
  zoomIn(): void {
    this.zoomLevel = Math.min(this.zoomLevel + 0.1, 3); // Limit zoom to 3x
    this.updateCanvasTransform();
  }

  zoomOut(): void {
    this.zoomLevel = Math.max(this.zoomLevel - 0.1, 0.5); // Limit zoom to 0.5x
    this.updateCanvasTransform();
  }

  zoomSelectedFigureIn(): void {
    const activeObject = this.canvas.getActiveObject();
    if (activeObject && activeObject instanceof fabric.Object) {
      console.log('–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ):', activeObject);
      activeObject.scaleX = (activeObject.scaleX || 1) * 1.1;
      activeObject.scaleY = (activeObject.scaleY || 1) * 1.1;
      activeObject.setCoords();
      this.canvas.renderAll();
    } else {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  }

  zoomSelectedFigureOut(): void {
    const activeObject = this.canvas.getActiveObject();
    if (activeObject && activeObject instanceof fabric.Object) {
      console.log('–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç (—É–º–µ–Ω—å—à–µ–Ω–∏–µ):', activeObject);
      activeObject.scaleX = (activeObject.scaleX || 1) / 1.1;
      activeObject.scaleY = (activeObject.scaleY || 1) / 1.1;
      activeObject.setCoords();
      this.canvas.renderAll();
    } else {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  }


  private disableDrawingHandlers(): void {
    this.canvas.off('mouse:down');
    this.canvas.off('mouse:move');
    this.canvas.off('mouse:up');
  }




  moveCanvas(direction: 'up' | 'down' | 'left' | 'right'): void {
    const step = 50; // Movement step
    switch (direction) {
      case 'up':
        this.panY -= step;
        break;
      case 'down':
        this.panY += step;
        break;
      case 'left':
        this.panX -= step;
        break;
      case 'right':
        this.panX += step;
        break;
    }
    this.updateCanvasTransform();
  }

  resetPosition(): void {
    this.panX = 0;
    this.panY = 0;
    this.zoomLevel = 1;
    this.updateCanvasTransform();
  }

  // Set brush properties
  setBrush(): void {
    this.canvas.freeDrawingBrush = new fabric.PencilBrush(this.canvas);
    this.canvas.freeDrawingBrush.color = this.brushColor;
    this.canvas.freeDrawingBrush.width = this.brushWidth;
  }

  // Change brush color
  changeBrushColor(color: string): void {
    this.brushColor = color;
    this.setBrush();
  }

  // Change brush width
  changeBrushWidth(width: number): void {
    this.brushWidth = width;
    this.setBrush();
  }

  // Select tool
  selectTool(tool: 'brush' | 'rectangle' | 'circle'): void {
    this.currentTool = tool;

    // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∏—Å—Ç–∏
    this.canvas.isDrawingMode = tool === 'brush';

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.disableDrawingHandlers();

    if (tool === 'rectangle' || tool === 'circle') {
      let shape: fabric.Rect | fabric.Circle | null = null;
      let startX = 0;
      let startY = 0;

      this.canvas.on('mouse:down', (opt) => {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
        if (this.canvas.getActiveObject()) {
          console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã: –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç');
          return;
        }

        const pointer = this.canvas.getPointer(opt.e);
        startX = pointer.x;
        startY = pointer.y;

        shape = tool === 'rectangle'
          ? new fabric.Rect({
            left: startX,
            top: startY,
            width: 0,
            height: 0,
            fill: 'transparent',
            stroke: this.brushColor,
            strokeWidth: this.brushWidth,
          })
          : new fabric.Circle({
            left: startX,
            top: startY,
            radius: 0,
            fill: 'transparent',
            stroke: this.brushColor,
            strokeWidth: this.brushWidth,
          });

        this.canvas.add(shape);
      });

      this.canvas.on('mouse:move', (opt) => {
        if (!shape || this.currentTool !== tool) return;

        const pointer = this.canvas.getPointer(opt.e);

        if (shape instanceof fabric.Rect) {
          shape.set({
            width: Math.abs(pointer.x - startX),
            height: Math.abs(pointer.y - startY),
            left: Math.min(pointer.x, startX),
            top: Math.min(pointer.y, startY),
          });
        } else if (shape instanceof fabric.Circle) {
          const radius = Math.sqrt(
            Math.pow(pointer.x - startX, 2) + Math.pow(pointer.y - startY, 2)
          );
          shape.set({ radius });
        }

        this.canvas.renderAll();
      });

      this.canvas.on('mouse:up', () => {
        shape = null;
      });
    }

    if (tool === 'brush') {
      this.canvas.isDrawingMode = true; // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
      this.setBrush(); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∏—Å—Ç—å
    } else {
      this.canvas.isDrawingMode = false; // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    }
  }

  // Draw rectangle
  drawRectangle(): void {
    const rect = new fabric.Rect({
      left: 100,
      top: 100,
      width: 100,
      height: 100,
      fill: 'transparent',
      stroke: this.brushColor,
      strokeWidth: this.brushWidth,
      scaleX: 1, // –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –ø–æ X
      scaleY: 1, // –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –ø–æ Y
    });
    this.canvas.add(rect);
    this.actionHistory.push(rect);
  }

  // Draw circle
  drawCircle(): void {
    const circle = new fabric.Circle({
      left: 150,
      top: 150,
      radius: 50,
      fill: 'transparent',
      stroke: this.brushColor,
      strokeWidth: this.brushWidth,
      scaleX: 1, // –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –ø–æ X
      scaleY: 1, // –ù–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –ø–æ Y
    });
    this.canvas.add(circle);
    this.actionHistory.push(circle);
  }


  private updateCanvasTransform(): void {
    this.canvas.setViewportTransform([
      this.zoomLevel,
      0,
      0,
      this.zoomLevel,
      this.panX,
      this.panY,
    ]);
  }

  private addGrid(): void {
    const gridSize = 50; // Size of each grid cell
    const width = this.canvas.getWidth()!;
    const height = this.canvas.getHeight()!;

    for (let i = 0; i < width; i += gridSize) {
      this.canvas.add(
        new fabric.Line([i, 0, i, height], {
          stroke: '#e0e0e0',
          selectable: false,
        })
      );
    }

    for (let i = 0; i < height; i += gridSize) {
      this.canvas.add(
        new fabric.Line([0, i, width, i], {
          stroke: '#e0e0e0',
          selectable: false,
        })
      );
    }
  }

  private setupZoom(): void {
    this.canvas.on('mouse:wheel', (opt: fabric.TEvent<WheelEvent>) => {
      console.log('–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞:', {
        deltaY: opt.e.deltaY,
        zoomLevel: this.zoomLevel,
      });
      const delta = opt.e.deltaY;
      const pointer = this.canvas.getPointer(opt.e); // –¢–æ—á–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      const zoomFactor = 0.999 ** delta;

      let newZoomLevel = this.zoomLevel * zoomFactor;
      newZoomLevel = Math.min(Math.max(newZoomLevel, 0.5), 3); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑—É–º–∞

      // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ö–æ–ª—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏
      const zoomPoint = new fabric.Point(pointer.x, pointer.y);
      this.canvas.zoomToPoint(zoomPoint, newZoomLevel);

      this.zoomLevel = newZoomLevel;

      opt.e.preventDefault();
      opt.e.stopPropagation();
    });
  }



  private setupPan(): void {
    this.canvas.on('mouse:down', (opt) => {
      const evt = opt.e as MouseEvent;
      if (evt.altKey) {
        this.canvas.isDrawingMode = false;
        this.canvas.setCursor('grab');
        this.canvas.renderAll();
      }
    });

    this.canvas.on('mouse:move', (opt) => {
      const evt = opt.e as MouseEvent;
      if (evt.altKey && evt.buttons === 1) {
        const delta = new fabric.Point(evt.movementX, evt.movementY);
        this.canvas.relativePan(delta);
      }
    });

    this.canvas.on('mouse:up', () => {
      this.canvas.isDrawingMode = this.currentTool === 'brush';
      this.canvas.setCursor('default');
      this.canvas.renderAll();
    });
  }

  @HostListener('window:resize')
  onResize(): void {
    this.canvas.setWidth(window.innerWidth);
    this.canvas.setHeight(window.innerHeight);
    this.addGrid();
  }

  addText(): void {
    const text = new fabric.Textbox('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', {
      left: 100,
      top: 100,
      fontSize: 20,
      fontFamily: 'Arial',
      fill: '#000000',
      width: 200,
      editable: true, // –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
    });

    this.canvas.add(text);
    this.canvas.setActiveObject(text); // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
    this.actionHistory.push(text);
    console.log('–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç:', text);
  }

  changeFontFamily(event: Event): void {
    const selectElement = event.target as HTMLSelectElement;
    const fontFamily = selectElement.value;

    const activeObject = this.canvas.getActiveObject();
    if (activeObject && activeObject.type === 'textbox') {
      (activeObject as fabric.Textbox).fontFamily = fontFamily;
      this.canvas.renderAll();
      console.log('–ò–∑–º–µ–Ω—ë–Ω —à—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞:', fontFamily);
    }
  }


  changeFontSize(event: Event): void {
    const inputElement = event.target as HTMLInputElement;
    const fontSize = parseInt(inputElement.value, 10);

    const activeObject = this.canvas.getActiveObject();
    if (activeObject && activeObject.type === 'textbox') {
      (activeObject as fabric.Textbox).fontSize = fontSize;
      this.canvas.renderAll();
      console.log('–ò–∑–º–µ–Ω—ë–Ω —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞:', fontSize);
    }
  }


  changeTextColor(event: Event): void {
    const inputElement = event.target as HTMLInputElement | null; // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
    if (inputElement && inputElement.value) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null
      const color = inputElement.value;
      const activeObject = this.canvas.getActiveObject();
      if (activeObject && activeObject.type === 'textbox') {
        (activeObject as fabric.Textbox).fill = color; // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
        this.canvas.renderAll();
        console.log('–ò–∑–º–µ–Ω—ë–Ω —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞:', color);
      } else {
        console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞.');
      }
    } else {
      console.error('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞.');
    }
  }

  resetCanvas(): void {
    this.canvas.clear(); // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å —Ö–æ–ª—Å—Ç–∞
    this.addGrid(); // –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç–∫—É –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
    this.actionHistory = [];
    console.log('–•–æ–ª—Å—Ç —Å–±—Ä–æ—à–µ–Ω');
  }

  actionHistory: fabric.Object[] = []; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
  trackObjectAddition(): void {
    this.canvas.on('object:added', (e) => {
      if (e.target) {
        e.target.selectable = true; // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç –≤—ã–¥–µ–ª—è–µ–º
        e.target.evented = true; // –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        this.actionHistory.push(e.target); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        console.log('–î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç:', e.target);
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  undoLastAction(): void {
    if (this.actionHistory.length > 0) {
      const lastObject = this.actionHistory.pop();
      if (lastObject) {
        this.canvas.remove(lastObject);
        console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ:', lastObject);
      }
    } else {
      console.log('–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
    }
  }

  // —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
  showDeleteModal: boolean = false;

  deleteObject(): void {
    console.log("–§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê!!!!!!");
    const activeObject = this.canvas.getActiveObject();
    if (activeObject) {
      this.canvas.remove(activeObject);
      this.actionHistory = this.actionHistory.filter(obj => obj !== activeObject); // –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      console.log('–û–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω:', activeObject);
      this.canvas.discardActiveObject();
      this.canvas.renderAll();
    } else {
      console.log('–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  }

  @HostListener('window:keydown', ['$event'])
  onKeyDown(event: KeyboardEvent): void {
    if (event.key === 'Delete' || event.key === 'Del') {
      const activeObject = this.canvas.getActiveObject();
      if (activeObject) {
        this.showDeleteModal = true; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      } else {
        console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
      }
    }
  }

  confirmDelete(): void {
    this.deleteObject();
    this.showDeleteModal = false;
  }

  cancelDelete(): void {
    this.showDeleteModal = false;
  }

  startResize(event: MouseEvent): void {
    event.preventDefault();

    console.log("üîÑ –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ");

    const startX = event.clientX;
    const startY = event.clientY;

    const onMouseMove = (moveEvent: MouseEvent) => {
      const deltaX = moveEvent.clientX - startX;
      const deltaY = moveEvent.clientY - startY;

      // –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ–ª—å—Ç—É –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã, —á—Ç–æ–±—ã —Ä–µ—Å–∞–π–∑ –±—ã–ª –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
      this.videoService.resizeVideo(deltaX, deltaY);
    };

    const onMouseUp = () => {
      console.log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ");
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
    };

    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
  }

  startDrag(event: MouseEvent): void {
    this.dragging = true;
    this.offsetX = event.clientX - this.videoService.floatingVideoPosition.x;
    this.offsetY = event.clientY - this.videoService.floatingVideoPosition.y;

    document.addEventListener("mousemove", this.onDragMove.bind(this));
    document.addEventListener("mouseup", this.stopDrag.bind(this));
  }

  onDragMove(event: MouseEvent): void {
    if (!this.dragging) return;

    const maxX = window.innerWidth - this.videoService.videoWidth;
    const maxY = window.innerHeight - this.videoService.videoHeight;

    this.videoService.floatingVideoPosition.x = Math.max(0, Math.min(event.clientX - this.offsetX, maxX));
    this.videoService.floatingVideoPosition.y = Math.max(0, Math.min(event.clientY - this.offsetY, maxY));

    this.cdr.detectChanges(); // üî• –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Angular
  }


  stopDrag(): void {
    this.dragging = false;
    document.removeEventListener("mousemove", this.onDragMove.bind(this));
    document.removeEventListener("mouseup", this.stopDrag.bind(this));
  }


}
