import { Component, AfterViewInit, HostListener, OnInit, ViewChild, ElementRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { VideoCallService } from '../../../services/video-call.service';
import { ClassroomModule } from '../../classroom.module';
import { ChangeDetectorRef } from '@angular/core';
import { WhiteWebSdk, Room, RoomPhase } from 'white-web-sdk';
import { WhiteboardService } from '../../../services/whiteboard.service';
import { ApplianceNames } from 'white-web-sdk';
import { LessonTabsService } from '../../../services/lesson-tabs.service';


@Component({
  selector: 'app-interactive-board',
  standalone: true,
  templateUrl: './interactive-board.component.html',
  styleUrls: ['./interactive-board.component.css'],
  imports: [CommonModule, FormsModule, ClassroomModule],
})
export class InteractiveBoardComponent implements OnInit, AfterViewInit {
  @ViewChild('whiteboardContainer', { static: false }) whiteboardContainer!: ElementRef<HTMLDivElement>;
  @ViewChild('videoCallElement', { static: false }) videoCallElement!: ElementRef;
  zoomLevel = 1; // Current zoom level
  panX = 0; // Horizontal pan offset
  panY = 0; // Vertical pan offset

  // Brush settings
  brushColor = '#000000'; // Default brush color
  brushWidth = 5; // Default brush width

  // Current tool
  currentTool: 'brush' | 'rectangle' | 'circle' = 'brush';
  // –§–ª–∞–≥ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –≤–∏–¥–µ–æ
  isFloatingVideo: boolean = false;
  floatingVideoPosition = { x: window.innerWidth - 320, y: 20 }; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É)
  dragging = false;
  offsetX = 0;
  offsetY = 0;
  private room?: Room;


  constructor(private cdr: ChangeDetectorRef, public videoService: VideoCallService,
    private whiteboardService: WhiteboardService, private lessonTabsService: LessonTabsService) { }

  ngOnInit(): void {
    this.whiteboardService.room$.subscribe((room) => {
      if (room) {
        console.log("üé® –ö–æ–º–Ω–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ:", room);
        this.room = room;
      } else {
        console.log("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –≤—Å–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
      }
    });
    console.log('üìå BoardComponent –∑–∞–≥—Ä—É–∂–µ–Ω');
    setTimeout(() => {
      if (!this.videoService.isFloatingVideoSubject.getValue()) {
        console.log('üü¢ –í–∫–ª—é—á–∞–µ–º –ø–ª–∞–≤–∞—é—â–µ–µ –≤–∏–¥–µ–æ');
        this.videoService.toggleFloatingVideo(true);
      } else {
        console.log('‚úÖ –ü–ª–∞–≤–∞—é—â–µ–µ –≤–∏–¥–µ–æ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ');
      }

      // üî• –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º Board
      setTimeout(() => {
        this.cdr.detectChanges();
      }, 100);
    }, 500);
  }

  getCurrentUserId(): string {
    return localStorage.getItem('userId') || 'guest';
  }

  ngAfterViewInit(): void {
    setTimeout(() => {
      const videoElements = document.querySelectorAll('app-video-call');
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ <app-video-call>:`, videoElements.length);
      this.videoService.onResize(new MouseEvent('resize'));
    }, 1000);
    console.log("üìå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ @ViewChild:", this.whiteboardContainer.nativeElement);
    this.whiteboardService.createRoomAndJoin(this.getCurrentUserId(), this.whiteboardContainer.nativeElement);
  }


  @HostListener('document:mousemove', ['$event'])
  onMouseMove(event: MouseEvent): void {
    this.videoService.onResize(event);
  }

  startDrag(event: MouseEvent): void {
    this.dragging = true;

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç floating-video
    const floatingVideo = document.querySelector('.floating-video') as HTMLElement;
    if (!floatingVideo) return;

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    const rect = floatingVideo.getBoundingClientRect();
    this.offsetX = event.clientX - rect.left;
    this.offsetY = event.clientY - rect.top;

    document.addEventListener('mousemove', this.onDragMove.bind(this));
    document.addEventListener('mouseup', this.stopDrag.bind(this));
  }

  onDragMove(event: MouseEvent): void {
    if (!this.dragging) return;

    const floatingVideo = document.querySelector('.floating-video') as HTMLElement;
    if (!floatingVideo) return;

    const maxX = window.innerWidth - floatingVideo.offsetWidth;
    const maxY = window.innerHeight - floatingVideo.offsetHeight;

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞
    const newX = Math.max(0, Math.min(event.clientX - this.offsetX, maxX));
    const newY = Math.max(0, Math.min(event.clientY - this.offsetY, maxY));

    console.log(`üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: (${newX}, ${newY})`);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∫ floating-video
    floatingVideo.style.left = `${newX}px`;
    floatingVideo.style.top = `${newY}px`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ
    this.videoService.floatingVideoPosition.x = newX;
    this.videoService.floatingVideoPosition.y = newY;

    this.cdr.detectChanges();
  }

  stopDrag(): void {
    this.dragging = false;
    document.removeEventListener('mousemove', this.onDragMove.bind(this));
    document.removeEventListener('mouseup', this.stopDrag.bind(this));
  }

  //—Ä–∏—Å–æ–≤–∞–Ω–∏–µ
  setDrawingMode(): void {
    if (this.room) {
      console.log("üñå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è...");
      this.room.setMemberState({
        currentApplianceName: ApplianceNames.pencil, // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –∫–∞—Ä–∞–Ω–¥–∞—à
        strokeColor: [0, 0, 0], // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
        strokeWidth: 4, // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
      });
      console.log("‚úÖ –†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–Ω–∞—Ç–∞ (room) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
    }
  }

  setTextMode(): void {
    if (this.room) {
      this.room.setMemberState({
        currentApplianceName: ApplianceNames.text,
        textSize: 16,
      });
    }
  }

  setEraserMode(): void {
    if (this.room) {
      this.room.setMemberState({
        currentApplianceName: ApplianceNames.eraser,
      });
    }
  }

  zoomIn(): void {
    if (this.room) {
      let scale = this.room.state.cameraState.scale;
      this.room.moveCamera({ scale: Math.min(scale + 0.2, 3) }); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º = 3x
    }
  }

  zoomOut(): void {
    if (this.room) {
      let scale = this.room.state.cameraState.scale;
      this.room.moveCamera({ scale: Math.max(scale - 0.2, 0.5) }); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º = 0.5x
    }
  }

  moveCanvas(x: number, y: number): void {
    if (this.room) {
      let camera = this.room.state.cameraState;
      this.room.moveCamera({
        centerX: camera.centerX + x,
        centerY: camera.centerY + y,
      });
    }
  }


  changeBrushColor(color: string): void {
    if (this.room) {
      this.room.setMemberState({
        strokeColor: this.hexToRgb(color),
      });
    }
  }

  changeBrushWidth(width: number): void {
    if (this.room) {
      this.room.setMemberState({
        strokeWidth: width,
      });
    }
  }

  selectTool(tool: 'pencil' | 'rectangle' | 'ellipse'): void {
    if (this.room) {
      this.room.setMemberState({
        currentApplianceName: ApplianceNames[tool as keyof typeof ApplianceNames],
      });
    }
  }

  setRectangleMode(): void {
    if (this.room) {
      this.room.setMemberState({
        currentApplianceName: ApplianceNames.rectangle,
        strokeColor: [255, 0, 0],
        strokeWidth: 3,
      });
    }
  }

  setEllipseMode(): void {
    if (this.room) {
      console.log("‚úçÔ∏è Writable –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:", this.room?.isWritable);
      this.room.setMemberState({
        currentApplianceName: ApplianceNames.ellipse,
        strokeColor: [0, 0, 255],
        strokeWidth: 3,
      });
      console.log("üîç –¢–µ–∫—É—â–∏–π state:", this.room?.state.memberState);
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–Ω–∞—Ç–∞ (room) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
    }
  }


  setLineMode(): void {
    if (this.room) {
      this.room.setMemberState({
        currentApplianceName: ApplianceNames.straight,
        strokeColor: [0, 0, 0],
        strokeWidth: 2,
      });
    }
  }

  clearBoard(): void {
    if (this.room) {
      this.room.cleanCurrentScene(false); // false - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ, –≤–∫–ª—é—á–∞—è PPT
    }
  }

  undoLastAction(): void {
    if (this.room) {
      const remainingUndos = this.room.undo();
      console.log(`üõë –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω: ${remainingUndos}`);
    }
  }

  setSelectionMode(): void {
    if (this.room) {
      this.room.setMemberState({
        currentApplianceName: ApplianceNames.clicker,
      });
    }
  }

  changeFontSize(event: Event): void {
    const inputElement = event.target as HTMLInputElement;
    const fontSize = parseInt(inputElement.value, 10);

    if (this.room) {
      this.room.setMemberState({
        textSize: fontSize,
      });
    }
  }

  changeTextColor(event: Event): void {
    const inputElement = event.target as HTMLInputElement;
    const color = inputElement.value;

    if (this.room) {
      this.room.setMemberState({
        strokeColor: this.hexToRgb(color),
      });
    }
  }

  resetPosition(): void {
    if (this.room) {
      this.room.moveCamera({
        centerX: 0,
        centerY: 0,
        scale: 1,
      });
    }
  }


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HEX –≤ RGB (—Ç–∞–∫ —Ç—Ä–µ–±—É–µ—Ç Agora)
  private hexToRgb(hex: string): number[] {
    const bigint = parseInt(hex.slice(1), 16);
    return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
  }

  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
  addStickyNote(): void {
    const note = document.createElement('div');
    note.className = 'sticky-note';
    note.contentEditable = 'true';
    note.innerText = '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞';
    note.style.position = 'absolute';
    note.style.top = '100px';
    note.style.left = '100px';
    note.style.backgroundColor = 'yellow';
    note.style.padding = '10px';
    note.style.borderRadius = '5px';
    note.style.cursor = 'move';

    document.body.appendChild(note);
  }

  addTextToBoard(text: string, x: number, y: number): void {
    if (this.room) {
      this.room.insertText(x, y, text);
    }
  }

}
