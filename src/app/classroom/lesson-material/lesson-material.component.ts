import { Component, OnDestroy, OnInit, ViewChild, AfterViewChecked, HostListener, Output, EventEmitter, Input } from '@angular/core';
import { BackgroundService } from '../../services/background.service';
import { Subscription } from 'rxjs';
import { LessonTabsService } from '../../services/lesson-tabs.service';
import { Router, ActivatedRoute } from '@angular/router';
import { VideoCallService } from '../../services/video-call.service';
import { LoaderComponent } from '../../shared/components/loader/loader.component';
import { AuthService } from '../../services/auth.service';
import { HomeworkService } from '../../services/homework.service';
import { LessonService } from '../../services/lesson.service';
import { MaterialService } from '../../services/material.service';
import { LessonNotesService } from '../../services/lesson-notes.service';
import { MatDialog } from '@angular/material/dialog';
import { LessonNotesModalComponent } from './lesson-notes-modal/lesson-notes-modal.component';

@Component({
  selector: 'app-lesson-material',
  templateUrl: './lesson-material.component.html',
  styleUrls: ['./lesson-material.component.css'],
})
export class LessonMaterialComponent implements OnInit, OnDestroy {
  backgroundStyle: string = '';
  private backgroundSubscription: Subscription | undefined;
  private isVideoCallStarted = false;
  showBoard = false;
  currentLesson: any = null;
  userRole: 'student' | 'teacher' = 'student';
  newStudentTask = '';
  newStudentQuestion = '';
  newTeacherTask = '';
  hoveredQuestion: string | null = null;
  hoveredItem: string | null = null;
  hoveredPosition: 'above' | 'below' = 'below';
  
  // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
  lessonTasks: any[] = [];
  lessonQuestions: any[] = [];
  lessonMaterials: any[] = [];
  isLoadingData = false;

  @Output() itemResolved = new EventEmitter<{ item: string, type: 'task' | 'question' }>();
  @Input() addHomeworkExternal?: (item: string) => void;

  constructor(
    private backgroundService: BackgroundService, 
    public lessonTabsService: LessonTabsService, 
    private router: Router, 
    private route: ActivatedRoute, 
    public videoService: VideoCallService,
    private authService: AuthService, 
    private homeworkService: HomeworkService,
    private lessonService: LessonService,
    private materialService: MaterialService,
    private lessonNotesService: LessonNotesService,
    private dialog: MatDialog
  ) { }

  trackByIndex(index: number, item: string): number {
    return index;
  }

  ngOnInit(): void {
    console.log('‚úÖ LessonMaterialComponent –∑–∞–≥—Ä—É–∂–µ–Ω');
    this.authService.currentRole$.subscribe(role => {
      if (role === 'student' || role === 'teacher') {
        this.userRole = role;
        console.log('üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', role);
      }
    });

    this.backgroundSubscription = this.backgroundService.background$.subscribe(
      (newBackground) => {
        this.backgroundStyle = newBackground;
      }
    );

    this.lessonTabsService.contentView$.subscribe((value) => {
      console.log('üîç Observed contentView:', value);
    });

    // –í–ò–î–ï–û-–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê
    /*
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–ª–∞—Å—Å
    if (this.videoService.getRegularVideoActive()) {
      console.log('üé• –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–ª–∞—Å—Å');
      this.videoService.startVideoCall(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
    }

    // –í—ã–∫–ª—é—á–∞–µ–º Floating Video –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–ª–∞—Å—Å
    this.videoService.setFloatingVideoActive(false);
    this.videoService.toggleFloatingVideo(false);

    this.route.queryParams.subscribe(params => {
      console.log('üìç –ü–æ–ª—É—á–µ–Ω—ã queryParams:', params);

      if (params['startCall'] === 'true') {
        console.log('üé• –°—Ç–∞—Ä—Ç –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É URL');
        this.videoService.startVideoCall();
      }
    });

    this.videoService.resetVideoSize();
    */

    console.log('üìç ActivatedRoute snapshot:', this.route.snapshot.paramMap.keys);
    console.log('üìç ActivatedRoute param id:', this.route.snapshot.paramMap.get('id'));

    this.route.paramMap.subscribe(params => {
      console.log('üìç paramMap —Å–æ–¥–µ—Ä–∂–∏—Ç:', params.keys);
      const lessonId = params.get('id');
      if (lessonId) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º lessonId: ${lessonId}`);
        this.lessonTabsService.setCurrentLessonId(lessonId);
        this.loadLessonData(lessonId);
        this.lessonNotesService.initNotesForLesson(lessonId);
      }
    });

    this.videoService.resetVideoSize();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ loadLessonData)
    this.lessonTabsService.currentLessonData$.subscribe((lesson) => {
      if (lesson) {
        this.currentLesson = lesson;
        console.log('üéì –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞:', lesson);
      }
    });
  }

  async loadLessonData(lessonId: string) {
    this.isLoadingData = true;
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Ä–æ–∫–∞:', lessonId);
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ê–ù–ù–´–ï –ü–ï–†–ï–î–ê–ù–ù–´–ï –ò–ó LESSON-MANAGEMENT –ß–ï–†–ï–ó LessonTabsService
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ LessonTabsService –∏–∑ lesson-management');
    
    this.isLoadingData = false;
  }

  ngOnDestroy(): void {
    if (this.backgroundSubscription) {
      console.log('üì¢ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç backgroundSubscription');
      this.backgroundSubscription.unsubscribe();
    }

    // ‚ùå –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –í–ò–î–ï–û, –ß–¢–û–ë–´ –û–ù–û –ù–ï –ü–†–û–ü–ê–î–ê–õ–û
    console.log(`üé• –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ showVideoCall$ = ${this.videoService.showVideoCallSubject.getValue()}`);
  }

  // —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è
  highlight: string | null = null;

  highlightCard(card: string) {
    this.highlight = card;
  }

  resetCard(card: string) {
    if (this.highlight === card) {
      this.highlight = null;
    }
  }

  //
  showLanguageModal: boolean = false; // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  selectedLanguage: string = ''; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Å–∫–∏
  openInteractiveBoard(): void {
    console.log('üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫', `${this.lessonTabsService.getCurrentLessonId()}/board`);
    this.showBoard = true;

    // –í–ò–î–ï–û-–í–´–ó–û–í–´ –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´
    /*
    this.videoService.setRegularVideoActive(false);
    this.videoService.setFloatingVideoActive(true);
    this.videoService.setFloatingVideoSize(320, 180);
    */
  }

  startVideoCall(): void {
    // –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - –°–û–°–†–ï–î–û–¢–û–ß–ò–ú–°–Ø –ù–ê –î–ê–ù–ù–´–• –£–†–û–ö–ê
    /*
    if (this.videoService.showVideoCallSubject.getValue()) {
      console.log('‚ö† –í–∏–¥–µ–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º');
      return;
    }

    console.log('üé• –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');
    this.videoService.startVideoCall();
    */
    console.log('üé• –í–∏–¥–µ–æ-–∑–≤–æ–Ω–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω');
  }

  set showVideoCall(value: boolean) {
    console.log('üîÑ showVideoCall –∏–∑–º–µ–Ω—ë–Ω:', value);
    this._showVideoCall = value;
  }

  get showVideoCall(): boolean {
    return this._showVideoCall;
  }

  private _showVideoCall = false;

  @HostListener('document:mousemove', ['$event'])
  onMouseMove(event: MouseEvent): void {
    // –í–ò–î–ï–û-–í–´–ó–û–í–´ –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´
    // this.videoService.onResize(event);
  }

  startDrag(event: MouseEvent): void {
    // –í–ò–î–ï–û-–í–´–ó–û–í–´ –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´
    // this.videoService.startResize(event);
  }

  showGabarit = false;

  toggleGabarit(): void {
    this.showGabarit = !this.showGabarit;
    if (this.showGabarit) {
      this.showBoard = false;
    }
  }

  selectView(view: 'board' | 'materials') {
    if (view === 'board') {
      this.showBoard = true;
      this.showGabarit = false;
    } else {
      this.showBoard = false;
      this.showGabarit = true;
    }
  }

  tasksCollapsed = false;

  toggleTasksCollapsed() {
    this.tasksCollapsed = !this.tasksCollapsed;
  }

  toggleBoard(): void {
    this.showBoard = !this.showBoard;
    if (this.showBoard) {
      this.showGabarit = false;
    }
  }

  resolvedItems = new Set<string>();

  toggleResolved(item: string, type: 'task' | 'question') {
    if (this.resolvedItems.has(item)) {
      this.resolvedItems.delete(item);
    } else {
      this.resolvedItems.add(item);
    }

    this.itemResolved.emit({ item, type });
  }

  isResolved(item: string): boolean {
    return this.resolvedItems.has(item);
  }

  addStudentTask() {
    if (this.newStudentTask.trim()) {
      // –í–†–ï–ú–ï–ù–ù–û –ë–ï–ó API - –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–û
      if (this.currentLesson) {
        this.currentLesson.studentTasks.push(this.newStudentTask.trim());
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
      }
      this.newStudentTask = '';
    }
  }

  addStudentQuestion() {
    if (this.newStudentQuestion.trim()) {
      // –í–†–ï–ú–ï–ù–ù–û –ë–ï–ó API - –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–û
      if (this.currentLesson) {
        this.currentLesson.studentQuestions.push(this.newStudentQuestion.trim());
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
      }
      this.newStudentQuestion = '';
    }
  }

  addTeacherTask() {
    if (this.newTeacherTask.trim()) {
      // –í–†–ï–ú–ï–ù–ù–û –ë–ï–ó API - –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–û
      if (this.currentLesson) {
        this.currentLesson.teacherTasks.push(this.newTeacherTask.trim());
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
      }
      this.newTeacherTask = '';
    }
  }

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–º
  openNotes(section: 'tasks' | 'questions' | 'materials', itemId: string, itemText: string) {
    const dialogRef = this.dialog.open(LessonNotesModalComponent, {
      width: '800px',
      maxWidth: '90vw',
      data: {
        lessonId: this.lessonTabsService.getCurrentLessonId(),
        section,
        itemId,
        itemText
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        console.log('üìù –ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
      }
    });
  }

  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
  postponeQuestion(question: string): void {
    console.log('‚è≠ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:', question);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
  }

  goToMindmap(item: string) {
    console.log('üß† –ü–µ—Ä–µ—Ö–æ–¥ –∫ mindmap –¥–ª—è:', item);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ mindmap
    // this.router.navigate(['/mindmap'], { queryParams: { item: item } });
  }

  goToDictionary(item: string) {
    console.log('üìò –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–æ–≤–∞—Ä—é –¥–ª—è:', item);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–æ–≤–∞—Ä—é
    // this.router.navigate(['/vocabulary'], { queryParams: { search: item } });
  }

  postpone(item: string): void {
    console.log('‚è≠ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:', item);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
  }

  addToHomework(item: string): void {
    console.log('üìö –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:', item);
    if (this.addHomeworkExternal) {
      this.addHomeworkExternal(item);
    }
  }

  onHover(item: string, event: MouseEvent) {
    this.hoveredItem = item;
    const rect = (event.target as HTMLElement).getBoundingClientRect();
    const windowHeight = window.innerHeight;
    this.hoveredPosition = rect.bottom + 200 > windowHeight ? 'above' : 'below';
  }

  getMaterialIcon(materialType: string): string {
    switch (materialType) {
      case 'text': return 'üìÑ';
      case 'audio': return 'üéß';
      case 'video': return 'üé¨';
      case 'pdf': return 'üìî';
      case 'image': return 'üñºÔ∏è';
      default: return 'üìé';
    }
  }

  getStudentMaterials(): any[] {
    if (!this.currentLesson?.materials) return [];
    return this.currentLesson.materials.filter((m: any) => m.createdBy === this.currentLesson?.studentId);
  }

  getTeacherMaterials(): any[] {
    if (!this.currentLesson?.materials) return [];
    return this.currentLesson.materials.filter((m: any) => m.createdBy === this.currentLesson?.teacherId);
  }

  newHomeworkEntry = '';

  submitHomework(): void {
    if (this.newHomeworkEntry.trim()) {
      this.currentLesson.homework.push(this.newHomeworkEntry.trim());
      this.newHomeworkEntry = '';
    }
  }

  // Force recompilation - angular cache fix
}
