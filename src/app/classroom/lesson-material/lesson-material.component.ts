import { Component, OnDestroy, OnInit, ViewChild, AfterViewChecked, HostListener, Output, EventEmitter, Input } from '@angular/core';
import { BackgroundService } from '../../services/background.service';
import { Subscription } from 'rxjs';
import { LessonTabsService } from '../../services/lesson-tabs.service';
import { Router, ActivatedRoute } from '@angular/router';
import { VideoCallService } from '../../services/video-call.service';
import { LoaderComponent } from '../../shared/components/loader/loader.component';
import { AuthService } from '../../services/auth.service';
import { HomeworkService } from '../../services/homework.service';
import { LessonService } from '../../services/lesson.service';
import { MaterialService } from '../../services/material.service';
import { LessonNotesService } from '../../services/lesson-notes.service';
import { MatDialog } from '@angular/material/dialog';
import { LessonNotesModalComponent } from './lesson-notes-modal/lesson-notes-modal.component';
import { HomeworkModalComponent } from './homework-modal/homework-modal.component';
import { GroupClassService, CreateGroupClassDto, GroupClass } from '../../services/group-class.service';

@Component({
  selector: 'app-lesson-material',
  templateUrl: './lesson-material.component.html',
  styleUrls: ['./lesson-material.component.css'],
})
export class LessonMaterialComponent implements OnInit, OnDestroy {
  backgroundStyle: string = '';
  private backgroundSubscription: Subscription | undefined;
  private isVideoCallStarted = false;
  showBoard = false;
  currentLesson: any = null;
  userRole: 'student' | 'teacher' = 'student';
  newStudentTask = '';
  newStudentQuestion = '';
  newTeacherTask = '';
  newTeacherQuestion = '';
  hoveredQuestion: string | null = null;
  hoveredItem: string | null = null;
  hoveredPosition: 'above' | 'below' = 'below';
  
  // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
  lessonTasks: any[] = [];
  lessonQuestions: any[] = [];
  lessonMaterials: any[] = [];
  isLoadingData = false;
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  homeworkItems: any[] = [];
  coveredInClass = new Set<string>();

  @Output() itemResolved = new EventEmitter<{ item: string, type: 'task' | 'question' }>();
  @Input() addHomeworkExternal?: (item: string) => void;

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
  private hideTimeout: any = null;
  private isHoveringActions = false;

  lessonStarted = false;
  countdown = 3000; // 3000 —Å–µ–∫—É–Ω–¥
  private countdownInterval: any = null;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–º
  showClassManagement = false;
  currentClass: any = null;
  showStudentsList = false;
  availableStudents: any[] = []; // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

  constructor(
    private backgroundService: BackgroundService, 
    public lessonTabsService: LessonTabsService, 
    private router: Router, 
    private route: ActivatedRoute, 
    public videoService: VideoCallService,
    private authService: AuthService, 
    private homeworkService: HomeworkService,
    private lessonService: LessonService,
    private materialService: MaterialService,
    private lessonNotesService: LessonNotesService,
    private dialog: MatDialog,
    private groupClassService: GroupClassService
  ) { }

  trackByIndex(index: number, item: string): number {
    return index;
  }

  ngOnInit(): void {
    console.log('‚úÖ LessonMaterialComponent –∑–∞–≥—Ä—É–∂–µ–Ω');
    this.authService.currentRole$.subscribe(role => {
      if (role === 'student' || role === 'teacher') {
        this.userRole = role;
        console.log('üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', role);
        
        // –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–º
        if (role === 'teacher') {
          this.showClassManagement = true;
          this.loadTeacherClasses();
        }
      }
    });

    this.backgroundSubscription = this.backgroundService.background$.subscribe(
      (newBackground) => {
        this.backgroundStyle = newBackground;
      }
    );

    this.lessonTabsService.contentView$.subscribe((value) => {
      console.log('üîç Observed contentView:', value);
    });

    // –í–ò–î–ï–û-–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê
    /*
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–ª–∞—Å—Å
    if (this.videoService.getRegularVideoActive()) {
      console.log('üé• –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–ª–∞—Å—Å');
      this.videoService.startVideoCall(); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
    }

    // –í—ã–∫–ª—é—á–∞–µ–º Floating Video –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–ª–∞—Å—Å
    this.videoService.setFloatingVideoActive(false);
    this.videoService.toggleFloatingVideo(false);

    this.route.queryParams.subscribe(params => {
      console.log('üìç –ü–æ–ª—É—á–µ–Ω—ã queryParams:', params);

      if (params['startCall'] === 'true') {
        console.log('üé• –°—Ç–∞—Ä—Ç –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É URL');
        this.videoService.startVideoCall();
      }
    });

    this.videoService.resetVideoSize();
    */

    console.log('üìç ActivatedRoute snapshot:', this.route.snapshot.paramMap.keys);
    console.log('üìç ActivatedRoute param id:', this.route.snapshot.paramMap.get('id'));

    this.route.paramMap.subscribe(async params => {
      console.log('üìç paramMap —Å–æ–¥–µ—Ä–∂–∏—Ç:', params.keys);
      const lessonId = params.get('id');
      if (lessonId) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º lessonId: ${lessonId}`);
        this.lessonTabsService.setCurrentLessonId(lessonId);
        this.loadLessonData(lessonId);
        await this.lessonNotesService.initNotesForLesson(lessonId);
      }
    });

    //this.videoService.resetVideoSize(); // TODO –í–ò–î–ï–û-–í–´–ó–û–í–´ –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ loadLessonData)
    this.lessonTabsService.currentLessonData$.subscribe((lesson) => {
      if (lesson) {
        this.currentLesson = lesson;
        console.log('üéì –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞:', lesson);
      }
    });
  }

  async loadLessonData(lessonId: string) {
    this.isLoadingData = true;
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Ä–æ–∫–∞:', lessonId);
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ê–ù–ù–´–ï –ü–ï–†–ï–î–ê–ù–ù–´–ï –ò–ó LESSON-MANAGEMENT –ß–ï–†–ï–ó LessonTabsService
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ LessonTabsService –∏–∑ lesson-management');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    this.loadHomeworkItems(lessonId);
    
    this.isLoadingData = false;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏–∑ localStorage
  private loadHomeworkItems(lessonId: string) {
    const savedHomework = localStorage.getItem(`homework_${lessonId}`);
    const savedCovered = localStorage.getItem(`covered_${lessonId}`);
    
    if (savedHomework) {
      this.homeworkItems = JSON.parse(savedHomework);
      console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:', this.homeworkItems);
    }
    
    if (savedCovered) {
      this.coveredInClass = new Set(JSON.parse(savedCovered));
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è, —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –≤ –∫–ª–∞—Å—Å–µ:', Array.from(this.coveredInClass));
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤ localStorage
  private saveHomeworkItems() {
    const lessonId = this.lessonTabsService.getCurrentLessonId();
    if (lessonId) {
      localStorage.setItem(`homework_${lessonId}`, JSON.stringify(this.homeworkItems));
      localStorage.setItem(`covered_${lessonId}`, JSON.stringify(Array.from(this.coveredInClass)));
      console.log('üíæ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
    }
  }

  ngOnDestroy(): void {
    if (this.backgroundSubscription) {
      console.log('üì¢ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç backgroundSubscription');
      this.backgroundSubscription.unsubscribe();
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (this.hideTimeout) {
      clearTimeout(this.hideTimeout);
      this.hideTimeout = null;
    }

    if (this.countdownInterval) {
      clearInterval(this.countdownInterval);
    }

    // ‚ùå –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –í–ò–î–ï–û, –ß–¢–û–ë–´ –û–ù–û –ù–ï –ü–†–û–ü–ê–î–ê–õ–û
    console.log(`üé• –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ showVideoCall$ = ${this.videoService.showVideoCallSubject.getValue()}`);
  }

  // —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è
  highlight: string | null = null;

  highlightCard(card: string) {
    this.highlight = card;
  }

  resetCard(card: string) {
    if (this.highlight === card) {
      this.highlight = null;
    }
  }

  //
  showLanguageModal: boolean = false; // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  selectedLanguage: string = ''; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Å–∫–∏
  openInteractiveBoard(): void {
    console.log('üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫', `${this.lessonTabsService.getCurrentLessonId()}/board`);
    this.showBoard = true;

    // –í–ò–î–ï–û-–í–´–ó–û–í–´ –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´
    /*
    this.videoService.setRegularVideoActive(false);
    this.videoService.setFloatingVideoActive(true);
    this.videoService.setFloatingVideoSize(320, 180);
    */
  }

  startVideoCall(): void {
    if (this.videoService.showVideoCallSubject.getValue()) {
      console.log('‚ö† –í–∏–¥–µ–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º');
      return;
    }

    console.log('üé• –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');
    this.videoService.startVideoCall();
  }

  set showVideoCall(value: boolean) {
    console.log('üîÑ showVideoCall –∏–∑–º–µ–Ω—ë–Ω:', value);
    this._showVideoCall = value;
  }

  get showVideoCall(): boolean {
    return this._showVideoCall;
  }

  private _showVideoCall = false;

  @HostListener('document:mousemove', ['$event'])
  onMouseMove(event: MouseEvent): void {
    // –í–ò–î–ï–û-–í–´–ó–û–í–´ –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´
    // this.videoService.onResize(event);
  }

  startDrag(event: MouseEvent): void {
    // –í–ò–î–ï–û-–í–´–ó–û–í–´ –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´
    // this.videoService.startResize(event);
  }

  showGabarit = false;

  toggleGabarit(): void {
    this.showGabarit = !this.showGabarit;
    if (this.showGabarit) {
      this.showBoard = false;
      this.showClassManagement = false; // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–º
    }
  }

  selectView(view: 'board' | 'materials') {
    if (view === 'board') {
      this.showBoard = true;
      this.showGabarit = false;
      this.showClassManagement = false;
    } else {
      this.showBoard = false;
      this.showGabarit = true;
      this.showClassManagement = false;
    }
  }

  tasksCollapsed = false;

  toggleTasksCollapsed() {
    this.tasksCollapsed = !this.tasksCollapsed;
  }

  toggleBoard(): void {
    this.showBoard = !this.showBoard;
    if (this.showBoard) {
      this.showGabarit = false;
      this.showClassManagement = false; // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–º
    }
  }

  resolvedItems = new Set<string>();

  toggleResolved(item: string, type: 'task' | 'question') {
    if (this.resolvedItems.has(item)) {
      this.resolvedItems.delete(item);
    } else {
      this.resolvedItems.add(item);
    }

    this.itemResolved.emit({ item, type });
  }

  isResolved(item: string): boolean {
    return this.resolvedItems.has(item);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
  isAddedToHomework(itemId: string): boolean {
    return this.homeworkItems.some(item => item.itemId === itemId);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑–æ–±—Ä–∞–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–µ
  isCoveredInClass(itemId: string): boolean {
    return this.coveredInClass.has(itemId);
  }

  addStudentTask() {
    if (this.newStudentTask.trim() && this.currentLesson) {
      const currentUser = this.authService.getCurrentUser();
      if (!currentUser) return;

      const taskData = {
        lessonId: this.currentLesson.id,
        title: this.newStudentTask.trim(),
        description: null,
        createdBy: currentUser.id,
        createdByRole: 'student' as const
      };

      this.lessonService.addTaskToLesson(taskData).subscribe({
        next: (newTask) => {
          if (!this.currentLesson.studentTasks) {
            this.currentLesson.studentTasks = [];
          }
          this.currentLesson.studentTasks.push(newTask);
          console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î:', newTask);
          console.log('studentTasks –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', this.currentLesson.studentTasks);
          this.newStudentTask = '';
        },
        error: (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        }
      });
    }
  }

  addStudentQuestion() {
    if (this.newStudentQuestion.trim() && this.currentLesson) {
      const currentUser = this.authService.getCurrentUser();
      if (!currentUser) return;

      const questionData = {
        lessonId: this.currentLesson.id,
        question: this.newStudentQuestion.trim(),
        createdBy: currentUser.id,
        createdByRole: 'student' as const
      };

      this.lessonService.addQuestionToLesson(questionData).subscribe({
        next: (newQuestion) => {
          if (this.currentLesson) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            if (!this.currentLesson.studentQuestions) {
              this.currentLesson.studentQuestions = [];
            }
            this.currentLesson.studentQuestions.push(newQuestion);
          }
          this.newStudentQuestion = '';
          console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î:', newQuestion);
        },
        error: (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        }
      });
    }
  }

  addTeacherTask() {
    if (this.newTeacherTask.trim() && this.currentLesson) {
      const currentUser = this.authService.getCurrentUser();
      if (!currentUser) return;

      const taskData = {
        lessonId: this.currentLesson.id,
        title: this.newTeacherTask.trim(),
        description: null,
        createdBy: currentUser.id,
        createdByRole: 'teacher' as const
      };

      this.lessonService.addTaskToLesson(taskData).subscribe({
        next: (newTask) => {
          if (this.currentLesson) {
            if (!this.currentLesson.teacherTasks) {
              this.currentLesson.teacherTasks = [];
            }
            this.currentLesson.teacherTasks.push(newTask);
          }
          this.newTeacherTask = '';
          console.log('‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î:', newTask);
        },
        error: (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        }
      });
    }
  }

  addTeacherQuestion() {
    if (this.newTeacherQuestion.trim() && this.currentLesson) {
      const currentUser = this.authService.getCurrentUser();
      if (!currentUser) return;

      const questionData = {
        lessonId: this.currentLesson.id,
        question: this.newTeacherQuestion.trim(),
        createdBy: currentUser.id,
        createdByRole: 'teacher' as const
      };

      this.lessonService.addQuestionToLesson(questionData).subscribe({
        next: (newQuestion) => {
          if (this.currentLesson) {
            if (!this.currentLesson.teacherQuestions) {
              this.currentLesson.teacherQuestions = [];
            }
            this.currentLesson.teacherQuestions.push(newQuestion);
          }
          this.newTeacherQuestion = '';
          console.log('‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î:', newQuestion);
        },
        error: (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        }
      });
    }
  }

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–º
  openNotes(section: 'tasks' | 'questions' | 'materials', itemId: string, itemText: string) {
    const dialogRef = this.dialog.open(LessonNotesModalComponent, {
      width: '900px',
      maxWidth: '95vw',
      data: {
        lessonId: this.lessonTabsService.getCurrentLessonId(),
        section,
        itemId,
        itemText,
        lessonData: {
          studentTasks: this.currentLesson?.studentTasks || [],
          teacherTasks: this.currentLesson?.teacherTasks || [],
          studentQuestions: this.currentLesson?.studentQuestions || [],
          teacherQuestions: this.currentLesson?.teacherQuestions || [],
          materials: this.currentLesson?.materials || []
        }
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        console.log('üìù –ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç gabarit-page
  onGabaritOpenNotes(event: {section: 'materials', itemId: string, itemText: string}) {
    this.openNotes(event.section, event.itemId, event.itemText);
  }

  onGabaritAddToHomework(event: {type: string, materialTitle: string, materialId: string}) {
    this.addToHomework('material', event.materialTitle, event.materialId);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
  addToHomework(type: 'task' | 'question' | 'material', title: string, itemId: string) {
    const dialogRef = this.dialog.open(HomeworkModalComponent, {
      width: '700px',
      maxWidth: '90vw',
      data: {
        type,
        title,
        itemId
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        console.log('üìã –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', result);
        
        const currentUser = this.authService.getCurrentUser();
        const lessonId = this.lessonTabsService.getCurrentLessonId();
        
        if (!currentUser || !lessonId) {
          console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—Ä–æ–∫–∞');
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        const homeworkData = {
          lessonId: lessonId,
          title: result.title || title,
          description: result.description || '',
          dueDate: result.dueDate ? new Date(result.dueDate) : new Date(),
          assignedBy: currentUser.id,
          assignedTo: this.currentLesson?.studentId || currentUser.id,
          sourceType: type,
          sourceItemId: itemId,
          sourceItemText: title,
          materialIds: type === 'material' ? [itemId] : []
        };

        this.homeworkService.createHomeworkFromLesson(homeworkData).subscribe({
          next: (homework) => {
            console.log('‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', homework);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const homeworkItem = {
              id: homework.id || Date.now().toString(),
              type,
              title: homework.title || title,
              description: homework.description || '',
              dueDate: homework.dueDate || new Date().toISOString(),
              status: homework.status || 'unfinished',
              itemId,
              createdAt: homework.assignedAt ? homework.assignedAt.toString() : new Date().toISOString(),
              lessonId: homework.lessonId || lessonId,
              createdInClass: homework.createdInClass !== undefined ? homework.createdInClass : true
            };
            
            this.homeworkItems.push(homeworkItem);
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ –≤ –∫–ª–∞—Å—Å–µ –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ/–≤–æ–ø—Ä–æ—Å
            if (type === 'task' || type === 'question') {
              this.coveredInClass.add(itemId);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            this.saveHomeworkItems();
            
            console.log('‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', homeworkItem);
          },
          error: (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
            
            // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            const homeworkItem = {
              id: Date.now().toString(),
              type,
              title: result.title || title,
              description: result.description || '',
              dueDate: result.dueDate || new Date().toISOString(),
              status: 'unfinished',
              itemId,
              createdAt: new Date().toISOString(),
              lessonId: lessonId,
              createdInClass: true
            };
            
            this.homeworkItems.push(homeworkItem);
            this.coveredInClass.add(itemId);
            this.saveHomeworkItems();
          }
        });
      }
    });
  }

  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
  postponeQuestion(question: string): void {
    console.log('‚è≠ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:', question);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
  }

  goToMindmap(item: string) {
    console.log('üß† –ü–µ—Ä–µ—Ö–æ–¥ –∫ mindmap –¥–ª—è:', item);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ mindmap
    // this.router.navigate(['/mindmap'], { queryParams: { item: item } });
  }

  goToDictionary(item: string) {
    console.log('üìò –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–æ–≤–∞—Ä—é –¥–ª—è:', item);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–æ–≤–∞—Ä—é
    // this.router.navigate(['/vocabulary'], { queryParams: { search: item } });
  }

  postpone(item: string): void {
    console.log('‚è≠ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:', item);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
  }

  onHover(item: string, event: MouseEvent) {
    // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä —Å–∫—Ä—ã—Ç–∏—è
    if (this.hideTimeout) {
      clearTimeout(this.hideTimeout);
      this.hideTimeout = null;
    }
    
    this.hoveredItem = item;
    const rect = (event.target as HTMLElement).getBoundingClientRect();
    const windowHeight = window.innerHeight;
    this.hoveredPosition = rect.bottom + 200 > windowHeight ? 'above' : 'below';
  }

  onLeaveItem() {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –∫–Ω–æ–ø–æ–∫
    this.hideTimeout = setTimeout(() => {
      if (!this.isHoveringActions) {
        this.hoveredItem = null;
      }
    }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞
  }

  onEnterActions() {
    // –û—Ç–º–µ–Ω—è–µ–º —Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    this.isHoveringActions = true;
    if (this.hideTimeout) {
      clearTimeout(this.hideTimeout);
      this.hideTimeout = null;
    }
  }

  onLeaveActions() {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å –Ω–∏—Ö
    this.isHoveringActions = false;
    this.hideTimeout = setTimeout(() => {
      this.hoveredItem = null;
    }, 100); // –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å –∫–Ω–æ–ø–æ–∫
  }

  getMaterialIcon(materialType: string): string {
    switch (materialType) {
      case 'text': return 'üìÑ';
      case 'audio': return 'üéß';
      case 'video': return 'üé¨';
      case 'pdf': return 'üìî';
      case 'image': return 'üñºÔ∏è';
      default: return 'üìé';
    }
  }

  getStudentMaterials(): any[] {
    if (!this.currentLesson?.materials) return [];
    return this.currentLesson.materials.filter((m: any) => m.createdBy === this.currentLesson?.studentId);
  }

  getTeacherMaterials(): any[] {
    if (!this.currentLesson?.materials) return [];
    return this.currentLesson.materials.filter((m: any) => m.createdBy === this.currentLesson?.teacherId);
  }

  newHomeworkEntry = '';

  submitHomework(): void {
    if (this.newHomeworkEntry.trim()) {
      this.currentLesson.homework.push(this.newHomeworkEntry.trim());
      this.newHomeworkEntry = '';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç gabarit-page


  // –û—Ç–º–µ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
  markHomeworkAsCompleted(homeworkId: string) {
    const currentUser = this.authService.getCurrentUser();
    if (!currentUser) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    this.homeworkService.completeHomeworkItem(homeworkId, currentUser.id).subscribe({
      next: (completedHomework) => {
        console.log('‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ:', completedHomework);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const homeworkIndex = this.homeworkItems.findIndex(item => item.id === homeworkId);
        if (homeworkIndex >= 0) {
          this.homeworkItems[homeworkIndex].status = 'finished';
          this.homeworkItems[homeworkIndex].isCompleted = true;
          this.homeworkItems[homeworkIndex].completedAt = new Date().toISOString();
          this.saveHomeworkItems();
        }
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ:', error);
      }
    });
  }

  // –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  markTaskAsCompleted(taskId: string) {
    console.log('üü¢ markTaskAsCompleted –≤—ã–∑–≤–∞–Ω —Å:', taskId);
    const currentUser = this.authService.getCurrentUser();
    if (!currentUser) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }
    this.homeworkService.completeTask(taskId, currentUser.id).subscribe({
      next: (completedTask) => {
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è:', completedTask);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.resolvedItems.add(taskId);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –µ—ë
        const relatedHomework = this.homeworkItems.find(item => 
          item.itemId === taskId && item.type === 'task'
        );
        if (relatedHomework) {
          relatedHomework.status = 'finished';
          relatedHomework.isCompleted = true;
          relatedHomework.completedAt = new Date().toISOString();
          this.saveHomeworkItems();
        }
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:', error);
      }
    });
  }

  // –û—Ç–º–µ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
  markQuestionAsCompleted(questionId: string) {
    console.log('üü£ markQuestionAsCompleted –≤—ã–∑–≤–∞–Ω —Å:', questionId);
    const currentUser = this.authService.getCurrentUser();
    if (!currentUser) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }
    this.homeworkService.completeQuestion(questionId, currentUser.id).subscribe({
      next: (completedQuestion) => {
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π:', completedQuestion);
        this.resolvedItems.add(questionId);
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ:', error);
      }
    });
  }

  // Force recompilation - angular cache fix

  async startLesson() {
    const lessonId = this.lessonTabsService.getCurrentLessonId();
    const currentUser = this.authService.getCurrentUser();
    if (!lessonId || !currentUser) {
      console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —É—Ä–æ–∫–∞');
      return;
    }
    try {
      await this.lessonService.startLesson(lessonId, currentUser.id).toPromise();
      // –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
      const startedLesson = await this.lessonService.getLessonById(lessonId).toPromise();
      alert('–°—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞: ' + (startedLesson?.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'));
      this.lessonStarted = true;
      this.countdown = 30;
      this.countdownInterval = setInterval(async () => {
        if (this.countdown > 0) {
          this.countdown--;
        } else {
          clearInterval(this.countdownInterval);
          // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫
          try {
            await this.lessonService.endLesson(lessonId, currentUser.id).toPromise();
            // –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            const endedLesson = await this.lessonService.getLessonById(lessonId).toPromise();
            alert('–°—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ' + (endedLesson?.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'));
            console.log('‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω (—Å—Ç–∞—Ç—É—Å completed –≤ –ë–î)');
          } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', err);
          }
        }
      }, 1000);
      console.log('‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç (—Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î)');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É—Ä–æ–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–º
  toggleClassManagement(): void {
    this.showClassManagement = !this.showClassManagement;
    if (this.showClassManagement) {
      this.showBoard = false;
      this.showGabarit = false;
    }
  }

  openCreateClassDialog(): void {
    console.log('üìù –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞');
    
    const className = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "DELF B1 - –ì—Ä—É–ø–ø–∞ 1"):');
    if (!className) return;
    
    const levelOptions = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2'];
    const level = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å DELF/DALF:\n${levelOptions.map((l, i) => `${i+1}. ${l}`).join('\n')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:`) || '1';
    const selectedLevel = levelOptions[parseInt(level) - 1] || 'B1';
    
    const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):') || `–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É DELF —É—Ä–æ–≤–Ω—è ${selectedLevel}`;
    
    const maxStudents = parseInt(prompt('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10):') || '10');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞
    const lessonDate = prompt('–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞ (–¥–¥/–º–º/–≥–≥–≥–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä 25/12/2023):');
    const lessonTime = prompt('–í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞ (—á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 14:30):');
    
    let scheduledDate = new Date();
    if (lessonDate && lessonTime) {
      try {
        const [day, month, year] = lessonDate.split('/');
        const [hours, minutes] = lessonTime.split(':');
        scheduledDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hours), parseInt(minutes));
      } catch (error) {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è');
      }
    }
    
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId) {
      alert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    const createClassDto: CreateGroupClassDto = {
      name: className,
      level: selectedLevel,
      description: description,
      maxStudents: maxStudents,
      teacherId: teacherId,
      scheduledAt: scheduledDate.toISOString()
    };

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ API
    this.groupClassService.createGroupClass(createClassDto).subscribe({
      next: (createdClass: GroupClass) => {
        console.log('‚úÖ –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω –Ω–∞ –±–µ–∫–µ–Ω–¥–µ:', createdClass);
        this.currentClass = createdClass;
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.saveClassToStorage();
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  }

  loadTeacherClasses(): void {
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId) return;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –±–µ–∫–µ–Ω–¥–∞
    this.groupClassService.getTeacherGroupClasses(teacherId).subscribe({
      next: (classes: GroupClass[]) => {
        console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª–∞—Å—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –±–µ–∫–µ–Ω–¥–∞:', classes);
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
        this.currentClass = classes.find((cls: any) => cls.status === 'active') || null;
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem(`teacher_classes_${teacherId}`, JSON.stringify(classes));
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–æ–≤ —Å –±–µ–∫–µ–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error);
        
        // Fallback –Ω–∞ localStorage
        const savedClasses = localStorage.getItem(`teacher_classes_${teacherId}`);
        if (savedClasses) {
          const classes = JSON.parse(savedClasses);
          this.currentClass = classes.find((cls: any) => cls.status === 'active') || null;
          console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª–∞—Å—Å—ã –∏–∑ localStorage:', classes);
        }
      }
    });
  }

  saveClassToStorage(): void {
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId || !this.currentClass) return;
    
    const savedClasses = localStorage.getItem(`teacher_classes_${teacherId}`);
    let classes = savedClasses ? JSON.parse(savedClasses) : [];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    const existingIndex = classes.findIndex((cls: any) => cls.id === this.currentClass.id);
    if (existingIndex >= 0) {
      classes[existingIndex] = this.currentClass;
    } else {
      classes.push(this.currentClass);
    }
    
    localStorage.setItem(`teacher_classes_${teacherId}`, JSON.stringify(classes));
    console.log('üíæ –ö–ª–∞—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
  }

  removeStudentFromClass(student: any): void {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –∫–ª–∞—Å—Å–∞:', student);
    
    if (!this.currentClass || !this.currentClass.id) {
      alert('–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const studentId = student.studentId || student.id;
    if (!studentId) {
      alert('ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
    this.groupClassService.removeStudentFromClass(this.currentClass.id, studentId).subscribe({
      next: () => {
        console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–ª–∞—Å—Å–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (this.currentClass && this.currentClass.students) {
          const index = this.currentClass.students.indexOf(student);
          if (index > -1) {
            this.currentClass.students.splice(index, 1);
            this.saveClassToStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
          }
        }
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    });
  }

  openInviteStudentsDialog(): void {
    console.log('üë• –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É');
    
    if (!this.currentClass) {
      alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å!');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    this.loadAvailableStudents();
    this.showStudentsList = true;
  }

  loadAvailableStudents(): void {
    const teacherId = this.authService.getCurrentUser()?.id;
    if (!teacherId) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ lesson service
    this.lessonService.getConfirmedStudentsForTeacher(teacherId).subscribe({
      next: (students) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ –≤ —Ç–µ–∫—É—â–µ–º –∫–ª–∞—Å—Å–µ
        this.availableStudents = students.filter(student => 
          !this.currentClass.students?.find((s: any) => 
            s.id === student.studentId || s.name === student.name
          )
        );
        console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', this.availableStudents);
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        this.availableStudents = [];
      }
    });
  }

  addStudentToCurrentClass(student: any): void {
    if (!this.currentClass) return;
    
    if (!this.currentClass.students) {
      this.currentClass.students = [];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    this.currentClass.students.push({
      id: student.studentId || Date.now().toString(),
      name: student.name,
      addedAt: new Date().toISOString()
    });
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    this.availableStudents = this.availableStudents.filter(s => 
      s.studentId !== student.studentId && s.name !== student.name
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    this.saveClassToStorage();
    
    console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å:', student.name);
  }

  closeStudentsList(): void {
    this.showStudentsList = false;
  }

  editClass(): void {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
    alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
  }

  deleteClass(): void {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞');
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª–∞—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      this.currentClass = null;
      console.log('‚úÖ –ö–ª–∞—Å—Å —É–¥–∞–ª–µ–Ω');
    }
  }

  private generateInviteCode(): string {
    return Math.random().toString(36).substring(2, 10).toUpperCase();
  }
}
