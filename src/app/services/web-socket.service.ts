import { Injectable } from '@angular/core';
import { io, Socket } from 'socket.io-client';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class WebSocketService {
  private socket: Socket;

  constructor() {
    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ http://localhost:3011');
    
    this.socket = io('http://localhost:3011', {
      transports: ['websocket', 'polling'], // –î–æ–±–∞–≤–ª—è–µ–º fallback
      forceNew: true,
      timeout: 10000,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });
    
    this.socket.on('connect', () => {
      console.log('‚úÖ WebSocket —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ API Gateway');
      console.log('üîå Socket ID:', this.socket.id);
    });
    
    this.socket.on('disconnect', (reason) => {
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç API Gateway. –ü—Ä–∏—á–∏–Ω–∞:', reason);
    });
    
    this.socket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
      console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    });
    
    this.socket.on('reconnect', (attemptNumber) => {
      console.log(`üîÑ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ ${attemptNumber} –ø–æ–ø—ã—Ç–æ–∫`);
    });
    
    this.socket.on('reconnect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
    });
    
    this.socket.on('reconnect_failed', () => {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket');
    });
  }

  sendMessage(event: string, data: any) {
    this.socket.emit(event, data);
  }

  listen(event: string): Observable<any> {
    return new Observable(observer => {
      this.socket.on(event, (data) => {
        observer.next(data);
      });
    });
  }

  registerUser(userId: string) {
    this.sendMessage('register', userId);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–∏–¥–µ–æ –∑–≤–æ–Ω–∫–æ–≤
  initiateCall(targetUserId: string, fromUserId: string) {
    this.sendMessage('call_invite', { to: targetUserId, from: fromUserId });
  }

  acceptCall(fromUserId: string, toUserId: string) {
    this.sendMessage('call_accept', { to: fromUserId, from: toUserId });
  }

  rejectCall(fromUserId: string, toUserId: string) {
    this.sendMessage('call_reject', { to: fromUserId, from: toUserId });
  }
}
