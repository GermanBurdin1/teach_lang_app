import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
// import { WebSocketService } from './web-socket.service';
import { HomeworkService } from './homework.service';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç AgoraRTC –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
type AgoraRTCType = typeof import('agora-rtc-sdk-ng').default;
type IAgoraRTCClient = import('agora-rtc-sdk-ng').IAgoraRTCClient;
type ILocalVideoTrack = import('agora-rtc-sdk-ng').ILocalVideoTrack;
type ILocalAudioTrack = import('agora-rtc-sdk-ng').ILocalAudioTrack;
type IRemoteVideoTrack = import('agora-rtc-sdk-ng').IRemoteVideoTrack;
type IRemoteAudioTrack = import('agora-rtc-sdk-ng').IRemoteAudioTrack;


@Injectable()
export class VideoCallService {
  public showVideoCallSubject = new BehaviorSubject<boolean>(false);
  public isFloatingVideoSubject = new BehaviorSubject<boolean>(false);
  private _videoSize = { width: 640, height: 360 };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
  private currentLessonId: string | null = null;
  private currentUserId: string | null = null;
  
  get videoWidth() {
    return this._videoSize.width;
  }
  get videoHeight() {
    return this._videoSize.height;
  }

  showVideoCall$ = this.showVideoCallSubject.asObservable();
  isFloatingVideo$ = this.isFloatingVideoSubject.asObservable();

  floatingVideoPosition = { x: window.innerWidth - 320, y: 20 };
  dragging = false;
  offsetX = 0;
  offsetY = 0;

  agoraClient: IAgoraRTCClient | null = null;
  localTracks: { videoTrack: ILocalVideoTrack | null, audioTrack: ILocalAudioTrack | null } = { videoTrack: null, audioTrack: null };
  private agoraWarningsDisabled = false;
  private agoraRTC: AgoraRTCType | null = null;
  private agoraLoadingPromise: Promise<AgoraRTCType> | null = null;

  remoteUsers: { [uid: string]: { videoTrack: IRemoteVideoTrack | null, audioTrack: IRemoteAudioTrack | null } } = {};
  appId = 'a020b374553e4fac80325223fba38531'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à App ID
  channelName = 'test_channel_123'; // –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
  token = null; // null –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  callActive: boolean = false;
  showControls = false;
  controlTimeout: any; // –û–±—ä—è–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ rtmClient
  userId!: string; // –î–æ–±–∞–≤–ª—è–µ–º userId, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç


  // constructor(private wsService: WebSocketService, private homeworkService: HomeworkService) {
  constructor(private homeworkService: HomeworkService) {
    console.log('‚ö° VideoCallService —Å–æ–∑–¥–∞–Ω (–±–µ–∑ AgoraRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)');
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
  setLessonData(lessonId: string, userId: string) {
    this.currentLessonId = lessonId;
    this.currentUserId = userId;
    this.userId = userId;
    console.log(`üìö –£—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: lessonId=${lessonId}, userId=${userId}`);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebSocket –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    // this.registerUserInWebSocket(userId);
  }

  // private registerUserInWebSocket(userId: string) {
  //   // –ú–µ—Ç–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏–º WebSocketService
  //   console.log(`üîå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ WebSocket`);
  // }

  async joinChannel(): Promise<void> {
    try {
      // –û—Ç–∫–ª—é—á–∞–µ–º AgoraRTC –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
      if (!this.agoraWarningsDisabled) {
        this.disableAllAgoraWarnings();
        this.agoraWarningsDisabled = true;
      }

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º AgoraRTC —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (!this.agoraRTC) {
        if (!this.agoraLoadingPromise) {
          console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º AgoraRTC SDK...');
          this.agoraLoadingPromise = import('agora-rtc-sdk-ng').then(module => module.default);
        }
        this.agoraRTC = await this.agoraLoadingPromise;
        console.log('‚úÖ AgoraRTC SDK –∑–∞–≥—Ä—É–∂–µ–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º AgoraRTC –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (!this.agoraClient) {
        console.log('üöÄ –°–æ–∑–¥–∞–µ–º AgoraRTC –∫–ª–∏–µ–Ω—Ç...');
        this.agoraClient = this.agoraRTC!.createClient({ mode: 'rtc', codec: 'vp8' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
      const systemSupport = await this.checkSystemSupport();
      if (!systemSupport) {
        throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç AgoraRTC');
      }

      console.log('üîå –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Agora –∫–∞–Ω–∞–ª–∞:', {
        appId: this.appId,
        channelName: this.channelName,
        userId: this.userId,
        token: this.token || '–±–µ–∑ —Ç–æ–∫–µ–Ω–∞'
      });

      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      console.log('üìπ –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏...');
      try {
        this.localTracks.audioTrack = await this.agoraRTC!.createMicrophoneAudioTrack();
        this.localTracks.videoTrack = await this.agoraRTC!.createCameraVideoTrack();
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
      } catch (trackError: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤:', trackError);
        if (trackError.code === 'WEB_SECURITY_RESTRICT') {
          throw new Error('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –∏–ª–∏ localhost');
        }
        throw trackError;
      }

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É
      console.log('üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É...');
      const uid = await this.agoraClient!.join(this.appId, this.channelName, this.token, this.userId);
      console.log('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É —Å UID:', uid);
      
      // –ü—É–±–ª–∏–∫—É–µ–º —Ç—Ä–µ–∫–∏
      console.log('üì° –ü—É–±–ª–∏–∫—É–µ–º —Ç—Ä–µ–∫–∏...');
      await this.agoraClient!.publish([this.localTracks.audioTrack, this.localTracks.videoTrack]);
      console.log('‚úÖ –¢—Ä–µ–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã');
      
      this.callActive = true;
      console.log('üéâ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É Agora:', {
        channelName: this.channelName,
        userId: this.userId,
        uid: uid
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Agora:', error);
      console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        name: (error as any)?.name,
        message: (error as any)?.message,
        code: (error as any)?.code
      });
    }
  }

  async leaveChannel(): Promise<void> {
    if (this.localTracks.audioTrack) {
      this.localTracks.audioTrack.close();
      this.localTracks.audioTrack = null;
    }
    if (this.localTracks.videoTrack) {
      this.localTracks.videoTrack.close();
      this.localTracks.videoTrack = null;
    }
    
    if (this.agoraClient) {
      await this.agoraClient.leave();
    }
    this.callActive = false;
    console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–∞–Ω–∞–ª–∞ Agora');
  }

  toggleCall(): void {
    if (this.callActive) {
      this.leaveChannel();
    } else {
      this.joinChannel();
    }
  }

  resizeVideo(deltaX: number, deltaY: number): void {
    this._videoSize.width = Math.max(200, this._videoSize.width + deltaX);
    this._videoSize.height = Math.max(150, this._videoSize.height + deltaY);
  }

  private disableAllAgoraWarnings(): void {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.warn –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö AgoraRTC –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    const originalWarn = console.warn;
    const originalError = console.error;
    const originalLog = console.log;
    const originalInfo = console.info;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AgoraRTC —Å–æ–æ–±—â–µ–Ω–∏–π
    const isAgoraMessage = (message: string): boolean => {
      return message.includes('AgoraRTC') || 
             message.includes('WEB_SECURITY_RESTRICT') || 
             message.includes('web security') ||
             message.includes('https protocol') ||
             message.includes('enumerateDevices') ||
             message.includes('localhost') ||
             message.includes('NOT_SUPPORTED') ||
             message.includes('AgoraRTCError') ||
             message.includes('Agora-SDK');
    };
    
    console.warn = (...args: any[]) => {
      const message = args.join(' ');
      if (isAgoraMessage(message)) {
        return;
      }
      originalWarn.apply(console, args);
    };

    console.error = (...args: any[]) => {
      const message = args.join(' ');
      if (isAgoraMessage(message)) {
        return;
      }
      originalError.apply(console, args);
    };

    console.log = (...args: any[]) => {
      const message = args.join(' ');
      if (isAgoraMessage(message)) {
        return;
      }
      originalLog.apply(console, args);
    };

    console.info = (...args: any[]) => {
      const message = args.join(' ');
      if (isAgoraMessage(message)) {
        return;
      }
      originalInfo.apply(console, args);
    };
  }

  async checkSystemSupport(): Promise<boolean> {
    try {
      if (!this.agoraRTC) {
        console.error('‚ùå AgoraRTC –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return false;
      }
      const systemSupport = this.agoraRTC.checkSystemRequirements();
      console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏—Å—Ç–µ–º—ã AgoraRTC:', systemSupport);
      return systemSupport;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã AgoraRTC:', error);
      return false;
    }
  }

  async startScreenSharing(): Promise<void> {
    try {
      if (!this.agoraRTC) {
        throw new Error('AgoraRTC –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      }
      const screenTrack = await this.agoraRTC.createScreenVideoTrack({}, 'auto');
      if (this.agoraClient) {
        await this.agoraClient.unpublish(this.localTracks.videoTrack!);
        await this.agoraClient.publish(screenTrack);
      }
      console.log('üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞—á–∞—Ç–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', error);
    }
  }

  async stopScreenSharing(): Promise<void> {
    console.log('üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  startTrackMonitoring(): void {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–∫–æ–≤
  }

  acceptCall(from: string): void {
    console.log(`‚úÖ –ü—Ä–∏–Ω—è—Ç –≤—ã–∑–æ–≤ –æ—Ç ${from}`);
  }

  rejectCall(from: string): void {
    console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω –≤—ã–∑–æ–≤ –æ—Ç ${from}`);
  }

  startVideoCall(): void {
    console.log('üé• –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');
    console.log('üìç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
      channelName: this.channelName,
      userId: this.userId,
      callActive: this.callActive,
      showVideoCall: this.showVideoCallSubject.getValue()
    });

    this.showVideoCallSubject.next(true);
    console.log('‚úÖ showVideoCall$ –∏–∑–º–µ–Ω—ë–Ω:', this.showVideoCallSubject.getValue());

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Agora –∫–∞–Ω–∞–ª—É
    this.joinChannel().then(() => {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É!');
    }).catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–∞–Ω–∞–ª—É:', error);
    });
  }

  stopVideoCall(): void {
    console.log('üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');

    this.showVideoCallSubject.next(false);
    this.isFloatingVideoSubject.next(false);

    console.log('‚úÖ showVideoCall$:', this.showVideoCallSubject.getValue());
    console.log('‚úÖ isFloatingVideo$:', this.isFloatingVideoSubject.getValue());
  }

  toggleFloatingVideo(state: boolean): void {
    console.log(`üü° toggleFloatingVideo(${state}) –≤—ã–∑–≤–∞–Ω`);
    console.log(`üßê –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: isFloatingVideo =`, this.isFloatingVideoSubject.getValue());

    // if (!this.showVideoCallSubject.getValue()) {
    //     console.log('‚ö† –í–∏–¥–µ–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø–ª–∞–≤–∞—é—â–µ–µ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º');
    //     return;
    // }

    this.isFloatingVideoSubject.next(state);
    console.log(`üé• toggleFloatingVideo –≤—ã–∑–≤–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: ${state}`);
  }

  // ...
  // –í—Å–µ –º–µ—Ç–æ–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å AgoraRTC –∏ WebSocketService, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏–∂–µ
  // ...
}
