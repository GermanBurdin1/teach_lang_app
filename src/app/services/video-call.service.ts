import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import AgoraRTC, { IAgoraRTCClient, ILocalTrack, IRemoteVideoTrack, IRemoteAudioTrack, ILocalVideoTrack, ILocalAudioTrack } from 'agora-rtc-sdk-ng';
import { WebSocketService } from './web-socket.service';
import { HomeworkService } from './homework.service';


@Injectable({
  providedIn: 'root'
})
export class VideoCallService {
  public showVideoCallSubject = new BehaviorSubject<boolean>(false);
  public isFloatingVideoSubject = new BehaviorSubject<boolean>(false);
  private _videoSize = { width: 640, height: 360 };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
  private currentLessonId: string | null = null;
  private currentUserId: string | null = null;
  
  get videoWidth() {
    return this._videoSize.width;
  }
  get videoHeight() {
    return this._videoSize.height;
  }

  showVideoCall$ = this.showVideoCallSubject.asObservable();
  isFloatingVideo$ = this.isFloatingVideoSubject.asObservable();

  floatingVideoPosition = { x: window.innerWidth - 320, y: 20 };
  dragging = false;
  offsetX = 0;
  offsetY = 0;

  agoraClient: IAgoraRTCClient = AgoraRTC.createClient({ mode: 'rtc', codec: 'vp8' });
  localTracks: { videoTrack: ILocalVideoTrack | null, audioTrack: ILocalAudioTrack | null } = { videoTrack: null, audioTrack: null };

  remoteUsers: { [uid: string]: { videoTrack: IRemoteVideoTrack | null, audioTrack: IRemoteAudioTrack | null } } = {};
  appId = 'a020b374553e4fac80325223fba38531';
  channelName = 'rtc_token';
  token = '';
  callActive: boolean = false;
  showControls = false;
  controlTimeout: any; // –û–±—ä—è–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ rtmClient
  userId!: string; // –î–æ–±–∞–≤–ª—è–µ–º userId, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç


  constructor(private wsService: WebSocketService, private homeworkService: HomeworkService) {
    console.log('‚ö° VideoCallService —Å–æ–∑–¥–∞–Ω');
    this.setupEventListeners();
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
  setLessonData(lessonId: string, userId: string) {
    this.currentLessonId = lessonId;
    this.currentUserId = userId;
    console.log(`üìö –£—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: lessonId=${lessonId}, userId=${userId}`);
  }

  startVideoCall(): void {
    console.log('üé• –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');

    this.showVideoCallSubject.next(true);
    console.log('‚úÖ showVideoCall$ –∏–∑–º–µ–Ω—ë–Ω:', this.showVideoCallSubject.getValue());

    this.joinChannel().then(() => {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É!');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≤–∏–¥–µ–æ
      if (this.currentLessonId && this.currentUserId) {
        this.startLessonAutomatically();
      }
    }).catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–∞–Ω–∞–ª—É:', error);
    });
  }

  stopVideoCall(): void {
    console.log('üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞');

    this.showVideoCallSubject.next(false);
    this.isFloatingVideoSubject.next(false);

    console.log('‚úÖ showVideoCall$:', this.showVideoCallSubject.getValue());
    console.log('‚úÖ isFloatingVideo$:', this.isFloatingVideoSubject.getValue());
  }

  toggleFloatingVideo(state: boolean): void {
    console.log(`üü° toggleFloatingVideo(${state}) –≤—ã–∑–≤–∞–Ω`);
    console.log(`üßê –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: isFloatingVideo =`, this.isFloatingVideoSubject.getValue());

    // if (!this.showVideoCallSubject.getValue()) {
    //     console.log('‚ö† –í–∏–¥–µ–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø–ª–∞–≤–∞—é—â–µ–µ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º');
    //     return;
    // }

    this.isFloatingVideoSubject.next(state);
    console.log(`üé• toggleFloatingVideo –≤—ã–∑–≤–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: ${state}`);
  }


  async joinChannel(): Promise<void> {
    try {
      console.log("üé• –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ- –∏ –≤–∏–¥–µ–æ—Ç—Ä–µ–∫–∏...");
      this.localTracks.audioTrack = await AgoraRTC.createMicrophoneAudioTrack();
      this.localTracks.videoTrack = await AgoraRTC.createCameraVideoTrack();

      console.log("‚úÖ –í–∏–¥–µ–æ—Ç—Ä–µ–∫ —Å–æ–∑–¥–∞–Ω:", this.localTracks.videoTrack);

      const tokenToUse = this.token.trim() ? this.token : null;
      console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: ${tokenToUse || 'null'}`);

      await this.agoraClient.join(this.appId, this.channelName, tokenToUse);
      console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É");

      await this.agoraClient.publish(Object.values(this.localTracks).filter(track => track !== null) as ILocalTrack[]);
      console.log("üì° –ü–æ—Ç–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");

      this.callActive = true;
      // üìå –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      this.agoraClient.on("user-published", async (user, mediaType) => {
        await this.agoraClient.subscribe(user, mediaType);
        console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.uid}`);

        if (mediaType === "video") {
          this.remoteUsers[user.uid] = {
            videoTrack: user.videoTrack as IRemoteVideoTrack,
            audioTrack: user.audioTrack as IRemoteAudioTrack
          };
          user.videoTrack?.play(`remote-video-${user.uid}`);
        }

        if (mediaType === "audio") {
          user.audioTrack?.play();
        }
      });

      // üìå –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è
      this.agoraClient.on("user-unpublished", (user) => {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${user.uid}`);
        delete this.remoteUsers[user.uid];
        const videoElement = document.getElementById(`remote-video-${user.uid}`);
        if (videoElement) {
          videoElement.remove();
        }
      });


    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  async leaveChannel(): Promise<void> {
    this.localTracks.videoTrack?.stop();
    this.localTracks.videoTrack?.close();
    this.localTracks.audioTrack?.stop();
    this.localTracks.audioTrack?.close();

    await this.agoraClient.leave();
    this.callActive = false;
    this.stopVideoCall();
  }

  // –§—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
  startResize(event: MouseEvent) {
    this.dragging = true;
    this.offsetX = event.clientX - this.floatingVideoPosition.x;
    this.offsetY = event.clientY - this.floatingVideoPosition.y;
  }

  resizeVideo(deltaX: number, deltaY: number): void {
    const aspectRatio = 9 / 16; // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ

    const minWidth = 320;
    const minHeight = minWidth * aspectRatio; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    const maxWidth = 1280;
    const maxHeight = maxWidth * aspectRatio; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞

    // –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ (–±–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ)
    let sizeChange = Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY;

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É
    let newWidth = Math.max(minWidth, Math.min(this._videoSize.width + sizeChange, maxWidth));
    let newHeight = newWidth * aspectRatio;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ –≤—ã—Å–æ—Ç–µ
    if (newHeight < minHeight) {
      newHeight = minHeight;
      newWidth = newHeight / aspectRatio;
    } else if (newHeight > maxHeight) {
      newHeight = maxHeight;
      newWidth = newHeight / aspectRatio;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    this._videoSize.width = newWidth;
    this._videoSize.height = newHeight;

    console.log(`üìè –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ (–ü–û–†–¢–†–ï–¢): ${newWidth}x${newHeight}`);
  }


  onResize(event: MouseEvent): void {
    if (!this.dragging) return;
    const maxX = window.innerWidth - 320;
    const maxY = window.innerHeight - 180;

    this.floatingVideoPosition.x = Math.max(0, Math.min(event.clientX - this.offsetX, maxX));
    this.floatingVideoPosition.y = Math.max(0, Math.min(event.clientY - this.offsetY, maxY));
  }

  stopResize(): void {
    this.dragging = false;
  }

  showVideoControls(): void {
    this.showVideoCallSubject.next(true);
  }

  hideVideoControls(): void {
    this.showVideoCallSubject.next(false);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –≤–∏–¥–µ–æ
  setFloatingVideoSize(width: number, height: number): void {
    this._videoSize.width = width;
    this._videoSize.height = height;
  }

  toggleCall(): void {
    this.callActive = !this.callActive;
  }

  cleanupVideoCall(): void {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ (–±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞)');
  }

  resetVideoSize(): void {
    this._videoSize = { width: 640, height: 360 };
  }

  private isFloatingVideoActive = false;
  private isRegularVideoActive = false;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ
  setRegularVideoActive(active: boolean): void {
    this.isRegularVideoActive = active;
  }

  getRegularVideoActive(): boolean {
    return this.isRegularVideoActive;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–µ–≥–æ –≤–∏–¥–µ–æ
  setFloatingVideoActive(active: boolean): void {
    this.isFloatingVideoActive = active;
  }

  getFloatingVideoActive(): boolean {
    return this.isFloatingVideoActive;
  }

  //screensharing

  private screenTrack: ILocalVideoTrack | null = null;
  private audioTrack: ILocalAudioTrack | null = null;

  async startScreenSharing() {
    try {
      if (this.screenTrack) {
        console.warn("üî¥ –≠–∫—Ä–∞–Ω —É–∂–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç—Å—è");
        return;
      }

      // 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ—Ç—Ä–µ–∫ —ç–∫—Ä–∞–Ω–∞ + –∞—É–¥–∏–æ—Ç—Ä–µ–∫
      const tracks = await AgoraRTC.createScreenVideoTrack(
        { encoderConfig: "1080p_1", screenSourceType: "screen" }, "enable"
      );

      if (Array.isArray(tracks)) {
        [this.screenTrack, this.audioTrack] = tracks;
      } else {
        this.screenTrack = tracks;
      }

      // 2Ô∏è‚É£ –ü—É–±–ª–∏–∫—É–µ–º –≤–∏–¥–µ–æ—Ç—Ä–µ–∫
      await this.agoraClient.publish(this.screenTrack);
      console.log("‚úÖ –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç—Å—è");

      // 3Ô∏è‚É£ –ü—É–±–ª–∏–∫—É–µ–º –∞—É–¥–∏–æ—Ç—Ä–µ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (this.audioTrack) {
        await this.agoraClient.publish(this.audioTrack);
        console.log("üîä –ó–≤—É–∫ —ç–∫—Ä–∞–Ω–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç—Å—è");
      }

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —ç–∫—Ä–∞–Ω–∞:", error);
    }
  }

  async stopScreenSharing() {
    try {
      if (!this.screenTrack) {
        console.warn("‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞");
        return;
      }

      // 1Ô∏è‚É£ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–µ–∫ —ç–∫—Ä–∞–Ω–∞
      await this.agoraClient.unpublish(this.screenTrack);
      this.screenTrack.stop();
      this.screenTrack.close();
      this.screenTrack = null;

      console.log("‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");

      // 2Ô∏è‚É£ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ç—Ä–µ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (this.audioTrack) {
        await this.agoraClient.unpublish(this.audioTrack);
        this.audioTrack.stop();
        this.audioTrack.close();
        this.audioTrack = null;

        console.log("üîä –ó–≤—É–∫ —ç–∫—Ä–∞–Ω–∞ –æ—Ç–∫–ª—é—á—ë–Ω");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:", error);
    }
  }

  // ‚úÖ 1. –ê–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–º–µ—Ä—ã
  private setupEventListeners() {
    AgoraRTC.onCameraChanged = async () => {
      console.warn("üì∑ –ö–∞–º–µ—Ä–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —ç–∫—Ä–∞–Ω–∞...");
      await this.stopScreenSharing();
    };
  }

  // ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–∫–ª—é—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–∫—Ä–∞–Ω –≤—Ä—É—á–Ω—É—é
  startTrackMonitoring() {
    setInterval(async () => {
      if (this.screenTrack && !this.screenTrack.isPlaying) {
        console.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —ç–∫—Ä–∞–Ω–∞");
        await this.stopScreenSharing();
      }
    }, 3000);
  }

  // ‚úÖ 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
  async checkSystemSupport(): Promise<boolean> {
    const isSupported = AgoraRTC.checkSystemRequirements();
    if (!isSupported) {
      console.error("‚ùå –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —ç–∫—Ä–∞–Ω–∞");
      return false;
    }
    return true;
  }

  //—Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
  inviteUserToCall(userId: string) {
    this.wsService.sendMessage('call_invite', {
      from: this.getCurrentUserId(),
      to: userId
    });
  }

  acceptCall(fromUserId: string) {
    this.wsService.sendMessage('call_accept', {
      from: this.getCurrentUserId(),
      to: fromUserId
    });
  }

  rejectCall(fromUserId: string) {
    this.wsService.sendMessage('call_reject', {
      from: this.getCurrentUserId(),
      to: fromUserId
    });
  }

  private getCurrentUserId(): string {
    return localStorage.getItem('userId') || 'unknown';
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ —É—Ä–æ–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≤–∏–¥–µ–æ
  private startLessonAutomatically() {
    if (!this.currentLessonId || !this.currentUserId) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞');
      return;
    }

    console.log(`üé¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ —É—Ä–æ–∫–∞: lessonId=${this.currentLessonId}, userId=${this.currentUserId}`);
    
    this.homeworkService.startLesson(this.currentLessonId, this.currentUserId).subscribe({
      next: (response) => {
        console.log('‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç:', response);
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É—Ä–æ–∫–∞:', error);
      }
    });
  }

}
