import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../../environment';

export interface Homework {
  id: string;
  title: string;
  description: string;
  assignedBy: string;
  assignedByName: string;
  assignedTo: string;
  assignedToName: string;
  lessonId?: string;
  lessonDate?: Date;
  assignedAt: Date;
  dueDate: Date;
  status: 'assigned' | 'submitted' | 'completed' | 'overdue';
  materialIds: string[]; // Linked materials
  submittedAt?: Date;
  teacherFeedback?: string;
  grade?: number;
  isLinkedToMaterials: boolean;
  createdInClass: boolean; // true –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–æ –≤–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞, false –µ—Å–ª–∏ –≤ TrainingComponent
  sourceType?: string; // —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (task, question, material)
  sourceItemId?: string; // ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  sourceItemText?: string; // —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
}

export interface CreateHomeworkRequest {
  lessonId: string;
  title: string;
  description: string;
  assignedTo: string;
  dueDate: Date;
  materialIds?: string[];
  sourceType?: string;
  sourceItemId?: string;
  sourceItemText?: string;
}

@Injectable({
  providedIn: 'root'
})
export class HomeworkService {
  private baseUrl = `${environment.apiUrl}/lessons`;
  private homeworkUpdated = new BehaviorSubject<boolean>(false);

  private homework$ = new BehaviorSubject<string[]>([]);

  private teacherHomework$ = new BehaviorSubject<Homework[]>([]);
  private studentHomework$ = new BehaviorSubject<Homework[]>([]);

  constructor(private http: HttpClient) {}

  getHomeworkStream() {
    return this.homework$.asObservable();
  }

  addHomework(item: string) {
    const current = this.homework$.getValue();
    if (!current.includes(item)) {
      this.homework$.next([...current, item]);
    }
  }

  reset() {
    this.homework$.next([]);
  }

  // ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° LESSON-SERVICE ====================

  // –ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞
  startLesson(lessonId: string, startedBy: string): Observable<any> {
    return this.http.post(`${this.baseUrl}/${lessonId}/start`, { startedBy });
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
  endLesson(lessonId: string, endedBy: string): Observable<any> {
    return this.http.post(`${this.baseUrl}/${lessonId}/end`, { endedBy });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
  getLessonWithTasksAndQuestions(lessonId: string): Observable<any> {
    return this.http.get(`${this.baseUrl}/${lessonId}/details`);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫ —É—Ä–æ–∫—É
  addTaskToLesson(lessonId: string, title: string, description: string | null, createdBy: string, createdByRole: 'student' | 'teacher'): Observable<any> {
    return this.http.post(`${this.baseUrl}/${lessonId}/tasks`, {
      title,
      description,
      createdBy,
      createdByRole
    });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ —É—Ä–æ–∫—É
  addQuestionToLesson(lessonId: string, question: string, createdBy: string, createdByRole: 'student' | 'teacher'): Observable<any> {
    return this.http.post(`${this.baseUrl}/${lessonId}/questions`, {
      question,
      createdBy,
      createdByRole
    });
  }

  // –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  completeTask(taskId: string, completedBy: string): Observable<any> {
    return this.http.post(`${this.baseUrl}/tasks/${taskId}/complete`, { completedBy });
  }

  // –û—Ç–º–µ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
  completeHomeworkItem(homeworkId: string, completedBy: string): Observable<any> {
    return this.http.put(`${this.baseUrl}/homework-item/${homeworkId}/complete`, { completedBy });
  }

  completeQuestion(questionId: string, completedBy: string): Observable<any> {
    return this.http.put(`${this.baseUrl}/questions/${questionId}/complete`, { completedBy });
  }

  // –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
  answerQuestion(questionId: string, answer: string, answeredBy: string): Observable<any> {
    return this.http.post(`${this.baseUrl}/questions/${questionId}/answer`, { answer, answeredBy });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —É—Ä–æ–∫–∞
  getTasksForLesson(lessonId: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/${lessonId}/tasks`);
  }

  // ==================== NEW HOMEWORK SYSTEM ====================

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É—Ä–æ–∫–∞
  getHomeworkForLesson(lessonId: string): Observable<Homework[]> {
    return this.http.get<Homework[]>(`${this.baseUrl}/${lessonId}/homework`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  getHomeworkForStudent(studentId: string): Observable<Homework[]> {
    const url = `${this.baseUrl}/student/${studentId}/homework`;
    console.log(`üìã [FRONTEND SERVICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞: ${url}`);
    console.log(`üìã [FRONTEND SERVICE] baseUrl: ${this.baseUrl}`);
    console.log(`üìã [FRONTEND SERVICE] studentId: ${studentId}`);
    
    return this.http.get<Homework[]>(url);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  getHomeworkForTeacher(teacherId: string): Observable<Homework[]> {
    const url = `${this.baseUrl}/teacher/${teacherId}/homework`;
    console.log(`üìã [FRONTEND SERVICE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞: ${url}`);
    console.log(`üìã [FRONTEND SERVICE] baseUrl: ${this.baseUrl}`);
    console.log(`üìã [FRONTEND SERVICE] teacherId: ${teacherId}`);
    
    return this.http.get<Homework[]>(url);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  createHomework(lessonId: string, homework: Partial<Homework>): Observable<Homework> {
    return this.http.post<Homework>(`${this.baseUrl}/${lessonId}/homework`, homework);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  updateHomeworkStatus(homeworkId: string, status: string): Observable<Homework> {
    return this.http.patch<Homework>(`${this.baseUrl}/homework/${homeworkId}/status`, { status });
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ –æ—Ç–∑—ã–≤–∞
  addGradeAndFeedback(homeworkId: string, grade: number, feedback: string): Observable<Homework> {
    return this.http.patch<Homework>(`${this.baseUrl}/homework/${homeworkId}/grade`, { grade, feedback });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
  notifyHomeworkUpdated() {
    this.homeworkUpdated.next(true);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
  onHomeworkUpdated(): Observable<boolean> {
    return this.homeworkUpdated.asObservable();
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
  filterHomework(filters: {
    teacherId?: string;
    studentId?: string;
    status?: Homework['status'];
    dateFrom?: Date;
    dateTo?: Date;
  }): Observable<Homework[]> {
    const params = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value) params.append(key, value.toString());
    });
    
    return this.http.get<Homework[]>(`${this.baseUrl}/homework/filter?${params.toString()}`);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  deleteHomework(homeworkId: string): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/homework/${homeworkId}`);
  }

  // Local state streams
  getTeacherHomeworkStream(): Observable<Homework[]> {
    return this.teacherHomework$.asObservable();
  }

  getStudentHomeworkStream(): Observable<Homework[]> {
    return this.studentHomework$.asObservable();
  }

  addHomeworkToLocal(homework: Homework, isTeacher: boolean = false) {
    if (isTeacher) {
      const current = this.teacherHomework$.value;
      this.teacherHomework$.next([...current, homework]);
    } else {
      const current = this.studentHomework$.value;
      this.studentHomework$.next([...current, homework]);
    }
  }

  removeHomeworkFromLocal(homeworkId: string, isTeacher: boolean = false) {
    if (isTeacher) {
      const current = this.teacherHomework$.value;
      this.teacherHomework$.next(current.filter(h => h.id !== homeworkId));
    } else {
      const current = this.studentHomework$.value;
      this.studentHomework$.next(current.filter(h => h.id !== homeworkId));
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–∫–∞
  getQuestionsForLesson(lessonId: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/${lessonId}/questions`);
  }

  // ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –î–û–ú–ê–®–ù–ò–• –ó–ê–î–ê–ù–ò–ô ====================

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —É—Ä–æ–∫–∞ (lesson-material)
  createHomeworkFromLesson(data: {
    lessonId: string;
    title: string;
    description: string;
    dueDate: Date;
    assignedBy: string;
    assignedTo: string;
    sourceType: 'task' | 'question' | 'material';
    sourceItemId: string;
    sourceItemText: string;
    materialIds?: string[];
  }): Observable<Homework> {
    const homeworkData = {
      title: data.title,
      description: data.description,
      dueDate: data.dueDate,
      itemType: data.sourceType as 'task' | 'question' | 'material',
      originalItemId: data.sourceItemId,
      createdBy: data.assignedBy,
      createdByRole: 'teacher' as const
    };

    console.log('üìù –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ lesson-service:', homeworkData);
    return this.http.post<Homework>(`${this.baseUrl}/${data.lessonId}/homework`, homeworkData);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ training –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  createHomeworkFromTraining(data: {
    title: string;
    description: string;
    dueDate: Date;
    assignedBy: string;
    assignedTo: string;
    lessonId?: string; // —Å–≤—è–∑–∞–Ω–Ω—ã–π —É—Ä–æ–∫
    materialIds?: string[];
  }): Observable<Homework> {
    const homeworkData = {
      title: data.title,
      description: data.description,
      dueDate: data.dueDate,
      itemType: 'task' as const, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'task' –≤–º–µ—Å—Ç–æ 'manual' 
      originalItemId: null, // –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
      createdBy: data.assignedBy,
      createdByRole: 'teacher' as const
    };

    if (data.lessonId) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞:', data.lessonId);
      return this.http.post<Homework>(`${this.baseUrl}/${data.lessonId}/homework`, homeworkData);
    } else {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –æ–±—â–µ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ');
      return this.http.post<Homework>(`${this.baseUrl}/homework/general`, homeworkData);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  createHomeworkLegacy(homework: CreateHomeworkRequest): Observable<Homework> {
    if (!homework.lessonId) {
      throw new Error('lessonId is required');
    }
    return this.createHomework(homework.lessonId, homework);
  }
}
