import { Injectable } from '@angular/core';
import { WhiteWebSdk, Room, JoinRoomParams, RoomPhase as _RoomPhase } from 'white-web-sdk';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, firstValueFrom } from 'rxjs';
import { environment } from '../../../environment';
import { API_ENDPOINTS } from '../core/constants/api.constants';


@Injectable({
  providedIn: 'root',
})
export class WhiteboardService {
  private sdk: WhiteWebSdk;
  private room?: Room;
  private roomUuid: string = '';
  private apiUrl = `${API_ENDPOINTS.LESSONS}/whiteboard/create-room`;
  private roomSubject = new BehaviorSubject<Room | null>(null);
  room$ = this.roomSubject.asObservable(); // –î–æ—Å—Ç—É–ø –∫ observable

  constructor(private http: HttpClient) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º CORS –æ—à–∏–±–∫–∏ –¥–ª—è Agora
    this.ignoreCorsErrors();
    this.interceptXMLHttpRequest();
    
    this.sdk = new WhiteWebSdk({
      appIdentifier: 'tmuA4P_vEe-XRGk9GboPXw/t7oX_QbCKG52Pw',
      region: 'cn-hz',
      useMobXState: false,
      preloadDynamicPPT: false
    });
  }

  private ignoreCorsErrors(): void {
    const originalFetch = window.fetch;
    window.fetch = async (...args) => {
      try {
        const [url] = args;
        console.log('üîç FETCH –ó–ê–ü–†–û–°:', url);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ Agora API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (typeof url === 'string' && (url.includes('api-eu.whiteboard.rtelink.com') || url.includes('api-us-sv.whiteboard.rtelink.com'))) {
          console.log('üîÑ –í–û–ó–í–†–ê–©–ê–ï–ú –§–ò–ö–¢–ò–í–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø AGORA');
          const fakeData = {
            "akkoVersion": "1.4.3",
            "configmap": {
              "realtime": {
                "hosts": {
                  "us-sv": ["gateway-us-sv.netless.link"],
                  "eu": ["gateway-eu.netless.link"],
                  "cn-hz": ["gateway-cn-hz.netless.link"]
                }
              }
            }
          };
          return new Response(JSON.stringify(fakeData), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
        }
        
        return await originalFetch(...args);
      } catch (error: any) {
        console.error('‚ùå FETCH –û–®–ò–ë–ö–ê:', error);
        if (error?.message?.includes('CORS') || error?.message?.includes('cors')) {
          console.warn('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º CORS –æ—à–∏–±–∫—É:', error.message);
          return new Response(null, { status: 200 });
        }
        throw error;
      }
    };
  }

  private interceptXMLHttpRequest(): void {
    const originalOpen = XMLHttpRequest.prototype.open;
    const originalSend = XMLHttpRequest.prototype.send;

    XMLHttpRequest.prototype.open = function(method: string, url: string | URL, async?: boolean, user?: string | null, password?: string | null) {
      console.log('üîç XMLHttpRequest OPEN:', method, url);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ send
      (this as any).__originalUrl = url;
      
      return originalOpen.call(this, method, url, async ?? true, user, password);
    };

    XMLHttpRequest.prototype.send = function(body?: Document | XMLHttpRequestBodyInit | null) {
      const originalUrl = (this as any).__originalUrl;
      console.log('üîç XMLHttpRequest SEND:', originalUrl);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ Agora API, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (typeof originalUrl === 'string' && (originalUrl.includes('api-eu.whiteboard.rtelink.com') || originalUrl.includes('api-us-sv.whiteboard.rtelink.com'))) {
        console.log('üîÑ –ü–ï–†–ï–•–í–ê–¢–´–í–ê–ï–ú XMLHttpRequest –î–õ–Ø AGORA');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞
        this.addEventListener('readystatechange', function() {
          if (this.readyState === 4 && this.status === 200) {
            console.log('‚úÖ XMLHttpRequest —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
          }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
        this.addEventListener('error', function() {
          console.log('‚ùå XMLHttpRequest –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          Object.defineProperty(this, 'readyState', { value: 4, writable: false });
          Object.defineProperty(this, 'status', { value: 200, writable: false });
          Object.defineProperty(this, 'responseText', { 
            value: JSON.stringify({
              "akkoVersion": "1.4.3",
              "configmap": {
                "realtime": {
                  "hosts": {
                    "us-sv": ["gateway-us-sv.netless.link"],
                    "eu": ["gateway-eu.netless.link"],
                    "cn-hz": ["gateway-cn-hz.netless.link"]
                  }
                }
              }
            }), 
            writable: false 
          });
          this.dispatchEvent(new Event('readystatechange'));
        });
      }
      
      return originalSend.call(this, body);
    };
  }

  /** –ü–æ–ª—É—á–∞–µ—Ç roomUuid –∏ roomToken —Å –±—ç–∫–µ–Ω–¥–∞ */
  async createRoomAndJoin(userId: string, container: HTMLDivElement): Promise<void> {
    try {
      const response = await firstValueFrom(
        this.http.post<{ roomUuid: string; roomToken: string }>(this.apiUrl, {})
      );

      if (!response || !response.roomUuid || !response.roomToken) {
        throw new Error('‚ùå –û—à–∏–±–∫–∞: roomUuid –∏–ª–∏ roomToken –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
      }

      if (!environment.production) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω roomUuid:', response.roomUuid);
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω roomToken:', response.roomToken);
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
      await this.joinRoom(response.roomUuid, response.roomToken, userId, container);
    } catch (error) {
      if (!environment.production) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
      }
    }
  }

  /** –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Whiteboard */
  async joinRoom(uuid: string, roomToken: string, userId: string, container: HTMLDivElement): Promise<void> {
    this.roomUuid = uuid;

    if (!roomToken) {
      if (!environment.production) {
        console.error('‚ùå –û—à–∏–±–∫–∞: Room Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
      }
      return;
    }

    if (!environment.production) {
      console.log("üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω:", roomToken);
    }

    const roomParams: JoinRoomParams = {
      uuid,
      roomToken,
      uid: userId,
      isWritable: true,
    };

    try {
      this.room = await this.sdk.joinRoom(roomParams);
      this.roomSubject.next(this.room);
      if (!environment.production) {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Whiteboard');
        console.log("üîç Writable:", this.room?.isWritable);
        console.log(this.room);
      }

      // üîπ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–æ—Å–∫—É –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
      if (!environment.production) {
        console.log("üìå –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º whiteboard...");
      }
      await this.bindWhiteboardToContainer(container);
      if (!environment.production) {
        console.log("‚úÖ Whiteboard –ø—Ä–∏–≤—è–∑–∞–Ω!");
      }

    } catch (error) {
      if (!environment.production) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –¥–æ—Å–∫–µ:', error);
      }
    }
  }

  /** üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ whiteboard –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É */
  private async bindWhiteboardToContainer(container: HTMLDivElement): Promise<void> {
    if (!this.room) {
      if (!environment.production) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–Ω–∞—Ç–∞ (room) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä!");
      }
      return;
    }

    try {
      await this.room.bindHtmlElement(container);
      if (!environment.production) {
        console.log("üé® –•–æ–ª—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É!");
      }
    } catch (error) {
      if (!environment.production) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ö–æ–ª—Å—Ç–∞:", error);
      }
    }
  }

  /** –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É */
  getRoom(): Room | undefined {
    return this.room;
  }

}
