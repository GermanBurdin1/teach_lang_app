import { Injectable } from '@angular/core';
import { WhiteWebSdk, Room, JoinRoomParams, RoomPhase as _RoomPhase } from 'white-web-sdk';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, firstValueFrom } from 'rxjs';
import { environment } from '../../../environment';


@Injectable({
  providedIn: 'root',
})
export class WhiteboardService {
  private sdk: WhiteWebSdk;
  private room?: Room;
  private roomUuid: string = '';
  private apiUrl = 'http://localhost:3000/whiteboard/create-room';
  private roomSubject = new BehaviorSubject<Room | null>(null);
  room$ = this.roomSubject.asObservable(); // –î–æ—Å—Ç—É–ø –∫ observable

  constructor(private http: HttpClient) {
    this.sdk = new WhiteWebSdk({
      appIdentifier: 'tmuA4P_vEe-XRGk9GboPXw/t7oX_QbCKG52Pw',
      region: 'eu',
    });
  }

  /** –ü–æ–ª—É—á–∞–µ—Ç roomUuid –∏ roomToken —Å –±—ç–∫–µ–Ω–¥–∞ */
  async createRoomAndJoin(userId: string, container: HTMLDivElement): Promise<void> {
    try {
      const response = await firstValueFrom(
        this.http.post<{ roomUuid: string; roomToken: string }>(this.apiUrl, {})
      );

      if (!response || !response.roomUuid || !response.roomToken) {
        throw new Error('‚ùå –û—à–∏–±–∫–∞: roomUuid –∏–ª–∏ roomToken –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
      }

      if (!environment.production) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω roomUuid:', response.roomUuid);
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω roomToken:', response.roomToken);
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
      await this.joinRoom(response.roomUuid, response.roomToken, userId, container);
    } catch (error) {
      if (!environment.production) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
      }
    }
  }

  /** –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Whiteboard */
  async joinRoom(uuid: string, roomToken: string, userId: string, container: HTMLDivElement): Promise<void> {
    this.roomUuid = uuid;

    if (!roomToken) {
      if (!environment.production) {
        console.error('‚ùå –û—à–∏–±–∫–∞: Room Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
      }
      return;
    }

    if (!environment.production) {
      console.log("üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω:", roomToken);
    }

    const roomParams: JoinRoomParams = {
      uuid,
      roomToken,
      uid: userId,
      isWritable: true,
    };

    try {
      this.room = await this.sdk.joinRoom(roomParams);
      this.roomSubject.next(this.room);
      if (!environment.production) {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Whiteboard');
        console.log("üîç Writable:", this.room?.isWritable);
        console.log(this.room);
      }

      // üîπ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–æ—Å–∫—É –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
      if (!environment.production) {
        console.log("üìå –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º whiteboard...");
      }
      await this.bindWhiteboardToContainer(container);
      if (!environment.production) {
        console.log("‚úÖ Whiteboard –ø—Ä–∏–≤—è–∑–∞–Ω!");
      }

    } catch (error) {
      if (!environment.production) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –¥–æ—Å–∫–µ:', error);
      }
    }
  }

  /** üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ whiteboard –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É */
  private async bindWhiteboardToContainer(container: HTMLDivElement): Promise<void> {
    if (!this.room) {
      if (!environment.production) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–Ω–∞—Ç–∞ (room) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä!");
      }
      return;
    }

    try {
      await this.room.bindHtmlElement(container);
      if (!environment.production) {
        console.log("üé® –•–æ–ª—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É!");
      }
    } catch (error) {
      if (!environment.production) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ö–æ–ª—Å—Ç–∞:", error);
      }
    }
  }

  /** –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É */
  getRoom(): Room | undefined {
    return this.room;
  }

}
